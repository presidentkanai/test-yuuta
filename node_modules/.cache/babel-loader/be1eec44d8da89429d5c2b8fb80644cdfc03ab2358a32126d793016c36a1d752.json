{"ast":null,"code":"import { universalResolverReverseAbi } from '../../constants/abis.js';\nimport { getChainContractAddress } from '../../utils/chain.js';\nimport { toHex } from '../../utils/encoding/toHex.js';\nimport { isNullUniversalResolverError } from '../../utils/ens/errors.js';\nimport { packetToBytes } from '../../utils/ens/packetToBytes.js';\nimport { readContract } from '../public/readContract.js';\n/**\n * Gets primary name for specified address.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsName.html\n * - Examples: https://stackblitz.com/github/wagmi-dev/viem/tree/main/examples/ens\n *\n * Calls `reverse(bytes)` on ENS Universal Resolver Contract to \"reverse resolve\" the address to the primary ENS name.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsNameParameters}\n * @returns Name or `null` if not found. {@link GetEnsNameReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsName } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const ensName = await getEnsName(client, {\n *   address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n * })\n * // 'wagmi-dev.eth'\n */\nexport async function getEnsName(client, _ref) {\n  let {\n    address,\n    blockNumber,\n    blockTag,\n    universalResolverAddress: universalResolverAddress_\n  } = _ref;\n  let universalResolverAddress = universalResolverAddress_;\n  if (!universalResolverAddress) {\n    if (!client.chain) throw new Error('client chain not configured. universalResolverAddress is required.');\n    universalResolverAddress = getChainContractAddress({\n      blockNumber,\n      chain: client.chain,\n      contract: 'ensUniversalResolver'\n    });\n  }\n  const reverseNode = `${address.toLowerCase().substring(2)}.addr.reverse`;\n  try {\n    const res = await readContract(client, {\n      address: universalResolverAddress,\n      abi: universalResolverReverseAbi,\n      functionName: 'reverse',\n      args: [toHex(packetToBytes(reverseNode))],\n      blockNumber,\n      blockTag\n    });\n    return res[0];\n  } catch (err) {\n    if (isNullUniversalResolverError(err, 'reverse')) return null;\n    throw err;\n  }\n}","map":{"version":3,"names":["universalResolverReverseAbi","getChainContractAddress","toHex","isNullUniversalResolverError","packetToBytes","readContract","getEnsName","client","_ref","address","blockNumber","blockTag","universalResolverAddress","universalResolverAddress_","chain","Error","contract","reverseNode","toLowerCase","substring","res","abi","functionName","args","err"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/actions/ens/getEnsName.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { universalResolverReverseAbi } from '../../constants/abis.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Prettify } from '../../types/utils.js'\nimport { getChainContractAddress } from '../../utils/chain.js'\nimport { toHex } from '../../utils/encoding/toHex.js'\nimport { isNullUniversalResolverError } from '../../utils/ens/errors.js'\nimport { packetToBytes } from '../../utils/ens/packetToBytes.js'\nimport {\n  type ReadContractParameters,\n  readContract,\n} from '../public/readContract.js'\n\nexport type GetEnsNameParameters = Prettify<\n  Pick<ReadContractParameters, 'blockNumber' | 'blockTag'> & {\n    /** Address to get ENS name for. */\n    address: Address\n    /** Address of ENS Universal Resolver Contract. */\n    universalResolverAddress?: Address\n  }\n>\n\nexport type GetEnsNameReturnType = string | null\n\n/**\n * Gets primary name for specified address.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsName.html\n * - Examples: https://stackblitz.com/github/wagmi-dev/viem/tree/main/examples/ens\n *\n * Calls `reverse(bytes)` on ENS Universal Resolver Contract to \"reverse resolve\" the address to the primary ENS name.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsNameParameters}\n * @returns Name or `null` if not found. {@link GetEnsNameReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsName } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const ensName = await getEnsName(client, {\n *   address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n * })\n * // 'wagmi-dev.eth'\n */\nexport async function getEnsName<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    address,\n    blockNumber,\n    blockTag,\n    universalResolverAddress: universalResolverAddress_,\n  }: GetEnsNameParameters,\n): Promise<GetEnsNameReturnType> {\n  let universalResolverAddress = universalResolverAddress_\n  if (!universalResolverAddress) {\n    if (!client.chain)\n      throw new Error(\n        'client chain not configured. universalResolverAddress is required.',\n      )\n\n    universalResolverAddress = getChainContractAddress({\n      blockNumber,\n      chain: client.chain,\n      contract: 'ensUniversalResolver',\n    })\n  }\n\n  const reverseNode = `${address.toLowerCase().substring(2)}.addr.reverse`\n  try {\n    const res = await readContract(client, {\n      address: universalResolverAddress,\n      abi: universalResolverReverseAbi,\n      functionName: 'reverse',\n      args: [toHex(packetToBytes(reverseNode))],\n      blockNumber,\n      blockTag,\n    })\n    return res[0]\n  } catch (err) {\n    if (isNullUniversalResolverError(err, 'reverse')) return null\n    throw err\n  }\n}\n"],"mappings":"AAIA,SAASA,2BAA2B,QAAQ,yBAAyB;AAGrE,SAASC,uBAAuB,QAAQ,sBAAsB;AAC9D,SAASC,KAAK,QAAQ,+BAA+B;AACrD,SAASC,4BAA4B,QAAQ,2BAA2B;AACxE,SAASC,aAAa,QAAQ,kCAAkC;AAChE,SAEEC,YAAY,QACP,2BAA2B;AAalC;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,OAAO,eAAeC,UAAUA,CAC9BC,MAAiC,EAAAC,IAAA,EAMV;EAAA,IALvB;IACEC,OAAO;IACPC,WAAW;IACXC,QAAQ;IACRC,wBAAwB,EAAEC;EAAyB,CAC9B,GAAAL,IAAA;EAEvB,IAAII,wBAAwB,GAAGC,yBAAyB;EACxD,IAAI,CAACD,wBAAwB,EAAE;IAC7B,IAAI,CAACL,MAAM,CAACO,KAAK,EACf,MAAM,IAAIC,KAAK,CACb,oEAAoE,CACrE;IAEHH,wBAAwB,GAAGX,uBAAuB,CAAC;MACjDS,WAAW;MACXI,KAAK,EAAEP,MAAM,CAACO,KAAK;MACnBE,QAAQ,EAAE;KACX,CAAC;;EAGJ,MAAMC,WAAW,GAAG,GAAGR,OAAO,CAACS,WAAW,EAAE,CAACC,SAAS,CAAC,CAAC,CAAC,eAAe;EACxE,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMf,YAAY,CAACE,MAAM,EAAE;MACrCE,OAAO,EAAEG,wBAAwB;MACjCS,GAAG,EAAErB,2BAA2B;MAChCsB,YAAY,EAAE,SAAS;MACvBC,IAAI,EAAE,CAACrB,KAAK,CAACE,aAAa,CAACa,WAAW,CAAC,CAAC,CAAC;MACzCP,WAAW;MACXC;KACD,CAAC;IACF,OAAOS,GAAG,CAAC,CAAC,CAAC;GACd,CAAC,OAAOI,GAAG,EAAE;IACZ,IAAIrB,4BAA4B,CAACqB,GAAG,EAAE,SAAS,CAAC,EAAE,OAAO,IAAI;IAC7D,MAAMA,GAAG;;AAEb"},"metadata":{},"sourceType":"module","externalDependencies":[]}