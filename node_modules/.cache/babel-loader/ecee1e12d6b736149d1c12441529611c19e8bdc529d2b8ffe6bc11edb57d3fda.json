{"ast":null,"code":"import { getBlockNumber } from './getBlockNumber.js';\nimport { getTransaction } from './getTransaction.js';\n/**\n * Returns the number of blocks passed (confirmations) since the transaction was processed on a block.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransactionConfirmations.html\n * - Example: https://stackblitz.com/github/wagmi-dev/viem/tree/main/examples/transactions/fetching-transactions\n * - JSON-RPC Methods: [`eth_getTransactionConfirmations`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionConfirmations)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionConfirmationsParameters}\n * @returns The number of blocks passed since the transaction was processed. If confirmations is 0, then the Transaction has not been confirmed & processed yet. {@link GetTransactionConfirmationsReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransactionConfirmations } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const confirmations = await getTransactionConfirmations(client, {\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n * })\n */\nexport async function getTransactionConfirmations(client, _ref) {\n  let {\n    hash,\n    transactionReceipt\n  } = _ref;\n  const [blockNumber, transaction] = await Promise.all([getBlockNumber(client), hash ? getTransaction(client, {\n    hash\n  }) : undefined]);\n  const transactionBlockNumber = (transactionReceipt === null || transactionReceipt === void 0 ? void 0 : transactionReceipt.blockNumber) || (transaction === null || transaction === void 0 ? void 0 : transaction.blockNumber);\n  if (!transactionBlockNumber) return 0n;\n  return blockNumber - transactionBlockNumber + 1n;\n}","map":{"version":3,"names":["getBlockNumber","getTransaction","getTransactionConfirmations","client","_ref","hash","transactionReceipt","blockNumber","transaction","Promise","all","undefined","transactionBlockNumber"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/actions/public/getTransactionConfirmations.ts"],"sourcesContent":["import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { FormattedTransactionReceipt } from '../../utils/formatters/transactionReceipt.js'\n\nimport { getBlockNumber } from './getBlockNumber.js'\nimport { getTransaction } from './getTransaction.js'\n\nexport type GetTransactionConfirmationsParameters<\n  TChain extends Chain | undefined = Chain,\n> =\n  | {\n      /** The transaction hash. */\n      hash: Hash\n      transactionReceipt?: never\n    }\n  | {\n      hash?: never\n      /** The transaction receipt. */\n      transactionReceipt: FormattedTransactionReceipt<TChain>\n    }\n\nexport type GetTransactionConfirmationsReturnType = bigint\n\n/**\n * Returns the number of blocks passed (confirmations) since the transaction was processed on a block.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransactionConfirmations.html\n * - Example: https://stackblitz.com/github/wagmi-dev/viem/tree/main/examples/transactions/fetching-transactions\n * - JSON-RPC Methods: [`eth_getTransactionConfirmations`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionConfirmations)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionConfirmationsParameters}\n * @returns The number of blocks passed since the transaction was processed. If confirmations is 0, then the Transaction has not been confirmed & processed yet. {@link GetTransactionConfirmationsReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransactionConfirmations } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const confirmations = await getTransactionConfirmations(client, {\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n * })\n */\nexport async function getTransactionConfirmations<\n  TChain extends Chain | undefined,\n>(\n  client: Client<Transport, TChain>,\n  { hash, transactionReceipt }: GetTransactionConfirmationsParameters<TChain>,\n): Promise<GetTransactionConfirmationsReturnType> {\n  const [blockNumber, transaction] = await Promise.all([\n    getBlockNumber(client),\n    hash ? getTransaction(client, { hash }) : undefined,\n  ])\n  const transactionBlockNumber =\n    transactionReceipt?.blockNumber || transaction?.blockNumber\n  if (!transactionBlockNumber) return 0n\n  return blockNumber - transactionBlockNumber! + 1n\n}\n"],"mappings":"AAMA,SAASA,cAAc,QAAQ,qBAAqB;AACpD,SAASC,cAAc,QAAQ,qBAAqB;AAkBpD;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,OAAO,eAAeC,2BAA2BA,CAG/CC,MAAiC,EAAAC,IAAA,EAC0C;EAAA,IAA3E;IAAEC,IAAI;IAAEC;EAAkB,CAAiD,GAAAF,IAAA;EAE3E,MAAM,CAACG,WAAW,EAAEC,WAAW,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACnDV,cAAc,CAACG,MAAM,CAAC,EACtBE,IAAI,GAAGJ,cAAc,CAACE,MAAM,EAAE;IAAEE;EAAI,CAAE,CAAC,GAAGM,SAAS,CACpD,CAAC;EACF,MAAMC,sBAAsB,GAC1B,CAAAN,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,CAAEC,WAAW,MAAIC,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAED,WAAW;EAC7D,IAAI,CAACK,sBAAsB,EAAE,OAAO,EAAE;EACtC,OAAOL,WAAW,GAAGK,sBAAuB,GAAG,EAAE;AACnD"},"metadata":{},"sourceType":"module","externalDependencies":[]}