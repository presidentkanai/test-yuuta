{"ast":null,"code":"import { encodeFunctionData } from '../../utils/abi/encodeFunctionData.js';\nimport { sendTransaction } from './sendTransaction.js';\n/**\n * Executes a write function on a contract.\n *\n * - Docs: https://viem.sh/docs/contract/writeContract.html\n * - Examples: https://stackblitz.com/github/wagmi-dev/viem/tree/main/examples/contracts/writing-to-contracts\n *\n * A \"write\" function on a Solidity contract modifies the state of the blockchain. These types of functions require gas to be executed, and hence a [Transaction](https://viem.sh/docs/glossary/terms.html) is needed to be broadcast in order to change the state.\n *\n * Internally, uses a [Wallet Client](https://viem.sh/docs/clients/wallet.html) to call the [`sendTransaction` action](https://viem.sh/docs/actions/wallet/sendTransaction.html) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData.html).\n *\n * __Warning: The `write` internally sends a transaction – it does not validate if the contract write will succeed (the contract may throw an error). It is highly recommended to [simulate the contract write with `contract.simulate`](https://viem.sh/docs/contract/writeContract.html#usage) before you execute it.__\n *\n * @param client - Client to use\n * @param parameters - {@link WriteContractParameters}\n * @returns A [Transaction Hash](https://viem.sh/docs/glossary/terms.html#hash). {@link WriteContractReturnType}\n *\n * @example\n * import { createWalletClient, custom, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { writeContract } from 'viem/contract'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const hash = await writeContract(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\n *   functionName: 'mint',\n *   args: [69420],\n * })\n *\n * @example\n * // With Validation\n * import { createWalletClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { simulateContract, writeContract } from 'viem/contract'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const { request } = await simulateContract(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\n *   functionName: 'mint',\n *   args: [69420],\n * }\n * const hash = await writeContract(client, request)\n */\nexport async function writeContract(client, _ref) {\n  let {\n    abi,\n    address,\n    args,\n    dataSuffix,\n    functionName,\n    ...request\n  } = _ref;\n  const data = encodeFunctionData({\n    abi,\n    args,\n    functionName\n  });\n  const hash = await sendTransaction(client, {\n    data: `${data}${dataSuffix ? dataSuffix.replace('0x', '') : ''}`,\n    to: address,\n    ...request\n  });\n  return hash;\n}","map":{"version":3,"names":["encodeFunctionData","sendTransaction","writeContract","client","_ref","abi","address","args","dataSuffix","functionName","request","data","hash","replace","to"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/actions/wallet/writeContract.ts"],"sourcesContent":["import type { Abi } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { GetChain } from '../../types/chain.js'\nimport type { ContractFunctionConfig, GetValue } from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport {\n  type EncodeFunctionDataParameters,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport type { FormattedTransactionRequest } from '../../utils/formatters/transactionRequest.js'\nimport {\n  type SendTransactionParameters,\n  type SendTransactionReturnType,\n  sendTransaction,\n} from './sendTransaction.js'\n\nexport type WriteContractParameters<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TFunctionName extends string = string,\n  TChain extends Chain | undefined = Chain,\n  TAccount extends Account | undefined = Account | undefined,\n  TChainOverride extends Chain | undefined = Chain | undefined,\n> = ContractFunctionConfig<TAbi, TFunctionName, 'payable' | 'nonpayable'> &\n  GetAccountParameter<TAccount> &\n  GetChain<TChain, TChainOverride> &\n  UnionOmit<\n    FormattedTransactionRequest<\n      TChainOverride extends Chain ? TChainOverride : TChain\n    >,\n    'from' | 'to' | 'data' | 'value'\n  > &\n  GetValue<\n    TAbi,\n    TFunctionName,\n    SendTransactionParameters<\n      TChain,\n      TAccount,\n      TChainOverride\n    > extends SendTransactionParameters\n      ? SendTransactionParameters<TChain, TAccount, TChainOverride>['value']\n      : SendTransactionParameters['value']\n  > & {\n    /** Data to append to the end of the calldata. Useful for adding a [\"domain\" tag](https://opensea.notion.site/opensea/Seaport-Order-Attributions-ec2d69bf455041a5baa490941aad307f). */\n    dataSuffix?: Hex\n  }\n\nexport type WriteContractReturnType = SendTransactionReturnType\n\n/**\n * Executes a write function on a contract.\n *\n * - Docs: https://viem.sh/docs/contract/writeContract.html\n * - Examples: https://stackblitz.com/github/wagmi-dev/viem/tree/main/examples/contracts/writing-to-contracts\n *\n * A \"write\" function on a Solidity contract modifies the state of the blockchain. These types of functions require gas to be executed, and hence a [Transaction](https://viem.sh/docs/glossary/terms.html) is needed to be broadcast in order to change the state.\n *\n * Internally, uses a [Wallet Client](https://viem.sh/docs/clients/wallet.html) to call the [`sendTransaction` action](https://viem.sh/docs/actions/wallet/sendTransaction.html) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData.html).\n *\n * __Warning: The `write` internally sends a transaction – it does not validate if the contract write will succeed (the contract may throw an error). It is highly recommended to [simulate the contract write with `contract.simulate`](https://viem.sh/docs/contract/writeContract.html#usage) before you execute it.__\n *\n * @param client - Client to use\n * @param parameters - {@link WriteContractParameters}\n * @returns A [Transaction Hash](https://viem.sh/docs/glossary/terms.html#hash). {@link WriteContractReturnType}\n *\n * @example\n * import { createWalletClient, custom, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { writeContract } from 'viem/contract'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const hash = await writeContract(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\n *   functionName: 'mint',\n *   args: [69420],\n * })\n *\n * @example\n * // With Validation\n * import { createWalletClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { simulateContract, writeContract } from 'viem/contract'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const { request } = await simulateContract(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\n *   functionName: 'mint',\n *   args: [69420],\n * }\n * const hash = await writeContract(client, request)\n */\nexport async function writeContract<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n  const TAbi extends Abi | readonly unknown[],\n  TFunctionName extends string,\n  TChainOverride extends Chain | undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  {\n    abi,\n    address,\n    args,\n    dataSuffix,\n    functionName,\n    ...request\n  }: WriteContractParameters<\n    TAbi,\n    TFunctionName,\n    TChain,\n    TAccount,\n    TChainOverride\n  >,\n): Promise<WriteContractReturnType> {\n  const data = encodeFunctionData({\n    abi,\n    args,\n    functionName,\n  } as unknown as EncodeFunctionDataParameters<TAbi, TFunctionName>)\n  const hash = await sendTransaction(client, {\n    data: `${data}${dataSuffix ? dataSuffix.replace('0x', '') : ''}`,\n    to: address,\n    ...request,\n  } as unknown as SendTransactionParameters<TChain, TAccount, TChainOverride>)\n  return hash\n}\n"],"mappings":"AAWA,SAEEA,kBAAkB,QACb,uCAAuC;AAE9C,SAGEC,eAAe,QACV,sBAAsB;AAkC7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA,OAAO,eAAeC,aAAaA,CAOjCC,MAA2C,EAAAC,IAAA,EAc1C;EAAA,IAbD;IACEC,GAAG;IACHC,OAAO;IACPC,IAAI;IACJC,UAAU;IACVC,YAAY;IACZ,GAAGC;EAAO,CAOX,GAAAN,IAAA;EAED,MAAMO,IAAI,GAAGX,kBAAkB,CAAC;IAC9BK,GAAG;IACHE,IAAI;IACJE;GAC+D,CAAC;EAClE,MAAMG,IAAI,GAAG,MAAMX,eAAe,CAACE,MAAM,EAAE;IACzCQ,IAAI,EAAE,GAAGA,IAAI,GAAGH,UAAU,GAAGA,UAAU,CAACK,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE;IAChEC,EAAE,EAAER,OAAO;IACX,GAAGI;GACsE,CAAC;EAC5E,OAAOE,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}