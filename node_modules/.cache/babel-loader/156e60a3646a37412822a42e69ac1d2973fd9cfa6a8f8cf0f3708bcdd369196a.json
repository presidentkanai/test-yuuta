{"ast":null,"code":"import { numberToHex } from '../../utils/encoding/toHex.js';\n/**\n * Retrieves the bytecode at an address.\n *\n * - Docs: https://viem.sh/docs/contract/getBytecode.html\n * - JSON-RPC Methods: [`eth_getCode`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getcode)\n *\n * @param client - Client to use\n * @param parameters - {@link GetBytecodeParameters}\n * @returns The contract's bytecode. {@link GetBytecodeReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBytecode } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const code = await getBytecode(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n * })\n */\nexport async function getBytecode(client, _ref) {\n  let {\n    address,\n    blockNumber,\n    blockTag = 'latest'\n  } = _ref;\n  const blockNumberHex = blockNumber !== undefined ? numberToHex(blockNumber) : undefined;\n  const hex = await client.request({\n    method: 'eth_getCode',\n    params: [address, blockNumberHex || blockTag]\n  });\n  if (hex === '0x') return undefined;\n  return hex;\n}","map":{"version":3,"names":["numberToHex","getBytecode","client","_ref","address","blockNumber","blockTag","blockNumberHex","undefined","hex","request","method","params"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/actions/public/getBytecode.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hex } from '../../types/misc.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\n\nexport type GetBytecodeParameters = {\n  address: Address\n} & (\n  | {\n      blockNumber?: never\n      blockTag?: BlockTag\n    }\n  | {\n      blockNumber?: bigint\n      blockTag?: never\n    }\n)\n\nexport type GetBytecodeReturnType = Hex | undefined\n\n/**\n * Retrieves the bytecode at an address.\n *\n * - Docs: https://viem.sh/docs/contract/getBytecode.html\n * - JSON-RPC Methods: [`eth_getCode`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getcode)\n *\n * @param client - Client to use\n * @param parameters - {@link GetBytecodeParameters}\n * @returns The contract's bytecode. {@link GetBytecodeReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBytecode } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const code = await getBytecode(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n * })\n */\nexport async function getBytecode<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  { address, blockNumber, blockTag = 'latest' }: GetBytecodeParameters,\n): Promise<GetBytecodeReturnType> {\n  const blockNumberHex =\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\n  const hex = await client.request({\n    method: 'eth_getCode',\n    params: [address, blockNumberHex || blockTag],\n  })\n  if (hex === '0x') return undefined\n  return hex\n}\n"],"mappings":"AAOA,SAASA,WAAW,QAAQ,+BAA+B;AAiB3D;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAO,eAAeC,WAAWA,CAC/BC,MAAiC,EAAAC,IAAA,EACmC;EAAA,IAApE;IAAEC,OAAO;IAAEC,WAAW;IAAEC,QAAQ,GAAG;EAAQ,CAAyB,GAAAH,IAAA;EAEpE,MAAMI,cAAc,GAClBF,WAAW,KAAKG,SAAS,GAAGR,WAAW,CAACK,WAAW,CAAC,GAAGG,SAAS;EAClE,MAAMC,GAAG,GAAG,MAAMP,MAAM,CAACQ,OAAO,CAAC;IAC/BC,MAAM,EAAE,aAAa;IACrBC,MAAM,EAAE,CAACR,OAAO,EAAEG,cAAc,IAAID,QAAQ;GAC7C,CAAC;EACF,IAAIG,GAAG,KAAK,IAAI,EAAE,OAAOD,SAAS;EAClC,OAAOC,GAAG;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}