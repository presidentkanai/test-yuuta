{"ast":null,"code":"import { createClient } from './createClient.js';\nimport { walletActions } from './decorators/wallet.js';\nexport function createWalletClient(parameters) {\n  const {\n    key = 'wallet',\n    name = 'Wallet Client',\n    transport\n  } = parameters;\n  const client = createClient({\n    ...parameters,\n    key,\n    name,\n    transport: opts => transport({\n      ...opts,\n      retryCount: 0\n    }),\n    type: 'walletClient'\n  });\n  return client.extend(walletActions);\n}","map":{"version":3,"names":["createClient","walletActions","createWalletClient","parameters","key","name","transport","client","opts","retryCount","type","extend"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/clients/createWalletClient.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Account } from '../accounts/types.js'\nimport type { ParseAccount } from '../types/account.js'\nimport type { Chain } from '../types/chain.js'\nimport type { WalletRpcSchema } from '../types/eip1193.js'\nimport type { Prettify } from '../types/utils.js'\nimport { type Client, type ClientConfig, createClient } from './createClient.js'\nimport { type WalletActions, walletActions } from './decorators/wallet.js'\nimport type { Transport } from './transports/createTransport.js'\n\nexport type WalletClientConfig<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  accountOrAddress extends Account | Address | undefined =\n    | Account\n    | Address\n    | undefined,\n> = Prettify<\n  Pick<\n    ClientConfig<transport, chain, accountOrAddress>,\n    | 'account'\n    | 'cacheTime'\n    | 'chain'\n    | 'key'\n    | 'name'\n    | 'pollingInterval'\n    | 'transport'\n  >\n>\n\nexport type WalletClient<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n> = Prettify<\n  Client<\n    transport,\n    chain,\n    account,\n    WalletRpcSchema,\n    WalletActions<chain, account>\n  >\n>\n\n/**\n * Creates a Wallet Client with a given [Transport](https://viem.sh/docs/clients/intro.html) configured for a [Chain](https://viem.sh/docs/clients/chains.html).\n *\n * - Docs: https://viem.sh/docs/clients/wallet.html\n *\n * A Wallet Client is an interface to interact with [Ethereum Account(s)](https://ethereum.org/en/glossary/#account) and provides the ability to retrieve accounts, execute transactions, sign messages, etc. through [Wallet Actions](https://viem.sh/docs/actions/wallet/introduction.html).\n *\n * The Wallet Client supports signing over:\n * - [JSON-RPC Accounts](https://viem.sh/docs/clients/wallet.html#json-rpc-accounts) (e.g. Browser Extension Wallets, WalletConnect, etc).\n * - [Local Accounts](https://viem.sh/docs/clients/wallet.html#local-accounts-private-key-mnemonic-etc) (e.g. private key/mnemonic wallets).\n *\n * @param config - {@link WalletClientConfig}\n * @returns A Wallet Client. {@link WalletClient}\n *\n * @example\n * // JSON-RPC Account\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n *\n * @example\n * // Local Account\n * import { createWalletClient, custom } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0xâ€¦')\n *   chain: mainnet,\n *   transport: http(),\n * })\n */\nexport function createWalletClient<\n  transport extends Transport,\n  chain extends Chain | undefined = undefined,\n  accountOrAddress extends Account | Address | undefined = undefined,\n>(\n  parameters: WalletClientConfig<transport, chain, accountOrAddress>,\n): WalletClient<transport, chain, ParseAccount<accountOrAddress>>\n\nexport function createWalletClient(\n  parameters: WalletClientConfig,\n): WalletClient {\n  const { key = 'wallet', name = 'Wallet Client', transport } = parameters\n  const client = createClient({\n    ...parameters,\n    key,\n    name,\n    transport: (opts) => transport({ ...opts, retryCount: 0 }),\n    type: 'walletClient',\n  })\n  return client.extend(walletActions)\n}\n"],"mappings":"AAOA,SAAyCA,YAAY,QAAQ,mBAAmB;AAChF,SAA6BC,aAAa,QAAQ,wBAAwB;AAiF1E,OAAM,SAAUC,kBAAkBA,CAChCC,UAA8B;EAE9B,MAAM;IAAEC,GAAG,GAAG,QAAQ;IAAEC,IAAI,GAAG,eAAe;IAAEC;EAAS,CAAE,GAAGH,UAAU;EACxE,MAAMI,MAAM,GAAGP,YAAY,CAAC;IAC1B,GAAGG,UAAU;IACbC,GAAG;IACHC,IAAI;IACJC,SAAS,EAAGE,IAAI,IAAKF,SAAS,CAAC;MAAE,GAAGE,IAAI;MAAEC,UAAU,EAAE;IAAC,CAAE,CAAC;IAC1DC,IAAI,EAAE;GACP,CAAC;EACF,OAAOH,MAAM,CAACI,MAAM,CAACV,aAAa,CAAC;AACrC"},"metadata":{},"sourceType":"module","externalDependencies":[]}