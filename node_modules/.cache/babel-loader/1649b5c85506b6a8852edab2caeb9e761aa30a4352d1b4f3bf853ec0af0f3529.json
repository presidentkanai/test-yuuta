{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { AccountNotFoundError } from '../../errors/account.js';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\nimport { getEstimateGasError } from '../../utils/errors/getEstimateGasError.js';\nimport { extract } from '../../utils/formatters/extract.js';\nimport { formatTransactionRequest } from '../../utils/formatters/transactionRequest.js';\nimport { assertRequest } from '../../utils/transaction/assertRequest.js';\nimport { prepareTransactionRequest } from '../wallet/prepareTransactionRequest.js';\n/**\n * Estimates the gas necessary to complete a transaction without submitting it to the network.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateGas.html\n * - JSON-RPC Methods: [`eth_estimateGas`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_estimategas)\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateGasParameters}\n * @returns The gas estimate (in wei). {@link EstimateGasReturnType}\n *\n * @example\n * import { createPublicClient, http, parseEther } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateGas } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const gasEstimate = await estimateGas(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: parseEther('1'),\n * })\n */\nexport async function estimateGas(client, args) {\n  var _args$account;\n  const account_ = (_args$account = args.account) !== null && _args$account !== void 0 ? _args$account : client.account;\n  if (!account_) throw new AccountNotFoundError({\n    docsPath: '/docs/actions/public/estimateGas'\n  });\n  const account = parseAccount(account_);\n  try {\n    var _client$chain;\n    const {\n      accessList,\n      blockNumber,\n      blockTag,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n      ...rest\n    } = account.type === 'local' ? await prepareTransactionRequest(client, args) : args;\n    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined;\n    const block = blockNumberHex || blockTag;\n    assertRequest(args);\n    const format = ((_client$chain = client.chain) === null || _client$chain === void 0 || (_client$chain = _client$chain.formatters) === null || _client$chain === void 0 || (_client$chain = _client$chain.transactionRequest) === null || _client$chain === void 0 ? void 0 : _client$chain.format) || formatTransactionRequest;\n    const request = format({\n      // Pick out extra data that might exist on the chain's transaction request type.\n      ...extract(rest, {\n        format\n      }),\n      from: account.address,\n      accessList,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value\n    });\n    const balance = await client.request({\n      method: 'eth_estimateGas',\n      params: block ? [request, block] : [request]\n    });\n    return BigInt(balance);\n  } catch (err) {\n    throw getEstimateGasError(err, {\n      ...args,\n      account,\n      chain: client.chain\n    });\n  }\n}","map":{"version":3,"names":["parseAccount","AccountNotFoundError","numberToHex","getEstimateGasError","extract","formatTransactionRequest","assertRequest","prepareTransactionRequest","estimateGas","client","args","_args$account","account_","account","docsPath","_client$chain","accessList","blockNumber","blockTag","data","gas","gasPrice","maxFeePerGas","maxPriorityFeePerGas","nonce","to","value","rest","type","blockNumberHex","undefined","block","format","chain","formatters","transactionRequest","request","from","address","balance","method","params","BigInt","err"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/actions/public/estimateGas.ts"],"sourcesContent":["import type { Account } from '../../accounts/types.js'\nimport { parseAccount } from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { AccountNotFoundError } from '../../errors/account.js'\nimport type { BaseError } from '../../errors/base.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { TransactionRequest } from '../../types/transaction.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\nimport { getEstimateGasError } from '../../utils/errors/getEstimateGasError.js'\nimport { extract } from '../../utils/formatters/extract.js'\nimport {\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\nimport {\n  type AssertRequestParameters,\n  assertRequest,\n} from '../../utils/transaction/assertRequest.js'\nimport {\n  type PrepareTransactionRequestParameters,\n  prepareTransactionRequest,\n} from '../wallet/prepareTransactionRequest.js'\n\nexport type FormattedEstimateGas<\n  TChain extends Chain | undefined = Chain | undefined,\n> = FormattedTransactionRequest<TChain>\n\nexport type EstimateGasParameters<\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = undefined,\n> = UnionOmit<FormattedEstimateGas<TChain>, 'from'> &\n  GetAccountParameter<TAccount> &\n  (\n    | {\n        /** The balance of the account at a block number. */\n        blockNumber?: bigint\n        blockTag?: never\n      }\n    | {\n        blockNumber?: never\n        /**\n         * The balance of the account at a block tag.\n         * @default 'latest'\n         */\n        blockTag?: BlockTag\n      }\n  )\n\nexport type EstimateGasReturnType = bigint\n\n/**\n * Estimates the gas necessary to complete a transaction without submitting it to the network.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateGas.html\n * - JSON-RPC Methods: [`eth_estimateGas`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_estimategas)\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateGasParameters}\n * @returns The gas estimate (in wei). {@link EstimateGasReturnType}\n *\n * @example\n * import { createPublicClient, http, parseEther } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateGas } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const gasEstimate = await estimateGas(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: parseEther('1'),\n * })\n */\nexport async function estimateGas<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined = undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  args: EstimateGasParameters<TChain, TAccount>,\n): Promise<EstimateGasReturnType> {\n  const account_ = args.account ?? client.account\n  if (!account_)\n    throw new AccountNotFoundError({\n      docsPath: '/docs/actions/public/estimateGas',\n    })\n  const account = parseAccount(account_)\n\n  try {\n    const {\n      accessList,\n      blockNumber,\n      blockTag,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n      ...rest\n    } =\n      account.type === 'local'\n        ? ((await prepareTransactionRequest(\n            client,\n            args as PrepareTransactionRequestParameters,\n          )) as EstimateGasParameters)\n        : args\n\n    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined\n    const block = blockNumberHex || blockTag\n\n    assertRequest(args as AssertRequestParameters)\n\n    const format =\n      client.chain?.formatters?.transactionRequest?.format ||\n      formatTransactionRequest\n    const request = format({\n      // Pick out extra data that might exist on the chain's transaction request type.\n      ...extract(rest, { format }),\n      from: account.address,\n      accessList,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n    } as TransactionRequest)\n\n    const balance = await client.request({\n      method: 'eth_estimateGas',\n      params: block ? [request, block] : [request],\n    })\n    return BigInt(balance)\n  } catch (err) {\n    throw getEstimateGasError(err as BaseError, {\n      ...args,\n      account,\n      chain: client.chain,\n    })\n  }\n}\n"],"mappings":"AACA,SAASA,YAAY,QAAQ,sCAAsC;AAGnE,SAASC,oBAAoB,QAAQ,yBAAyB;AAO9D,SAASC,WAAW,QAAQ,+BAA+B;AAC3D,SAASC,mBAAmB,QAAQ,2CAA2C;AAC/E,SAASC,OAAO,QAAQ,mCAAmC;AAC3D,SAEEC,wBAAwB,QACnB,8CAA8C;AACrD,SAEEC,aAAa,QACR,0CAA0C;AACjD,SAEEC,yBAAyB,QACpB,wCAAwC;AA6B/C;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAO,eAAeC,WAAWA,CAI/BC,MAA2C,EAC3CC,IAA6C;EAAA,IAAAC,aAAA;EAE7C,MAAMC,QAAQ,IAAAD,aAAA,GAAGD,IAAI,CAACG,OAAO,cAAAF,aAAA,cAAAA,aAAA,GAAIF,MAAM,CAACI,OAAO;EAC/C,IAAI,CAACD,QAAQ,EACX,MAAM,IAAIX,oBAAoB,CAAC;IAC7Ba,QAAQ,EAAE;GACX,CAAC;EACJ,MAAMD,OAAO,GAAGb,YAAY,CAACY,QAAQ,CAAC;EAEtC,IAAI;IAAA,IAAAG,aAAA;IACF,MAAM;MACJC,UAAU;MACVC,WAAW;MACXC,QAAQ;MACRC,IAAI;MACJC,GAAG;MACHC,QAAQ;MACRC,YAAY;MACZC,oBAAoB;MACpBC,KAAK;MACLC,EAAE;MACFC,KAAK;MACL,GAAGC;IAAI,CACR,GACCd,OAAO,CAACe,IAAI,KAAK,OAAO,GAClB,MAAMrB,yBAAyB,CAC/BE,MAAM,EACNC,IAA2C,CAC5C,GACDA,IAAI;IAEV,MAAMmB,cAAc,GAAGZ,WAAW,GAAGf,WAAW,CAACe,WAAW,CAAC,GAAGa,SAAS;IACzE,MAAMC,KAAK,GAAGF,cAAc,IAAIX,QAAQ;IAExCZ,aAAa,CAACI,IAA+B,CAAC;IAE9C,MAAMsB,MAAM,GACV,EAAAjB,aAAA,GAAAN,MAAM,CAACwB,KAAK,cAAAlB,aAAA,gBAAAA,aAAA,GAAZA,aAAA,CAAcmB,UAAU,cAAAnB,aAAA,gBAAAA,aAAA,GAAxBA,aAAA,CAA0BoB,kBAAkB,cAAApB,aAAA,uBAA5CA,aAAA,CAA8CiB,MAAM,KACpD3B,wBAAwB;IAC1B,MAAM+B,OAAO,GAAGJ,MAAM,CAAC;MACrB;MACA,GAAG5B,OAAO,CAACuB,IAAI,EAAE;QAAEK;MAAM,CAAE,CAAC;MAC5BK,IAAI,EAAExB,OAAO,CAACyB,OAAO;MACrBtB,UAAU;MACVG,IAAI;MACJC,GAAG;MACHC,QAAQ;MACRC,YAAY;MACZC,oBAAoB;MACpBC,KAAK;MACLC,EAAE;MACFC;KACqB,CAAC;IAExB,MAAMa,OAAO,GAAG,MAAM9B,MAAM,CAAC2B,OAAO,CAAC;MACnCI,MAAM,EAAE,iBAAiB;MACzBC,MAAM,EAAEV,KAAK,GAAG,CAACK,OAAO,EAAEL,KAAK,CAAC,GAAG,CAACK,OAAO;KAC5C,CAAC;IACF,OAAOM,MAAM,CAACH,OAAO,CAAC;GACvB,CAAC,OAAOI,GAAG,EAAE;IACZ,MAAMxC,mBAAmB,CAACwC,GAAgB,EAAE;MAC1C,GAAGjC,IAAI;MACPG,OAAO;MACPoB,KAAK,EAAExB,MAAM,CAACwB;KACf,CAAC;;AAEN"},"metadata":{},"sourceType":"module","externalDependencies":[]}