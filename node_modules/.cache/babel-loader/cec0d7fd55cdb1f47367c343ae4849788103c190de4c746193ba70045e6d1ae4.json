{"ast":null,"code":"import { visit as e } from \"unist-util-visit\";\nimport { toString as r } from \"hast-util-to-string\";\nimport { filter as t } from \"unist-util-filter\";\nimport n from \"parse-numeric-range\";\nimport { refractor as i } from \"refractor/lib/common.js\";\nimport { refractor as o } from \"refractor/lib/all.js\";\nfunction a() {\n  a = function (e, r) {\n    return new t(e, void 0, r);\n  };\n  var e = RegExp.prototype,\n    r = new WeakMap();\n  function t(e, n, i) {\n    var o = new RegExp(e, n);\n    return r.set(o, i || r.get(e)), l(o, t.prototype);\n  }\n  function n(e, t) {\n    var n = r.get(t);\n    return Object.keys(n).reduce(function (r, t) {\n      var i = n[t];\n      if (\"number\" == typeof i) r[t] = e[i];else {\n        for (var o = 0; void 0 === e[i[o]] && o + 1 < i.length;) o++;\n        r[t] = e[i[o]];\n      }\n      return r;\n    }, Object.create(null));\n  }\n  return function (e, r) {\n    if (\"function\" != typeof r && null !== r) throw new TypeError(\"Super expression must either be null or a function\");\n    e.prototype = Object.create(r && r.prototype, {\n      constructor: {\n        value: e,\n        writable: !0,\n        configurable: !0\n      }\n    }), Object.defineProperty(e, \"prototype\", {\n      writable: !1\n    }), r && l(e, r);\n  }(t, RegExp), t.prototype.exec = function (r) {\n    var t = e.exec.call(this, r);\n    if (t) {\n      t.groups = n(t, this);\n      var i = t.indices;\n      i && (i.groups = n(i, this));\n    }\n    return t;\n  }, t.prototype[Symbol.replace] = function (t, i) {\n    if (\"string\" == typeof i) {\n      var o = r.get(this);\n      return e[Symbol.replace].call(this, t, i.replace(/\\$<([^>]+)>/g, function (e, r) {\n        var t = o[r];\n        return \"$\" + (Array.isArray(t) ? t.join(\"$\") : t);\n      }));\n    }\n    if (\"function\" == typeof i) {\n      var a = this;\n      return e[Symbol.replace].call(this, t, function () {\n        var e = arguments;\n        return \"object\" != typeof e[e.length - 1] && (e = [].slice.call(e)).push(n(e, a)), i.apply(this, e);\n      });\n    }\n    return e[Symbol.replace].call(this, t, i);\n  }, a.apply(this, arguments);\n}\nfunction l(e, r) {\n  return l = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (e, r) {\n    return e.__proto__ = r, e;\n  }, l(e, r);\n}\nfunction s(e, r) {\n  (null == r || r > e.length) && (r = e.length);\n  for (var t = 0, n = new Array(r); t < r; t++) n[t] = e[t];\n  return n;\n}\nfunction u(e, r) {\n  var t = \"undefined\" != typeof Symbol && e[Symbol.iterator] || e[\"@@iterator\"];\n  if (t) return (t = t.call(e)).next.bind(t);\n  if (Array.isArray(e) || (t = function (e, r) {\n    if (e) {\n      if (\"string\" == typeof e) return s(e, r);\n      var t = Object.prototype.toString.call(e).slice(8, -1);\n      return \"Object\" === t && e.constructor && (t = e.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(e) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? s(e, r) : void 0;\n    }\n  }(e)) || r && e && \"number\" == typeof e.length) {\n    t && (e = t);\n    var n = 0;\n    return function () {\n      return n >= e.length ? {\n        done: !0\n      } : {\n        done: !1,\n        value: e[n++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nvar c = function (i) {\n    return function (o) {\n      return void 0 === o && (o = {}), function (e, r) {\n        if (r && !e.registered(r)) throw new Error('The default language \"' + r + '\" is not registered with refractor.');\n      }(i, o.defaultLanguage), function (r) {\n        e(r, \"element\", l);\n      };\n      function l(e, l, s) {\n        var c, p;\n        if (s && \"pre\" === s.tagName && \"code\" === e.tagName) {\n          var f = (null == e || null == (c = e.data) ? void 0 : c.meta) || (null == e || null == (p = e.properties) ? void 0 : p.metastring) || \"\";\n          e.properties.className ? \"boolean\" == typeof e.properties.className ? e.properties.className = [] : Array.isArray(e.properties.className) || (e.properties.className = [e.properties.className]) : e.properties.className = [];\n          var m,\n            h,\n            d = function (e) {\n              for (var r, t = u(e.properties.className); !(r = t()).done;) {\n                var n = r.value;\n                if (\"language-\" === n.slice(0, 9)) return n.slice(9).toLowerCase();\n              }\n              return null;\n            }(e);\n          if (!d && o.defaultLanguage && e.properties.className.push(\"language-\" + (d = o.defaultLanguage)), e.properties.className.push(\"code-highlight\"), d) try {\n            var g, v;\n            v = null != (g = d) && g.includes(\"diff-\") ? d.split(\"-\")[1] : d, m = i.highlight(r(e), v), s.properties.className = (s.properties.className || []).concat(\"language-\" + v);\n          } catch (r) {\n            if (!o.ignoreMissing || !/Unknown language/.test(r.message)) throw r;\n            m = e;\n          } else m = e;\n          m.children = (h = 1, function e(r) {\n            return r.reduce(function (r, t) {\n              if (\"text\" === t.type) {\n                var n = t.value,\n                  i = (n.match(/\\n/g) || \"\").length;\n                if (0 === i) t.position = {\n                  start: {\n                    line: h,\n                    column: 1\n                  },\n                  end: {\n                    line: h,\n                    column: 1\n                  }\n                }, r.push(t);else for (var o, a = n.split(\"\\n\"), l = u(a.entries()); !(o = l()).done;) {\n                  var s = o.value,\n                    c = s[0],\n                    p = s[1];\n                  r.push({\n                    type: \"text\",\n                    value: c === a.length - 1 ? p : p + \"\\n\",\n                    position: {\n                      start: {\n                        line: h + c,\n                        column: 1\n                      },\n                      end: {\n                        line: h + c,\n                        column: 1\n                      }\n                    }\n                  });\n                }\n                return h += i, r;\n              }\n              if (Object.prototype.hasOwnProperty.call(t, \"children\")) {\n                var f = h;\n                return t.children = e(t.children), r.push(t), t.position = {\n                  start: {\n                    line: f,\n                    column: 1\n                  },\n                  end: {\n                    line: h,\n                    column: 1\n                  }\n                }, r;\n              }\n              return r.push(t), r;\n            }, []);\n          })(m.children), m.position = m.children.length > 0 ? {\n            start: {\n              line: m.children[0].position.start.line,\n              column: 0\n            },\n            end: {\n              line: m.children[m.children.length - 1].position.end.line,\n              column: 0\n            }\n          } : {\n            start: {\n              line: 0,\n              column: 0\n            },\n            end: {\n              line: 0,\n              column: 0\n            }\n          };\n          for (var y, b = function (e) {\n              var r = /{([\\d,-]+)}/,\n                t = e.split(\",\").map(function (e) {\n                  return e.trim();\n                }).join();\n              if (r.test(t)) {\n                var i = r.exec(t)[1],\n                  o = n(i);\n                return function (e) {\n                  return o.includes(e + 1);\n                };\n              }\n              return function () {\n                return !1;\n              };\n            }(f), w = function (e) {\n              var r = /*#__PURE__*/a(/showLineNumbers=(\\d+)/i, {\n                lines: 1\n              });\n              if (r.test(e)) {\n                var t = r.exec(e);\n                return Number(t.groups.lines);\n              }\n              return 1;\n            }(f), N = function (e) {\n              for (var r = new Array(e), t = 0; t < e; t++) r[t] = {\n                type: \"element\",\n                tagName: \"span\",\n                properties: {\n                  className: []\n                },\n                children: []\n              };\n              return r;\n            }(m.position.end.line), j = [\"showlinenumbers=false\", 'showlinenumbers=\"false\"', \"showlinenumbers={false}\"], x = function () {\n              var e,\n                n,\n                i = y.value,\n                a = i[0],\n                l = i[1];\n              l.properties.className = [\"code-line\"];\n              var s = t(m, function (e) {\n                return e.position.start.line <= a + 1 && e.position.end.line >= a + 1;\n              });\n              l.children = s.children, !f.toLowerCase().includes(\"showLineNumbers\".toLowerCase()) && !o.showLineNumbers || j.some(function (e) {\n                return f.toLowerCase().includes(e);\n              }) || (l.properties.line = [(a + w).toString()], l.properties.className.push(\"line-number\")), b(a) && l.properties.className.push(\"highlight-line\"), (\"diff\" === d || null != (e = d) && e.includes(\"diff-\")) && \"-\" === r(l).substring(0, 1) ? l.properties.className.push(\"deleted\") : (\"diff\" === d || null != (n = d) && n.includes(\"diff-\")) && \"+\" === r(l).substring(0, 1) && l.properties.className.push(\"inserted\");\n            }, O = u(N.entries()); !(y = O()).done;) x();\n          N.length > 0 && \"\" === r(N[N.length - 1]).trim() && N.pop(), e.children = N;\n        }\n      }\n    };\n  },\n  p = c(i),\n  f = c(o);\nexport { f as default, p as rehypePrismCommon, c as rehypePrismGenerator };","map":{"version":3,"names":["c","rehypePrismGenerator","i","o","e","r","registered","Error","defaultLanguage","l","s","p","tagName","f","data","meta","properties","metastring","className","Array","isArray","m","h","d","t","u","done","n","value","slice","toLowerCase","push","g","v","includes","split","highlight","concat","ignoreMissing","test","message","children","reduce","type","match","length","position","start","line","column","end","a","entries","Object","prototype","hasOwnProperty","call","y","b","map","trim","join","exec","w","lines","Number","groups","N","j","x","showLineNumbers","some","toString","substring","O","pop","default","rehypePrismCommon"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/rehype-prism-plus/src/generator.js","/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/rehype-prism-plus/src/common.js","/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/rehype-prism-plus/src/all.js"],"sourcesContent":["/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Root} Root\n * @typedef Options options\n *   Configuration.\n * @property {boolean} [showLineNumbers]\n *   Set `showLineNumbers` to `true` to always display line number\n * @property {boolean} [ignoreMissing]\n *   Set `ignoreMissing` to `true` to ignore unsupported languages and line highlighting when no language is specified\n * @property {string} [defaultLanguage]\n *   Uses the specified language as the default if none is specified. Takes precedence over `ignoreMissing`.\n *   Note: The language must be registered with refractor.\n */\n\nimport { visit } from 'unist-util-visit'\nimport { toString } from 'hast-util-to-string'\nimport { filter } from 'unist-util-filter'\nimport rangeParser from 'parse-numeric-range'\n\nconst getLanguage = (node) => {\n  const className = node.properties.className\n  //@ts-ignore\n  for (const classListItem of className) {\n    if (classListItem.slice(0, 9) === 'language-') {\n      return classListItem.slice(9).toLowerCase()\n    }\n  }\n  return null\n}\n\n/**\n * @param {import('refractor/lib/core').Refractor} refractor\n * @param {string} defaultLanguage\n * @return {void}\n */\nconst checkIfLanguageIsRegistered = (refractor, defaultLanguage) => {\n  if (defaultLanguage && !refractor.registered(defaultLanguage)) {\n    throw new Error(`The default language \"${defaultLanguage}\" is not registered with refractor.`)\n  }\n}\n\n/**\n * Create a closure that determines if we have to highlight the given index\n *\n * @param {string} meta\n * @return { (index:number) => boolean }\n */\nconst calculateLinesToHighlight = (meta) => {\n  const RE = /{([\\d,-]+)}/\n  // Remove space between {} e.g. {1, 3}\n  const parsedMeta = meta\n    .split(',')\n    .map((str) => str.trim())\n    .join()\n  if (RE.test(parsedMeta)) {\n    const strlineNumbers = RE.exec(parsedMeta)[1]\n    const lineNumbers = rangeParser(strlineNumbers)\n    return (index) => lineNumbers.includes(index + 1)\n  } else {\n    return () => false\n  }\n}\n\n/**\n * Check if we want to start the line numbering from a given number or 1\n * showLineNumbers=5, will start the numbering from 5\n * @param {string} meta\n * @returns {number}\n */\nconst calculateStartingLine = (meta) => {\n  const RE = /showLineNumbers=(?<lines>\\d+)/i\n  // pick the line number after = using a named capturing group\n  if (RE.test(meta)) {\n    const {\n      groups: { lines },\n    } = RE.exec(meta)\n    return Number(lines)\n  }\n  return 1\n}\n\n/**\n * Create container AST for node lines\n *\n * @param {number} number\n * @return {Element[]}\n */\nconst createLineNodes = (number) => {\n  const a = new Array(number)\n  for (let i = 0; i < number; i++) {\n    a[i] = {\n      type: 'element',\n      tagName: 'span',\n      properties: { className: [] },\n      children: [],\n    }\n  }\n  return a\n}\n\n/**\n * Split multiline text nodes into individual nodes with positioning\n * Add a node start and end line position information for each text node\n *\n * @return { (ast:Element['children']) => Element['children'] }\n *\n */\nconst addNodePositionClosure = () => {\n  let startLineNum = 1\n  /**\n   * @param {Element['children']} ast\n   * @return {Element['children']}\n   */\n  const addNodePosition = (ast) => {\n    return ast.reduce((result, node) => {\n      if (node.type === 'text') {\n        const value = /** @type {string} */ (node.value)\n        const numLines = (value.match(/\\n/g) || '').length\n        if (numLines === 0) {\n          node.position = {\n            // column: 1 is needed to avoid error with @next/mdx\n            // https://github.com/timlrx/rehype-prism-plus/issues/44\n            start: { line: startLineNum, column: 1 },\n            end: { line: startLineNum, column: 1 },\n          }\n          result.push(node)\n        } else {\n          const lines = value.split('\\n')\n          for (const [i, line] of lines.entries()) {\n            result.push({\n              type: 'text',\n              value: i === lines.length - 1 ? line : line + '\\n',\n              position: {\n                start: { line: startLineNum + i, column: 1 },\n                end: { line: startLineNum + i, column: 1 },\n              },\n            })\n          }\n        }\n        startLineNum = startLineNum + numLines\n\n        return result\n      }\n\n      if (Object.prototype.hasOwnProperty.call(node, 'children')) {\n        const initialLineNum = startLineNum\n        // @ts-ignore\n        node.children = addNodePosition(node.children, startLineNum)\n        result.push(node)\n        node.position = {\n          start: { line: initialLineNum, column: 1 },\n          end: { line: startLineNum, column: 1 },\n        }\n        return result\n      }\n\n      result.push(node)\n      return result\n    }, [])\n  }\n  return addNodePosition\n}\n\n/**\n * Rehype prism plugin generator that highlights code blocks with refractor (prismjs)\n *\n * Pass in your own refractor object with the required languages registered:\n * https://github.com/wooorm/refractor#refractorregistersyntax\n *\n * @param {import('refractor/lib/core').Refractor} refractor\n * @return {import('unified').Plugin<[Options?], Root>}\n */\nconst rehypePrismGenerator = (refractor) => {\n  return (options = {}) => {\n    checkIfLanguageIsRegistered(refractor, options.defaultLanguage)\n    return (tree) => {\n      visit(tree, 'element', visitor)\n    }\n\n    /**\n     * @param {Element} node\n     * @param {number} index\n     * @param {Element} parent\n     */\n    function visitor(node, index, parent) {\n      if (!parent || parent.tagName !== 'pre' || node.tagName !== 'code') {\n        return\n      }\n\n      let meta = /** @type {string} */ (node?.data?.meta || node?.properties?.metastring || '')\n      // Coerce className to array\n      if (node.properties.className) {\n        if (typeof node.properties.className === 'boolean') {\n          node.properties.className = []\n        } else if (!Array.isArray(node.properties.className)) {\n          node.properties.className = [node.properties.className]\n        }\n      } else {\n        node.properties.className = []\n      }\n\n      let lang = getLanguage(node)\n      // If no language is set on the code block, use defaultLanguage if specified\n      if (!lang && options.defaultLanguage) {\n        lang = options.defaultLanguage\n        node.properties.className.push(`language-${lang}`)\n      }\n      node.properties.className.push('code-highlight')\n\n      /** @type {Element} */\n      let refractorRoot\n\n      // Syntax highlight\n      if (lang) {\n        try {\n          let rootLang\n          if (lang?.includes('diff-')) {\n            rootLang = lang.split('-')[1]\n          } else {\n            rootLang = lang\n          }\n          // @ts-ignore\n          refractorRoot = refractor.highlight(toString(node), rootLang)\n          // @ts-ignore className is already an array\n          parent.properties.className = (parent.properties.className || []).concat(\n            'language-' + rootLang\n          )\n        } catch (err) {\n          if (options.ignoreMissing && /Unknown language/.test(err.message)) {\n            refractorRoot = node\n          } else {\n            throw err\n          }\n        }\n      } else {\n        refractorRoot = node\n      }\n\n      refractorRoot.children = addNodePositionClosure()(refractorRoot.children)\n\n      // Add position info to root\n      if (refractorRoot.children.length > 0) {\n        refractorRoot.position = {\n          start: { line: refractorRoot.children[0].position.start.line, column: 0 },\n          end: {\n            line: refractorRoot.children[refractorRoot.children.length - 1].position.end.line,\n            column: 0,\n          },\n        }\n      } else {\n        refractorRoot.position = {\n          start: { line: 0, column: 0 },\n          end: { line: 0, column: 0 },\n        }\n      }\n\n      const shouldHighlightLine = calculateLinesToHighlight(meta)\n      const startingLineNumber = calculateStartingLine(meta)\n      const codeLineArray = createLineNodes(refractorRoot.position.end.line)\n\n      const falseShowLineNumbersStr = [\n        'showlinenumbers=false',\n        'showlinenumbers=\"false\"',\n        'showlinenumbers={false}',\n      ]\n      for (const [i, line] of codeLineArray.entries()) {\n        // Default class name for each line\n        line.properties.className = ['code-line']\n\n        // Syntax highlight\n        const treeExtract = filter(\n          refractorRoot,\n          (node) => node.position.start.line <= i + 1 && node.position.end.line >= i + 1\n        )\n        line.children = treeExtract.children\n\n        // Line number\n        if (\n          (meta.toLowerCase().includes('showLineNumbers'.toLowerCase()) ||\n            options.showLineNumbers) &&\n          !falseShowLineNumbersStr.some((str) => meta.toLowerCase().includes(str))\n        ) {\n          line.properties.line = [(i + startingLineNumber).toString()]\n          line.properties.className.push('line-number')\n        }\n\n        // Line highlight\n        if (shouldHighlightLine(i)) {\n          line.properties.className.push('highlight-line')\n        }\n\n        // Diff classes\n        if (\n          (lang === 'diff' || lang?.includes('diff-')) &&\n          toString(line).substring(0, 1) === '-'\n        ) {\n          line.properties.className.push('deleted')\n        } else if (\n          (lang === 'diff' || lang?.includes('diff-')) &&\n          toString(line).substring(0, 1) === '+'\n        ) {\n          line.properties.className.push('inserted')\n        }\n      }\n\n      // Remove possible trailing line when splitting by \\n which results in empty array\n      if (\n        codeLineArray.length > 0 &&\n        toString(codeLineArray[codeLineArray.length - 1]).trim() === ''\n      ) {\n        codeLineArray.pop()\n      }\n\n      node.children = codeLineArray\n    }\n  }\n}\n\nexport default rehypePrismGenerator\n","import { refractor as refractorCommon } from 'refractor/lib/common.js'\nimport rehypePrismGenerator from './generator.js'\n\n/**\n * Rehype prism plugin that highlights code blocks with refractor (prismjs)\n * Supported languages: https://github.com/wooorm/refractor#data\n *\n * Consider using rehypePrismGenerator to generate a plugin\n * that supports your required languages.\n */\nconst rehypePrismCommon = rehypePrismGenerator(refractorCommon)\n\nexport default rehypePrismCommon\n","import { refractor as refractorAll } from 'refractor/lib/all.js'\nimport rehypePrismGenerator from './generator.js'\n\n/**\n * Rehype prism plugin that highlights code blocks with refractor (prismjs)\n * This supports all the languages and should be used on the server side.\n *\n * Consider using rehypePrismCommon or rehypePrismGenerator to generate a plugin\n * that supports your required languages.\n */\nconst rehypePrismAll = rehypePrismGenerator(refractorAll)\n\nexport default rehypePrismAll\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}