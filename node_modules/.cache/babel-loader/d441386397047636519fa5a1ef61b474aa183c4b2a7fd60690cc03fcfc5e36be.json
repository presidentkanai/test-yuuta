{"ast":null,"code":"/**\n * Enables or disables the automatic mining of new blocks with each new transaction submitted to the network.\n *\n * - Docs: https://viem.sh/docs/actions/test/setAutomine.html\n *\n * @param client - Client to use\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { setAutomine } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await setAutomine(client)\n */\nexport async function setAutomine(client, enabled) {\n  if (client.mode === 'ganache') {\n    if (enabled) await client.request({\n      method: 'miner_start'\n    });else await client.request({\n      method: 'miner_stop'\n    });\n  } else await client.request({\n    method: 'evm_setAutomine',\n    params: [enabled]\n  });\n}","map":{"version":3,"names":["setAutomine","client","enabled","mode","request","method","params"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/actions/test/setAutomine.ts"],"sourcesContent":["import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\n\n/**\n * Enables or disables the automatic mining of new blocks with each new transaction submitted to the network.\n *\n * - Docs: https://viem.sh/docs/actions/test/setAutomine.html\n *\n * @param client - Client to use\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { setAutomine } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await setAutomine(client)\n */\nexport async function setAutomine<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  enabled: boolean,\n) {\n  if (client.mode === 'ganache') {\n    if (enabled) await client.request({ method: 'miner_start' })\n    else await client.request({ method: 'miner_stop' })\n  } else\n    await client.request({\n      method: 'evm_setAutomine',\n      params: [enabled],\n    })\n}\n"],"mappings":"AAQA;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,eAAeA,WAAWA,CAI/BC,MAAsE,EACtEC,OAAgB;EAEhB,IAAID,MAAM,CAACE,IAAI,KAAK,SAAS,EAAE;IAC7B,IAAID,OAAO,EAAE,MAAMD,MAAM,CAACG,OAAO,CAAC;MAAEC,MAAM,EAAE;IAAa,CAAE,CAAC,MACvD,MAAMJ,MAAM,CAACG,OAAO,CAAC;MAAEC,MAAM,EAAE;IAAY,CAAE,CAAC;GACpD,MACC,MAAMJ,MAAM,CAACG,OAAO,CAAC;IACnBC,MAAM,EAAE,iBAAiB;IACzBC,MAAM,EAAE,CAACJ,OAAO;GACjB,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}