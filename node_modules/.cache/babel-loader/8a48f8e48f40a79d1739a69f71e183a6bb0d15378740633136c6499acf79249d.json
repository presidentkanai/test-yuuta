{"ast":null,"code":"import { hashMessage } from '../../utils/index.js';\nimport { verifyHash } from './verifyHash.js';\n/**\n * Verify that a message was signed by the provided address.\n *\n * Compatible with Smart Contract Accounts & Externally Owned Accounts via [ERC-6492](https://eips.ethereum.org/EIPS/eip-6492).\n *\n * - Docs {@link https://viem.sh/docs/actions/public/verifyMessage.html}\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyMessageParameters}\n * @returns Whether or not the signature is valid. {@link VerifyMessageReturnType}\n */\nexport async function verifyMessage(client, _ref) {\n  let {\n    address,\n    message,\n    signature,\n    ...callRequest\n  } = _ref;\n  const hash = hashMessage(message);\n  return verifyHash(client, {\n    address,\n    hash,\n    signature,\n    ...callRequest\n  });\n}","map":{"version":3,"names":["hashMessage","verifyHash","verifyMessage","client","_ref","address","message","signature","callRequest","hash"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/actions/public/verifyMessage.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { ByteArray, Hex, SignableMessage } from '../../types/misc.js'\nimport { hashMessage } from '../../utils/index.js'\nimport { type VerifyHashParameters, verifyHash } from './verifyHash.js'\n\nexport type VerifyMessageParameters = Omit<VerifyHashParameters, 'hash'> & {\n  /** The address that signed the original message. */\n  address: Address\n  /** The message to be verified. */\n  message: SignableMessage\n  /** The signature that was generated by signing the message with the address's private key. */\n  signature: Hex | ByteArray\n}\n\nexport type VerifyMessageReturnType = boolean\n\n/**\n * Verify that a message was signed by the provided address.\n *\n * Compatible with Smart Contract Accounts & Externally Owned Accounts via [ERC-6492](https://eips.ethereum.org/EIPS/eip-6492).\n *\n * - Docs {@link https://viem.sh/docs/actions/public/verifyMessage.html}\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyMessageParameters}\n * @returns Whether or not the signature is valid. {@link VerifyMessageReturnType}\n */\nexport async function verifyMessage<TChain extends Chain | undefined,>(\n  client: Client<Transport, TChain>,\n  { address, message, signature, ...callRequest }: VerifyMessageParameters,\n): Promise<VerifyMessageReturnType> {\n  const hash = hashMessage(message)\n  return verifyHash(client, {\n    address,\n    hash,\n    signature,\n    ...callRequest,\n  })\n}\n"],"mappings":"AAMA,SAASA,WAAW,QAAQ,sBAAsB;AAClD,SAAoCC,UAAU,QAAQ,iBAAiB;AAavE;;;;;;;;;;;AAWA,OAAO,eAAeC,aAAaA,CACjCC,MAAiC,EAAAC,IAAA,EACuC;EAAA,IAAxE;IAAEC,OAAO;IAAEC,OAAO;IAAEC,SAAS;IAAE,GAAGC;EAAW,CAA2B,GAAAJ,IAAA;EAExE,MAAMK,IAAI,GAAGT,WAAW,CAACM,OAAO,CAAC;EACjC,OAAOL,UAAU,CAACE,MAAM,EAAE;IACxBE,OAAO;IACPI,IAAI;IACJF,SAAS;IACT,GAAGC;GACJ,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}