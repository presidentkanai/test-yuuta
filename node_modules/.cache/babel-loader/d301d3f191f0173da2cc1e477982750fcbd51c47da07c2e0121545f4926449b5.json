{"ast":null,"code":"import { TransactionReceiptNotFoundError } from '../../errors/transaction.js';\nimport { formatTransactionReceipt } from '../../utils/formatters/transactionReceipt.js';\n/**\n * Returns the [Transaction Receipt](https://viem.sh/docs/glossary/terms.html#transaction-receipt) given a [Transaction](https://viem.sh/docs/glossary/terms.html#transaction) hash.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransactionReceipt.html\n * - Example: https://stackblitz.com/github/wagmi-dev/viem/tree/main/examples/transactions/fetching-transactions\n * - JSON-RPC Methods: [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionreceipt)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionReceiptParameters}\n * @returns The transaction receipt. {@link GetTransactionReceiptReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransactionReceipt } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const transactionReceipt = await getTransactionReceipt(client, {\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n * })\n */\nexport async function getTransactionReceipt(client, _ref) {\n  var _client$chain;\n  let {\n    hash\n  } = _ref;\n  const receipt = await client.request({\n    method: 'eth_getTransactionReceipt',\n    params: [hash]\n  });\n  if (!receipt) throw new TransactionReceiptNotFoundError({\n    hash\n  });\n  const format = ((_client$chain = client.chain) === null || _client$chain === void 0 || (_client$chain = _client$chain.formatters) === null || _client$chain === void 0 || (_client$chain = _client$chain.transactionReceipt) === null || _client$chain === void 0 ? void 0 : _client$chain.format) || formatTransactionReceipt;\n  return format(receipt);\n}","map":{"version":3,"names":["TransactionReceiptNotFoundError","formatTransactionReceipt","getTransactionReceipt","client","_ref","_client$chain","hash","receipt","request","method","params","format","chain","formatters","transactionReceipt"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/actions/public/getTransactionReceipt.ts"],"sourcesContent":["import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { TransactionReceiptNotFoundError } from '../../errors/transaction.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport {\n  type FormattedTransactionReceipt,\n  formatTransactionReceipt,\n} from '../../utils/formatters/transactionReceipt.js'\n\nexport type GetTransactionReceiptParameters = {\n  /** The hash of the transaction. */\n  hash: Hash\n}\n\nexport type GetTransactionReceiptReturnType<\n  TChain extends Chain | undefined = Chain | undefined,\n> = FormattedTransactionReceipt<TChain>\n\n/**\n * Returns the [Transaction Receipt](https://viem.sh/docs/glossary/terms.html#transaction-receipt) given a [Transaction](https://viem.sh/docs/glossary/terms.html#transaction) hash.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransactionReceipt.html\n * - Example: https://stackblitz.com/github/wagmi-dev/viem/tree/main/examples/transactions/fetching-transactions\n * - JSON-RPC Methods: [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionreceipt)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionReceiptParameters}\n * @returns The transaction receipt. {@link GetTransactionReceiptReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransactionReceipt } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const transactionReceipt = await getTransactionReceipt(client, {\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n * })\n */\nexport async function getTransactionReceipt<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  { hash }: GetTransactionReceiptParameters,\n) {\n  const receipt = await client.request({\n    method: 'eth_getTransactionReceipt',\n    params: [hash],\n  })\n\n  if (!receipt) throw new TransactionReceiptNotFoundError({ hash })\n\n  const format =\n    client.chain?.formatters?.transactionReceipt?.format ||\n    formatTransactionReceipt\n  return format(receipt) as GetTransactionReceiptReturnType<TChain>\n}\n"],"mappings":"AAEA,SAASA,+BAA+B,QAAQ,6BAA6B;AAG7E,SAEEC,wBAAwB,QACnB,8CAA8C;AAWrD;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,OAAO,eAAeC,qBAAqBA,CACzCC,MAAiC,EAAAC,IAAA,EACQ;EAAA,IAAAC,aAAA;EAAA,IAAzC;IAAEC;EAAI,CAAmC,GAAAF,IAAA;EAEzC,MAAMG,OAAO,GAAG,MAAMJ,MAAM,CAACK,OAAO,CAAC;IACnCC,MAAM,EAAE,2BAA2B;IACnCC,MAAM,EAAE,CAACJ,IAAI;GACd,CAAC;EAEF,IAAI,CAACC,OAAO,EAAE,MAAM,IAAIP,+BAA+B,CAAC;IAAEM;EAAI,CAAE,CAAC;EAEjE,MAAMK,MAAM,GACV,EAAAN,aAAA,GAAAF,MAAM,CAACS,KAAK,cAAAP,aAAA,gBAAAA,aAAA,GAAZA,aAAA,CAAcQ,UAAU,cAAAR,aAAA,gBAAAA,aAAA,GAAxBA,aAAA,CAA0BS,kBAAkB,cAAAT,aAAA,uBAA5CA,aAAA,CAA8CM,MAAM,KACpDV,wBAAwB;EAC1B,OAAOU,MAAM,CAACJ,OAAO,CAA4C;AACnE"},"metadata":{},"sourceType":"module","externalDependencies":[]}