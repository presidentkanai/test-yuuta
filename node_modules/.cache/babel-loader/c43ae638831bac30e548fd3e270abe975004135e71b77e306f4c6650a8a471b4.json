{"ast":null,"code":"import { BaseFeeScalarError, Eip1559FeesNotSupportedError } from '../../errors/fee.js';\nimport { internal_estimateMaxPriorityFeePerGas } from './estimateMaxPriorityFeePerGas.js';\nimport { getBlock } from './getBlock.js';\nimport { getGasPrice } from './getGasPrice.js';\n/**\n * Returns an estimate for the fees per gas (in wei) for a\n * transaction to be likely included in the next block.\n * Defaults to [`chain.fees.estimateFeesPerGas`](/docs/clients/chains.html#fees-estimatefeespergas) if set.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateFeesPerGas.html\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateFeesPerGasParameters}\n * @returns An estimate (in wei) for the fees per gas. {@link EstimateFeesPerGasReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateFeesPerGas } from 'viem/actions'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const maxPriorityFeePerGas = await estimateFeesPerGas(client)\n * // { maxFeePerGas: ..., maxPriorityFeePerGas: ... }\n */\nexport async function estimateFeesPerGas(client, args) {\n  return internal_estimateFeesPerGas(client, args);\n}\nexport async function internal_estimateFeesPerGas(client, args) {\n  var _baseFeeMultiplier$to, _baseFeeMultiplier$to2, _chain$fees3, _request$gasPrice;\n  const {\n    block: block_,\n    chain = client.chain,\n    request,\n    type = 'eip1559'\n  } = args || {};\n  const baseFeeMultiplier = await (async (_chain$fees, _chain$fees$baseFeeMu, _chain$fees2) => {\n    if (typeof (chain === null || chain === void 0 || (_chain$fees = chain.fees) === null || _chain$fees === void 0 ? void 0 : _chain$fees.baseFeeMultiplier) === 'function') return chain.fees.baseFeeMultiplier({\n      block: block_,\n      client,\n      request\n    });\n    return (_chain$fees$baseFeeMu = chain === null || chain === void 0 || (_chain$fees2 = chain.fees) === null || _chain$fees2 === void 0 ? void 0 : _chain$fees2.baseFeeMultiplier) !== null && _chain$fees$baseFeeMu !== void 0 ? _chain$fees$baseFeeMu : 1.2;\n  })();\n  if (baseFeeMultiplier < 1) throw new BaseFeeScalarError();\n  const decimals = (_baseFeeMultiplier$to = (_baseFeeMultiplier$to2 = baseFeeMultiplier.toString().split('.')[1]) === null || _baseFeeMultiplier$to2 === void 0 ? void 0 : _baseFeeMultiplier$to2.length) !== null && _baseFeeMultiplier$to !== void 0 ? _baseFeeMultiplier$to : 0;\n  const denominator = 10 ** decimals;\n  const multiply = base => base * BigInt(Math.ceil(baseFeeMultiplier * denominator)) / BigInt(denominator);\n  const block = block_ ? block_ : await getBlock(client);\n  if (typeof (chain === null || chain === void 0 || (_chain$fees3 = chain.fees) === null || _chain$fees3 === void 0 ? void 0 : _chain$fees3.estimateFeesPerGas) === 'function') return chain.fees.estimateFeesPerGas({\n    block: block_,\n    client,\n    multiply,\n    request,\n    type\n  });\n  if (type === 'eip1559') {\n    var _request$maxFeePerGas;\n    if (typeof block.baseFeePerGas !== 'bigint') throw new Eip1559FeesNotSupportedError();\n    const maxPriorityFeePerGas = request !== null && request !== void 0 && request.maxPriorityFeePerGas ? request.maxPriorityFeePerGas : await internal_estimateMaxPriorityFeePerGas(client, {\n      block,\n      chain,\n      request\n    });\n    const baseFeePerGas = multiply(block.baseFeePerGas);\n    const maxFeePerGas = (_request$maxFeePerGas = request === null || request === void 0 ? void 0 : request.maxFeePerGas) !== null && _request$maxFeePerGas !== void 0 ? _request$maxFeePerGas : baseFeePerGas + maxPriorityFeePerGas;\n    return {\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    };\n  }\n  const gasPrice = (_request$gasPrice = request === null || request === void 0 ? void 0 : request.gasPrice) !== null && _request$gasPrice !== void 0 ? _request$gasPrice : multiply(await getGasPrice(client));\n  return {\n    gasPrice\n  };\n}","map":{"version":3,"names":["BaseFeeScalarError","Eip1559FeesNotSupportedError","internal_estimateMaxPriorityFeePerGas","getBlock","getGasPrice","estimateFeesPerGas","client","args","internal_estimateFeesPerGas","_baseFeeMultiplier$to","_baseFeeMultiplier$to2","_chain$fees3","_request$gasPrice","block","block_","chain","request","type","baseFeeMultiplier","_chain$fees","_chain$fees$baseFeeMu","_chain$fees2","fees","decimals","toString","split","length","denominator","multiply","base","BigInt","Math","ceil","_request$maxFeePerGas","baseFeePerGas","maxPriorityFeePerGas","maxFeePerGas","gasPrice"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/actions/public/estimateFeesPerGas.ts"],"sourcesContent":["import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  BaseFeeScalarError,\n  Eip1559FeesNotSupportedError,\n} from '../../errors/fee.js'\nimport type { Block } from '../../types/block.js'\nimport type {\n  Chain,\n  ChainEstimateFeesPerGasFnParameters,\n  ChainFeesFnParameters,\n} from '../../types/chain.js'\nimport type { GetChain } from '../../types/chain.js'\nimport type {\n  FeeValuesEIP1559,\n  FeeValuesLegacy,\n  FeeValuesType,\n} from '../../types/fee.js'\nimport type { PrepareTransactionRequestParameters } from '../wallet/prepareTransactionRequest.js'\nimport { internal_estimateMaxPriorityFeePerGas } from './estimateMaxPriorityFeePerGas.js'\nimport { getBlock } from './getBlock.js'\nimport { getGasPrice } from './getGasPrice.js'\n\nexport type EstimateFeesPerGasParameters<\n  chain extends Chain | undefined = Chain | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  type extends FeeValuesType = FeeValuesType,\n> = {\n  /**\n   * The type of fee values to return.\n   *\n   * - `legacy`: Returns the legacy gas price.\n   * - `eip1559`: Returns the max fee per gas and max priority fee per gas.\n   *\n   * @default 'eip1559'\n   */\n  type?: type | FeeValuesType\n} & GetChain<chain, chainOverride>\n\nexport type EstimateFeesPerGasReturnType<\n  type extends FeeValuesType = FeeValuesType,\n> =\n  | (type extends 'legacy' ? FeeValuesLegacy : never)\n  | (type extends 'eip1559' ? FeeValuesEIP1559 : never)\n\n/**\n * Returns an estimate for the fees per gas (in wei) for a\n * transaction to be likely included in the next block.\n * Defaults to [`chain.fees.estimateFeesPerGas`](/docs/clients/chains.html#fees-estimatefeespergas) if set.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateFeesPerGas.html\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateFeesPerGasParameters}\n * @returns An estimate (in wei) for the fees per gas. {@link EstimateFeesPerGasReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateFeesPerGas } from 'viem/actions'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const maxPriorityFeePerGas = await estimateFeesPerGas(client)\n * // { maxFeePerGas: ..., maxPriorityFeePerGas: ... }\n */\nexport async function estimateFeesPerGas<\n  chain extends Chain | undefined,\n  chainOverride extends Chain | undefined,\n  type extends FeeValuesType = 'eip1559',\n>(\n  client: Client<Transport, chain>,\n  args?: EstimateFeesPerGasParameters<chain, chainOverride, type>,\n): Promise<EstimateFeesPerGasReturnType<type>> {\n  return internal_estimateFeesPerGas(client, args as any)\n}\n\nexport async function internal_estimateFeesPerGas<\n  chain extends Chain | undefined,\n  chainOverride extends Chain | undefined,\n  type extends FeeValuesType = 'eip1559',\n>(\n  client: Client<Transport, chain>,\n  args: EstimateFeesPerGasParameters<chain, chainOverride, type> & {\n    block?: Block\n    request?: PrepareTransactionRequestParameters\n  },\n): Promise<EstimateFeesPerGasReturnType<type>> {\n  const {\n    block: block_,\n    chain = client.chain,\n    request,\n    type = 'eip1559',\n  } = args || {}\n\n  const baseFeeMultiplier = await (async () => {\n    if (typeof chain?.fees?.baseFeeMultiplier === 'function')\n      return chain.fees.baseFeeMultiplier({\n        block: block_ as Block,\n        client,\n        request,\n      } as ChainFeesFnParameters)\n    return chain?.fees?.baseFeeMultiplier ?? 1.2\n  })()\n  if (baseFeeMultiplier < 1) throw new BaseFeeScalarError()\n\n  const decimals = baseFeeMultiplier.toString().split('.')[1]?.length ?? 0\n  const denominator = 10 ** decimals\n  const multiply = (base: bigint) =>\n    (base * BigInt(Math.ceil(baseFeeMultiplier * denominator))) /\n    BigInt(denominator)\n\n  const block = block_ ? block_ : await getBlock(client)\n\n  if (typeof chain?.fees?.estimateFeesPerGas === 'function')\n    return chain.fees.estimateFeesPerGas({\n      block: block_ as Block,\n      client,\n      multiply,\n      request,\n      type,\n    } as ChainEstimateFeesPerGasFnParameters) as unknown as EstimateFeesPerGasReturnType<type>\n\n  if (type === 'eip1559') {\n    if (typeof block.baseFeePerGas !== 'bigint')\n      throw new Eip1559FeesNotSupportedError()\n\n    const maxPriorityFeePerGas = request?.maxPriorityFeePerGas\n      ? request.maxPriorityFeePerGas\n      : await internal_estimateMaxPriorityFeePerGas(\n          client as Client<Transport, Chain>,\n          {\n            block,\n            chain,\n            request,\n          },\n        )\n\n    const baseFeePerGas = multiply(block.baseFeePerGas)\n    const maxFeePerGas =\n      request?.maxFeePerGas ?? baseFeePerGas + maxPriorityFeePerGas\n\n    return {\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n    } as EstimateFeesPerGasReturnType<type>\n  }\n\n  const gasPrice = request?.gasPrice ?? multiply(await getGasPrice(client))\n  return {\n    gasPrice,\n  } as EstimateFeesPerGasReturnType<type>\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}