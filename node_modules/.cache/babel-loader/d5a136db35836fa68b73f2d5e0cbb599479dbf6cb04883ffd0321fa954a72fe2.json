{"ast":null,"code":"import { InvalidSerializedTransactionTypeError } from '../../errors/transaction.js';\nimport { sliceHex } from '../data/slice.js';\nimport { hexToNumber } from '../encoding/fromHex.js';\nexport function getSerializedTransactionType(serializedTransaction) {\n  const serializedType = sliceHex(serializedTransaction, 0, 1);\n  if (serializedType === '0x02') return 'eip1559';\n  if (serializedType === '0x01') return 'eip2930';\n  if (serializedType !== '0x' && hexToNumber(serializedType) >= 0xc0) return 'legacy';\n  throw new InvalidSerializedTransactionTypeError({\n    serializedType\n  });\n}","map":{"version":3,"names":["InvalidSerializedTransactionTypeError","sliceHex","hexToNumber","getSerializedTransactionType","serializedTransaction","serializedType"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/utils/transaction/getSerializedTransactionType.ts"],"sourcesContent":["import { InvalidSerializedTransactionTypeError } from '../../errors/transaction.js'\nimport type {\n  TransactionSerialized,\n  TransactionSerializedEIP1559,\n  TransactionSerializedEIP2930,\n} from '../../types/transaction.js'\nimport { sliceHex } from '../data/slice.js'\nimport { hexToNumber } from '../encoding/fromHex.js'\n\nexport type GetSerializedTransactionType<\n  TTransactionSerialized extends TransactionSerialized = TransactionSerialized,\n> = TTransactionSerialized extends TransactionSerializedEIP1559\n  ? 'eip1559'\n  : TTransactionSerialized extends TransactionSerializedEIP2930\n  ? 'eip2930'\n  : 'legacy'\n\nexport function getSerializedTransactionType<\n  TSerialized extends TransactionSerialized,\n>(\n  serializedTransaction: TSerialized,\n): GetSerializedTransactionType<TSerialized> {\n  const serializedType = sliceHex(serializedTransaction, 0, 1)\n\n  if (serializedType === '0x02')\n    return 'eip1559' as GetSerializedTransactionType<TSerialized>\n\n  if (serializedType === '0x01')\n    return 'eip2930' as GetSerializedTransactionType<TSerialized>\n\n  if (serializedType !== '0x' && hexToNumber(serializedType) >= 0xc0)\n    return 'legacy' as GetSerializedTransactionType<TSerialized>\n\n  throw new InvalidSerializedTransactionTypeError({ serializedType })\n}\n"],"mappings":"AAAA,SAASA,qCAAqC,QAAQ,6BAA6B;AAMnF,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,WAAW,QAAQ,wBAAwB;AAUpD,OAAM,SAAUC,4BAA4BA,CAG1CC,qBAAkC;EAElC,MAAMC,cAAc,GAAGJ,QAAQ,CAACG,qBAAqB,EAAE,CAAC,EAAE,CAAC,CAAC;EAE5D,IAAIC,cAAc,KAAK,MAAM,EAC3B,OAAO,SAAsD;EAE/D,IAAIA,cAAc,KAAK,MAAM,EAC3B,OAAO,SAAsD;EAE/D,IAAIA,cAAc,KAAK,IAAI,IAAIH,WAAW,CAACG,cAAc,CAAC,IAAI,IAAI,EAChE,OAAO,QAAqD;EAE9D,MAAM,IAAIL,qCAAqC,CAAC;IAAEK;EAAc,CAAE,CAAC;AACrE"},"metadata":{},"sourceType":"module","externalDependencies":[]}