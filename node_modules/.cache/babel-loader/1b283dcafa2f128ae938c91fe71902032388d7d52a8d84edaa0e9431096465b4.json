{"ast":null,"code":"import React from 'react';\nimport { getBreaksNeededForEmptyLineBefore, getBreaksNeededForEmptyLineAfter, selectWord } from '../utils/markdownUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var quote = {\n  name: 'quote',\n  keyCommand: 'quote',\n  shortcuts: 'ctrlcmd+q',\n  buttonProps: {\n    'aria-label': 'Insert a quote (ctrl + q)',\n    title: 'Insert a quote (ctrl + q)'\n  },\n  icon: /*#__PURE__*/_jsx(\"svg\", {\n    width: \"12\",\n    height: \"12\",\n    viewBox: \"0 0 520 520\",\n    children: /*#__PURE__*/_jsx(\"path\", {\n      fill: \"currentColor\",\n      d: \"M520,95.75 L520,225.75 C520,364.908906 457.127578,437.050625 325.040469,472.443125 C309.577578,476.586875 294.396016,464.889922 294.396016,448.881641 L294.396016,414.457031 C294.396016,404.242891 300.721328,395.025078 310.328125,391.554687 C377.356328,367.342187 414.375,349.711094 414.375,274.5 L341.25,274.5 C314.325781,274.5 292.5,252.674219 292.5,225.75 L292.5,95.75 C292.5,68.8257812 314.325781,47 341.25,47 L471.25,47 C498.174219,47 520,68.8257812 520,95.75 Z M178.75,47 L48.75,47 C21.8257813,47 0,68.8257812 0,95.75 L0,225.75 C0,252.674219 21.8257813,274.5 48.75,274.5 L121.875,274.5 C121.875,349.711094 84.8563281,367.342187 17.828125,391.554687 C8.22132813,395.025078 1.89601563,404.242891 1.89601563,414.457031 L1.89601563,448.881641 C1.89601563,464.889922 17.0775781,476.586875 32.5404687,472.443125 C164.627578,437.050625 227.5,364.908906 227.5,225.75 L227.5,95.75 C227.5,68.8257812 205.674219,47 178.75,47 Z\"\n    })\n  }),\n  execute: (state, api) => {\n    // Adjust the selection to encompass the whole word if the caret is inside one\n    var newSelectionRange = selectWord({\n      text: state.text,\n      selection: state.selection\n    });\n    var state1 = api.setSelectionRange(newSelectionRange);\n    var breaksBeforeCount = getBreaksNeededForEmptyLineBefore(state1.text, state1.selection.start);\n    var breaksBefore = Array(breaksBeforeCount + 1).join('\\n');\n    var breaksAfterCount = getBreaksNeededForEmptyLineAfter(state1.text, state1.selection.end);\n    var breaksAfter = Array(breaksAfterCount + 1).join('\\n');\n\n    // Replaces the current selection with the quote mark up\n    api.replaceSelection(breaksBefore + \"> \" + state1.selectedText + breaksAfter);\n    var selectionStart = state1.selection.start + breaksBeforeCount + 2;\n    var selectionEnd = selectionStart + state1.selectedText.length;\n    api.setSelectionRange({\n      start: selectionStart,\n      end: selectionEnd\n    });\n  }\n};","map":{"version":3,"names":["React","getBreaksNeededForEmptyLineBefore","getBreaksNeededForEmptyLineAfter","selectWord","jsx","_jsx","quote","name","keyCommand","shortcuts","buttonProps","title","icon","width","height","viewBox","children","fill","d","execute","state","api","newSelectionRange","text","selection","state1","setSelectionRange","breaksBeforeCount","start","breaksBefore","Array","join","breaksAfterCount","end","breaksAfter","replaceSelection","selectedText","selectionStart","selectionEnd","length"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/@uiw/react-md-editor/esm/commands/quote.js"],"sourcesContent":["import React from 'react';\nimport { getBreaksNeededForEmptyLineBefore, getBreaksNeededForEmptyLineAfter, selectWord } from '../utils/markdownUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var quote = {\n  name: 'quote',\n  keyCommand: 'quote',\n  shortcuts: 'ctrlcmd+q',\n  buttonProps: {\n    'aria-label': 'Insert a quote (ctrl + q)',\n    title: 'Insert a quote (ctrl + q)'\n  },\n  icon: /*#__PURE__*/_jsx(\"svg\", {\n    width: \"12\",\n    height: \"12\",\n    viewBox: \"0 0 520 520\",\n    children: /*#__PURE__*/_jsx(\"path\", {\n      fill: \"currentColor\",\n      d: \"M520,95.75 L520,225.75 C520,364.908906 457.127578,437.050625 325.040469,472.443125 C309.577578,476.586875 294.396016,464.889922 294.396016,448.881641 L294.396016,414.457031 C294.396016,404.242891 300.721328,395.025078 310.328125,391.554687 C377.356328,367.342187 414.375,349.711094 414.375,274.5 L341.25,274.5 C314.325781,274.5 292.5,252.674219 292.5,225.75 L292.5,95.75 C292.5,68.8257812 314.325781,47 341.25,47 L471.25,47 C498.174219,47 520,68.8257812 520,95.75 Z M178.75,47 L48.75,47 C21.8257813,47 0,68.8257812 0,95.75 L0,225.75 C0,252.674219 21.8257813,274.5 48.75,274.5 L121.875,274.5 C121.875,349.711094 84.8563281,367.342187 17.828125,391.554687 C8.22132813,395.025078 1.89601563,404.242891 1.89601563,414.457031 L1.89601563,448.881641 C1.89601563,464.889922 17.0775781,476.586875 32.5404687,472.443125 C164.627578,437.050625 227.5,364.908906 227.5,225.75 L227.5,95.75 C227.5,68.8257812 205.674219,47 178.75,47 Z\"\n    })\n  }),\n  execute: (state, api) => {\n    // Adjust the selection to encompass the whole word if the caret is inside one\n    var newSelectionRange = selectWord({\n      text: state.text,\n      selection: state.selection\n    });\n    var state1 = api.setSelectionRange(newSelectionRange);\n    var breaksBeforeCount = getBreaksNeededForEmptyLineBefore(state1.text, state1.selection.start);\n    var breaksBefore = Array(breaksBeforeCount + 1).join('\\n');\n    var breaksAfterCount = getBreaksNeededForEmptyLineAfter(state1.text, state1.selection.end);\n    var breaksAfter = Array(breaksAfterCount + 1).join('\\n');\n\n    // Replaces the current selection with the quote mark up\n    api.replaceSelection(breaksBefore + \"> \" + state1.selectedText + breaksAfter);\n    var selectionStart = state1.selection.start + breaksBeforeCount + 2;\n    var selectionEnd = selectionStart + state1.selectedText.length;\n    api.setSelectionRange({\n      start: selectionStart,\n      end: selectionEnd\n    });\n  }\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,iCAAiC,EAAEC,gCAAgC,EAAEC,UAAU,QAAQ,wBAAwB;AACxH,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,OAAO,IAAIC,KAAK,GAAG;EACjBC,IAAI,EAAE,OAAO;EACbC,UAAU,EAAE,OAAO;EACnBC,SAAS,EAAE,WAAW;EACtBC,WAAW,EAAE;IACX,YAAY,EAAE,2BAA2B;IACzCC,KAAK,EAAE;EACT,CAAC;EACDC,IAAI,EAAE,aAAaP,IAAI,CAAC,KAAK,EAAE;IAC7BQ,KAAK,EAAE,IAAI;IACXC,MAAM,EAAE,IAAI;IACZC,OAAO,EAAE,aAAa;IACtBC,QAAQ,EAAE,aAAaX,IAAI,CAAC,MAAM,EAAE;MAClCY,IAAI,EAAE,cAAc;MACpBC,CAAC,EAAE;IACL,CAAC;EACH,CAAC,CAAC;EACFC,OAAO,EAAEA,CAACC,KAAK,EAAEC,GAAG,KAAK;IACvB;IACA,IAAIC,iBAAiB,GAAGnB,UAAU,CAAC;MACjCoB,IAAI,EAAEH,KAAK,CAACG,IAAI;MAChBC,SAAS,EAAEJ,KAAK,CAACI;IACnB,CAAC,CAAC;IACF,IAAIC,MAAM,GAAGJ,GAAG,CAACK,iBAAiB,CAACJ,iBAAiB,CAAC;IACrD,IAAIK,iBAAiB,GAAG1B,iCAAiC,CAACwB,MAAM,CAACF,IAAI,EAAEE,MAAM,CAACD,SAAS,CAACI,KAAK,CAAC;IAC9F,IAAIC,YAAY,GAAGC,KAAK,CAACH,iBAAiB,GAAG,CAAC,CAAC,CAACI,IAAI,CAAC,IAAI,CAAC;IAC1D,IAAIC,gBAAgB,GAAG9B,gCAAgC,CAACuB,MAAM,CAACF,IAAI,EAAEE,MAAM,CAACD,SAAS,CAACS,GAAG,CAAC;IAC1F,IAAIC,WAAW,GAAGJ,KAAK,CAACE,gBAAgB,GAAG,CAAC,CAAC,CAACD,IAAI,CAAC,IAAI,CAAC;;IAExD;IACAV,GAAG,CAACc,gBAAgB,CAACN,YAAY,GAAG,IAAI,GAAGJ,MAAM,CAACW,YAAY,GAAGF,WAAW,CAAC;IAC7E,IAAIG,cAAc,GAAGZ,MAAM,CAACD,SAAS,CAACI,KAAK,GAAGD,iBAAiB,GAAG,CAAC;IACnE,IAAIW,YAAY,GAAGD,cAAc,GAAGZ,MAAM,CAACW,YAAY,CAACG,MAAM;IAC9DlB,GAAG,CAACK,iBAAiB,CAAC;MACpBE,KAAK,EAAES,cAAc;MACrBJ,GAAG,EAAEK;IACP,CAAC,CAAC;EACJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}