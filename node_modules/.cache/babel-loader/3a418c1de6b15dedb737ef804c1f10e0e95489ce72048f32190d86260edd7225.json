{"ast":null,"code":"import { formatAbiItem } from './formatAbiItem.js';\nexport function formatAbi(abi) {\n  const signatures = [];\n  const length = abi.length;\n  for (let i = 0; i < length; i++) {\n    const abiItem = abi[i];\n    const signature = formatAbiItem(abiItem);\n    signatures.push(signature);\n  }\n  return signatures;\n}","map":{"version":3,"names":["formatAbiItem","formatAbi","abi","signatures","length","i","abiItem","signature","push"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/node_modules/abitype/src/human-readable/formatAbi.ts"],"sourcesContent":["import type { Abi } from '../abi.js'\nimport { type FormatAbiItem, formatAbiItem } from './formatAbiItem.js'\n\n/**\n * Parses JSON ABI into human-readable ABI\n *\n * @param TAbi - ABI\n * @returns Human-readable ABI\n */\nexport type FormatAbi<TAbi extends Abi | readonly unknown[]> = Abi extends TAbi\n  ? readonly string[]\n  : TAbi extends readonly []\n  ? never\n  : TAbi extends Abi\n  ? {\n      [K in keyof TAbi]: FormatAbiItem<TAbi[K]>\n    }\n  : readonly string[]\n\n/**\n * Parses JSON ABI into human-readable ABI\n *\n * @param abi - ABI\n * @returns Human-readable ABI\n */\nexport function formatAbi<const TAbi extends Abi | readonly unknown[]>(\n  abi: TAbi,\n): FormatAbi<TAbi> {\n  const signatures = []\n  const length = abi.length\n  for (let i = 0; i < length; i++) {\n    const abiItem = abi[i]!\n    const signature = formatAbiItem(abiItem as Abi[number])\n    signatures.push(signature)\n  }\n  return signatures as unknown as FormatAbi<TAbi>\n}\n"],"mappings":"AACA,SAA6BA,aAAa,QAAQ,oBAAoB;AAwBtE,OAAM,SAAUC,SAASA,CACvBC,GAAS;EAET,MAAMC,UAAU,GAAG,EAAE;EACrB,MAAMC,MAAM,GAAGF,GAAG,CAACE,MAAM;EACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,EAAEC,CAAC,EAAE,EAAE;IAC/B,MAAMC,OAAO,GAAGJ,GAAG,CAACG,CAAC,CAAE;IACvB,MAAME,SAAS,GAAGP,aAAa,CAACM,OAAsB,CAAC;IACvDH,UAAU,CAACK,IAAI,CAACD,SAAS,CAAC;;EAE5B,OAAOJ,UAAwC;AACjD"},"metadata":{},"sourceType":"module","externalDependencies":[]}