{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { AccountNotFoundError } from '../../errors/account.js';\nimport { stringToHex, toHex } from '../../utils/encoding/toHex.js';\n/**\n * Calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191): `keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))`.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/signMessage.html\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`personal_sign`](https://docs.metamask.io/guide/signing-data.html#personal-sign)\n *   - Local Accounts: Signs locally. No JSON-RPC request.\n *\n * With the calculated signature, you can:\n * - use [`verifyMessage`](https://viem.sh/docs/utilities/verifyMessage.html) to verify the signature,\n * - use [`recoverMessageAddress`](https://viem.sh/docs/utilities/recoverMessageAddress.html) to recover the signing address from a signature.\n *\n * @param client - Client to use\n * @param parameters - {@link SignMessageParameters}\n * @returns The signed message. {@link SignMessageReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { signMessage } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signMessage(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   message: 'hello world',\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, custom } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { signMessage } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signMessage(client, {\n *   message: 'hello world',\n * })\n */\nexport async function signMessage(client, _ref) {\n  let {\n    account: account_ = client.account,\n    message\n  } = _ref;\n  if (!account_) throw new AccountNotFoundError({\n    docsPath: '/docs/actions/wallet/signMessage'\n  });\n  const account = parseAccount(account_);\n  if (account.type === 'local') return account.signMessage({\n    message\n  });\n  const message_ = (() => {\n    if (typeof message === 'string') return stringToHex(message);\n    if (message.raw instanceof Uint8Array) return toHex(message.raw);\n    return message.raw;\n  })();\n  return client.request({\n    method: 'personal_sign',\n    params: [message_, account.address]\n  });\n}","map":{"version":3,"names":["parseAccount","AccountNotFoundError","stringToHex","toHex","signMessage","client","_ref","account","account_","message","docsPath","type","message_","raw","Uint8Array","request","method","params","address"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/actions/wallet/signMessage.ts"],"sourcesContent":["import type { Account } from '../../accounts/types.js'\nimport { parseAccount } from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { AccountNotFoundError } from '../../errors/account.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hex, SignableMessage } from '../../types/misc.js'\nimport { stringToHex, toHex } from '../../utils/encoding/toHex.js'\n\nexport type SignMessageParameters<\n  TAccount extends Account | undefined = Account | undefined,\n> = GetAccountParameter<TAccount> & {\n  message: SignableMessage\n}\n\nexport type SignMessageReturnType = Hex\n\n/**\n * Calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191): `keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))`.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/signMessage.html\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`personal_sign`](https://docs.metamask.io/guide/signing-data.html#personal-sign)\n *   - Local Accounts: Signs locally. No JSON-RPC request.\n *\n * With the calculated signature, you can:\n * - use [`verifyMessage`](https://viem.sh/docs/utilities/verifyMessage.html) to verify the signature,\n * - use [`recoverMessageAddress`](https://viem.sh/docs/utilities/recoverMessageAddress.html) to recover the signing address from a signature.\n *\n * @param client - Client to use\n * @param parameters - {@link SignMessageParameters}\n * @returns The signed message. {@link SignMessageReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { signMessage } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signMessage(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   message: 'hello world',\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, custom } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { signMessage } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signMessage(client, {\n *   message: 'hello world',\n * })\n */\nexport async function signMessage<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  {\n    account: account_ = client.account,\n    message,\n  }: SignMessageParameters<TAccount>,\n): Promise<SignMessageReturnType> {\n  if (!account_)\n    throw new AccountNotFoundError({\n      docsPath: '/docs/actions/wallet/signMessage',\n    })\n  const account = parseAccount(account_)\n  if (account.type === 'local') return account.signMessage({ message })\n\n  const message_ = (() => {\n    if (typeof message === 'string') return stringToHex(message)\n    if (message.raw instanceof Uint8Array) return toHex(message.raw)\n    return message.raw\n  })()\n\n  return client.request({\n    method: 'personal_sign',\n    params: [message_, account.address],\n  })\n}\n"],"mappings":"AACA,SAASA,YAAY,QAAQ,sCAAsC;AAGnE,SAASC,oBAAoB,QAAQ,yBAAyB;AAI9D,SAASC,WAAW,EAAEC,KAAK,QAAQ,+BAA+B;AAUlE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA,OAAO,eAAeC,WAAWA,CAI/BC,MAA2C,EAAAC,IAAA,EAIT;EAAA,IAHlC;IACEC,OAAO,EAAEC,QAAQ,GAAGH,MAAM,CAACE,OAAO;IAClCE;EAAO,CACyB,GAAAH,IAAA;EAElC,IAAI,CAACE,QAAQ,EACX,MAAM,IAAIP,oBAAoB,CAAC;IAC7BS,QAAQ,EAAE;GACX,CAAC;EACJ,MAAMH,OAAO,GAAGP,YAAY,CAACQ,QAAQ,CAAC;EACtC,IAAID,OAAO,CAACI,IAAI,KAAK,OAAO,EAAE,OAAOJ,OAAO,CAACH,WAAW,CAAC;IAAEK;EAAO,CAAE,CAAC;EAErE,MAAMG,QAAQ,GAAG,CAAC,MAAK;IACrB,IAAI,OAAOH,OAAO,KAAK,QAAQ,EAAE,OAAOP,WAAW,CAACO,OAAO,CAAC;IAC5D,IAAIA,OAAO,CAACI,GAAG,YAAYC,UAAU,EAAE,OAAOX,KAAK,CAACM,OAAO,CAACI,GAAG,CAAC;IAChE,OAAOJ,OAAO,CAACI,GAAG;EACpB,CAAC,EAAC,CAAE;EAEJ,OAAOR,MAAM,CAACU,OAAO,CAAC;IACpBC,MAAM,EAAE,eAAe;IACvBC,MAAM,EAAE,CAACL,QAAQ,EAAEL,OAAO,CAACW,OAAO;GACnC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}