{"ast":null,"code":"import { hexToNumber } from '../encoding/fromHex.js';\nimport { defineFormatter } from './formatter.js';\nimport { formatLog } from './log.js';\nimport { transactionType } from './transaction.js';\nconst statuses = {\n  '0x0': 'reverted',\n  '0x1': 'success'\n};\nexport function formatTransactionReceipt(transactionReceipt) {\n  return {\n    ...transactionReceipt,\n    blockNumber: transactionReceipt.blockNumber ? BigInt(transactionReceipt.blockNumber) : null,\n    contractAddress: transactionReceipt.contractAddress ? transactionReceipt.contractAddress : null,\n    cumulativeGasUsed: transactionReceipt.cumulativeGasUsed ? BigInt(transactionReceipt.cumulativeGasUsed) : null,\n    effectiveGasPrice: transactionReceipt.effectiveGasPrice ? BigInt(transactionReceipt.effectiveGasPrice) : null,\n    gasUsed: transactionReceipt.gasUsed ? BigInt(transactionReceipt.gasUsed) : null,\n    logs: transactionReceipt.logs ? transactionReceipt.logs.map(log => formatLog(log)) : null,\n    to: transactionReceipt.to ? transactionReceipt.to : null,\n    transactionIndex: transactionReceipt.transactionIndex ? hexToNumber(transactionReceipt.transactionIndex) : null,\n    status: transactionReceipt.status ? statuses[transactionReceipt.status] : null,\n    type: transactionReceipt.type ? transactionType[transactionReceipt.type] || transactionReceipt.type : null\n  };\n}\nexport const defineTransactionReceipt = /*#__PURE__*/defineFormatter('transactionReceipt', formatTransactionReceipt);","map":{"version":3,"names":["hexToNumber","defineFormatter","formatLog","transactionType","statuses","formatTransactionReceipt","transactionReceipt","blockNumber","BigInt","contractAddress","cumulativeGasUsed","effectiveGasPrice","gasUsed","logs","map","log","to","transactionIndex","status","type","defineTransactionReceipt"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/utils/formatters/transactionReceipt.ts"],"sourcesContent":["import type {\n  Chain,\n  ExtractChainFormatterReturnType,\n} from '../../types/chain.js'\nimport type { RpcTransactionReceipt } from '../../types/rpc.js'\nimport type { TransactionReceipt } from '../../types/transaction.js'\nimport { hexToNumber } from '../encoding/fromHex.js'\n\nimport { defineFormatter } from './formatter.js'\nimport { formatLog } from './log.js'\nimport { transactionType } from './transaction.js'\n\nexport type FormattedTransactionReceipt<\n  TChain extends Chain | undefined = Chain | undefined,\n> = ExtractChainFormatterReturnType<\n  TChain,\n  'transactionReceipt',\n  TransactionReceipt\n>\n\nconst statuses = {\n  '0x0': 'reverted',\n  '0x1': 'success',\n} as const\n\nexport function formatTransactionReceipt(\n  transactionReceipt: Partial<RpcTransactionReceipt>,\n) {\n  return {\n    ...transactionReceipt,\n    blockNumber: transactionReceipt.blockNumber\n      ? BigInt(transactionReceipt.blockNumber)\n      : null,\n    contractAddress: transactionReceipt.contractAddress\n      ? transactionReceipt.contractAddress\n      : null,\n    cumulativeGasUsed: transactionReceipt.cumulativeGasUsed\n      ? BigInt(transactionReceipt.cumulativeGasUsed)\n      : null,\n    effectiveGasPrice: transactionReceipt.effectiveGasPrice\n      ? BigInt(transactionReceipt.effectiveGasPrice)\n      : null,\n    gasUsed: transactionReceipt.gasUsed\n      ? BigInt(transactionReceipt.gasUsed)\n      : null,\n    logs: transactionReceipt.logs\n      ? transactionReceipt.logs.map((log) => formatLog(log))\n      : null,\n    to: transactionReceipt.to ? transactionReceipt.to : null,\n    transactionIndex: transactionReceipt.transactionIndex\n      ? hexToNumber(transactionReceipt.transactionIndex)\n      : null,\n    status: transactionReceipt.status\n      ? statuses[transactionReceipt.status]\n      : null,\n    type: transactionReceipt.type\n      ? transactionType[\n          transactionReceipt.type as keyof typeof transactionType\n        ] || transactionReceipt.type\n      : null,\n  } as TransactionReceipt\n}\n\nexport const defineTransactionReceipt = /*#__PURE__*/ defineFormatter(\n  'transactionReceipt',\n  formatTransactionReceipt,\n)\n"],"mappings":"AAMA,SAASA,WAAW,QAAQ,wBAAwB;AAEpD,SAASC,eAAe,QAAQ,gBAAgB;AAChD,SAASC,SAAS,QAAQ,UAAU;AACpC,SAASC,eAAe,QAAQ,kBAAkB;AAUlD,MAAMC,QAAQ,GAAG;EACf,KAAK,EAAE,UAAU;EACjB,KAAK,EAAE;CACC;AAEV,OAAM,SAAUC,wBAAwBA,CACtCC,kBAAkD;EAElD,OAAO;IACL,GAAGA,kBAAkB;IACrBC,WAAW,EAAED,kBAAkB,CAACC,WAAW,GACvCC,MAAM,CAACF,kBAAkB,CAACC,WAAW,CAAC,GACtC,IAAI;IACRE,eAAe,EAAEH,kBAAkB,CAACG,eAAe,GAC/CH,kBAAkB,CAACG,eAAe,GAClC,IAAI;IACRC,iBAAiB,EAAEJ,kBAAkB,CAACI,iBAAiB,GACnDF,MAAM,CAACF,kBAAkB,CAACI,iBAAiB,CAAC,GAC5C,IAAI;IACRC,iBAAiB,EAAEL,kBAAkB,CAACK,iBAAiB,GACnDH,MAAM,CAACF,kBAAkB,CAACK,iBAAiB,CAAC,GAC5C,IAAI;IACRC,OAAO,EAAEN,kBAAkB,CAACM,OAAO,GAC/BJ,MAAM,CAACF,kBAAkB,CAACM,OAAO,CAAC,GAClC,IAAI;IACRC,IAAI,EAAEP,kBAAkB,CAACO,IAAI,GACzBP,kBAAkB,CAACO,IAAI,CAACC,GAAG,CAAEC,GAAG,IAAKb,SAAS,CAACa,GAAG,CAAC,CAAC,GACpD,IAAI;IACRC,EAAE,EAAEV,kBAAkB,CAACU,EAAE,GAAGV,kBAAkB,CAACU,EAAE,GAAG,IAAI;IACxDC,gBAAgB,EAAEX,kBAAkB,CAACW,gBAAgB,GACjDjB,WAAW,CAACM,kBAAkB,CAACW,gBAAgB,CAAC,GAChD,IAAI;IACRC,MAAM,EAAEZ,kBAAkB,CAACY,MAAM,GAC7Bd,QAAQ,CAACE,kBAAkB,CAACY,MAAM,CAAC,GACnC,IAAI;IACRC,IAAI,EAAEb,kBAAkB,CAACa,IAAI,GACzBhB,eAAe,CACbG,kBAAkB,CAACa,IAAoC,CACxD,IAAIb,kBAAkB,CAACa,IAAI,GAC5B;GACiB;AACzB;AAEA,OAAO,MAAMC,wBAAwB,GAAG,aAAcnB,eAAe,CACnE,oBAAoB,EACpBI,wBAAwB,CACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}