{"ast":null,"code":"import { hexToNumber } from '../../utils/encoding/fromHex.js';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\n/**\n * Returns the number of Transactions at a block number, hash, or tag.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBlockTransactionCount.html\n * - JSON-RPC Methods:\n *   - Calls [`eth_getBlockTransactionCountByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbynumber) for `blockNumber` & `blockTag`.\n *   - Calls [`eth_getBlockTransactionCountByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbyhash) for `blockHash`.\n *\n * @param client - Client to use\n * @param parameters - {@link GetBlockTransactionCountParameters}\n * @returns The block transaction count. {@link GetBlockTransactionCountReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBlockTransactionCount } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const count = await getBlockTransactionCount(client)\n */\nexport async function getBlockTransactionCount(client) {\n  let {\n    blockHash,\n    blockNumber,\n    blockTag = 'latest'\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const blockNumberHex = blockNumber !== undefined ? numberToHex(blockNumber) : undefined;\n  let count;\n  if (blockHash) {\n    count = await client.request({\n      method: 'eth_getBlockTransactionCountByHash',\n      params: [blockHash]\n    });\n  } else {\n    count = await client.request({\n      method: 'eth_getBlockTransactionCountByNumber',\n      params: [blockNumberHex || blockTag]\n    });\n  }\n  return hexToNumber(count);\n}","map":{"version":3,"names":["hexToNumber","numberToHex","getBlockTransactionCount","client","blockHash","blockNumber","blockTag","arguments","length","undefined","blockNumberHex","count","request","method","params"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/actions/public/getBlockTransactionCount.ts"],"sourcesContent":["import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { Quantity } from '../../types/rpc.js'\nimport { hexToNumber } from '../../utils/encoding/fromHex.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\n\nexport type GetBlockTransactionCountParameters =\n  | {\n      /** Hash of the block. */\n      blockHash?: Hash\n      blockNumber?: never\n      blockTag?: never\n    }\n  | {\n      blockHash?: never\n      /** The block number. */\n      blockNumber?: bigint\n      blockTag?: never\n    }\n  | {\n      blockHash?: never\n      blockNumber?: never\n      /** The block tag. Defaults to 'latest'. */\n      blockTag?: BlockTag\n    }\n\nexport type GetBlockTransactionCountReturnType = number\n\n/**\n * Returns the number of Transactions at a block number, hash, or tag.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBlockTransactionCount.html\n * - JSON-RPC Methods:\n *   - Calls [`eth_getBlockTransactionCountByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbynumber) for `blockNumber` & `blockTag`.\n *   - Calls [`eth_getBlockTransactionCountByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbyhash) for `blockHash`.\n *\n * @param client - Client to use\n * @param parameters - {@link GetBlockTransactionCountParameters}\n * @returns The block transaction count. {@link GetBlockTransactionCountReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBlockTransactionCount } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const count = await getBlockTransactionCount(client)\n */\nexport async function getBlockTransactionCount<\n  TChain extends Chain | undefined,\n>(\n  client: Client<Transport, TChain>,\n  {\n    blockHash,\n    blockNumber,\n    blockTag = 'latest',\n  }: GetBlockTransactionCountParameters = {},\n): Promise<GetBlockTransactionCountReturnType> {\n  const blockNumberHex =\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\n\n  let count: Quantity\n  if (blockHash) {\n    count = await client.request({\n      method: 'eth_getBlockTransactionCountByHash',\n      params: [blockHash],\n    })\n  } else {\n    count = await client.request({\n      method: 'eth_getBlockTransactionCountByNumber',\n      params: [blockNumberHex || blockTag],\n    })\n  }\n\n  return hexToNumber(count)\n}\n"],"mappings":"AAMA,SAASA,WAAW,QAAQ,iCAAiC;AAC7D,SAASC,WAAW,QAAQ,+BAA+B;AAwB3D;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAO,eAAeC,wBAAwBA,CAG5CC,MAAiC,EAKS;EAAA,IAJ1C;IACEC,SAAS;IACTC,WAAW;IACXC,QAAQ,GAAG;EAAQ,IAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MACmB,EAAE;EAE1C,MAAMG,cAAc,GAClBL,WAAW,KAAKI,SAAS,GAAGR,WAAW,CAACI,WAAW,CAAC,GAAGI,SAAS;EAElE,IAAIE,KAAe;EACnB,IAAIP,SAAS,EAAE;IACbO,KAAK,GAAG,MAAMR,MAAM,CAACS,OAAO,CAAC;MAC3BC,MAAM,EAAE,oCAAoC;MAC5CC,MAAM,EAAE,CAACV,SAAS;KACnB,CAAC;GACH,MAAM;IACLO,KAAK,GAAG,MAAMR,MAAM,CAACS,OAAO,CAAC;MAC3BC,MAAM,EAAE,sCAAsC;MAC9CC,MAAM,EAAE,CAACJ,cAAc,IAAIJ,QAAQ;KACpC,CAAC;;EAGJ,OAAON,WAAW,CAACW,KAAK,CAAC;AAC3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}