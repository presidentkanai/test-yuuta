{"ast":null,"code":"import { numberToHex } from '../../utils/encoding/toHex.js';\n/**\n * Adds an EVM chain to the wallet.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/addChain.html\n * - JSON-RPC Methods: [`eth_addEthereumChain`](https://eips.ethereum.org/EIPS/eip-3085)\n *\n * @param client - Client to use\n * @param parameters - {@link AddChainParameters}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { optimism } from 'viem/chains'\n * import { addChain } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   transport: custom(window.ethereum),\n * })\n * await addChain(client, { chain: optimism })\n */\nexport async function addChain(client, _ref) {\n  let {\n    chain\n  } = _ref;\n  const {\n    id,\n    name,\n    nativeCurrency,\n    rpcUrls,\n    blockExplorers\n  } = chain;\n  await client.request({\n    method: 'wallet_addEthereumChain',\n    params: [{\n      chainId: numberToHex(id),\n      chainName: name,\n      nativeCurrency,\n      rpcUrls: rpcUrls.default.http,\n      blockExplorerUrls: blockExplorers ? Object.values(blockExplorers).map(_ref2 => {\n        let {\n          url\n        } = _ref2;\n        return url;\n      }) : undefined\n    }]\n  });\n}","map":{"version":3,"names":["numberToHex","addChain","client","_ref","chain","id","name","nativeCurrency","rpcUrls","blockExplorers","request","method","params","chainId","chainName","default","http","blockExplorerUrls","Object","values","map","_ref2","url","undefined"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/actions/wallet/addChain.ts"],"sourcesContent":["import type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { Chain } from '../../types/chain.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\n\nexport type AddChainParameters = {\n  /** The chain to add to the wallet. */\n  chain: Chain\n}\n\n/**\n * Adds an EVM chain to the wallet.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/addChain.html\n * - JSON-RPC Methods: [`eth_addEthereumChain`](https://eips.ethereum.org/EIPS/eip-3085)\n *\n * @param client - Client to use\n * @param parameters - {@link AddChainParameters}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { optimism } from 'viem/chains'\n * import { addChain } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   transport: custom(window.ethereum),\n * })\n * await addChain(client, { chain: optimism })\n */\nexport async function addChain<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(client: Client<Transport, TChain, TAccount>, { chain }: AddChainParameters) {\n  const { id, name, nativeCurrency, rpcUrls, blockExplorers } = chain\n  await client.request({\n    method: 'wallet_addEthereumChain',\n    params: [\n      {\n        chainId: numberToHex(id),\n        chainName: name,\n        nativeCurrency,\n        rpcUrls: rpcUrls.default.http,\n        blockExplorerUrls: blockExplorers\n          ? Object.values(blockExplorers).map(({ url }) => url)\n          : undefined,\n      },\n    ],\n  })\n}\n"],"mappings":"AAIA,SAASA,WAAW,QAAQ,+BAA+B;AAO3D;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,eAAeC,QAAQA,CAG5BC,MAA2C,EAAAC,IAAA,EAA+B;EAAA,IAA7B;IAAEC;EAAK,CAAsB,GAAAD,IAAA;EAC1E,MAAM;IAAEE,EAAE;IAAEC,IAAI;IAAEC,cAAc;IAAEC,OAAO;IAAEC;EAAc,CAAE,GAAGL,KAAK;EACnE,MAAMF,MAAM,CAACQ,OAAO,CAAC;IACnBC,MAAM,EAAE,yBAAyB;IACjCC,MAAM,EAAE,CACN;MACEC,OAAO,EAAEb,WAAW,CAACK,EAAE,CAAC;MACxBS,SAAS,EAAER,IAAI;MACfC,cAAc;MACdC,OAAO,EAAEA,OAAO,CAACO,OAAO,CAACC,IAAI;MAC7BC,iBAAiB,EAAER,cAAc,GAC7BS,MAAM,CAACC,MAAM,CAACV,cAAc,CAAC,CAACW,GAAG,CAACC,KAAA;QAAA,IAAC;UAAEC;QAAG,CAAE,GAAAD,KAAA;QAAA,OAAKC,GAAG;MAAA,EAAC,GACnDC;KACL;GAEJ,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}