{"ast":null,"code":"import { stringToBytes } from '../encoding/toBytes.js';\nimport { bytesToHex } from '../encoding/toHex.js';\nimport { keccak256 } from '../hash/keccak256.js';\nimport { encodedLabelToLabelhash } from './encodedLabelToLabelhash.js';\n/**\n * @description Hashes ENS label\n *\n * - Since ENS labels prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS labels](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `labelhash`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize.html) function for this.\n *\n * @example\n * labelhash('eth')\n * '0x4f5b812789fc606be1b3b16908db13fc7a9adf7ca72641f84d75b47069d3d7f0'\n */\nexport function labelhash(label) {\n  const result = new Uint8Array(32).fill(0);\n  if (!label) return bytesToHex(result);\n  return encodedLabelToLabelhash(label) || keccak256(stringToBytes(label));\n}","map":{"version":3,"names":["stringToBytes","bytesToHex","keccak256","encodedLabelToLabelhash","labelhash","label","result","Uint8Array","fill"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/utils/ens/labelhash.ts"],"sourcesContent":["import { stringToBytes } from '../encoding/toBytes.js'\nimport { bytesToHex } from '../encoding/toHex.js'\nimport { keccak256 } from '../hash/keccak256.js'\nimport { encodedLabelToLabelhash } from './encodedLabelToLabelhash.js'\n\n/**\n * @description Hashes ENS label\n *\n * - Since ENS labels prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS labels](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `labelhash`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize.html) function for this.\n *\n * @example\n * labelhash('eth')\n * '0x4f5b812789fc606be1b3b16908db13fc7a9adf7ca72641f84d75b47069d3d7f0'\n */\nexport function labelhash(label: string) {\n  const result = new Uint8Array(32).fill(0)\n  if (!label) return bytesToHex(result)\n  return encodedLabelToLabelhash(label) || keccak256(stringToBytes(label))\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,wBAAwB;AACtD,SAASC,UAAU,QAAQ,sBAAsB;AACjD,SAASC,SAAS,QAAQ,sBAAsB;AAChD,SAASC,uBAAuB,QAAQ,8BAA8B;AAEtE;;;;;;;;;AASA,OAAM,SAAUC,SAASA,CAACC,KAAa;EACrC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;EACzC,IAAI,CAACH,KAAK,EAAE,OAAOJ,UAAU,CAACK,MAAM,CAAC;EACrC,OAAOH,uBAAuB,CAACE,KAAK,CAAC,IAAIH,SAAS,CAACF,aAAa,CAACK,KAAK,CAAC,CAAC;AAC1E"},"metadata":{},"sourceType":"module","externalDependencies":[]}