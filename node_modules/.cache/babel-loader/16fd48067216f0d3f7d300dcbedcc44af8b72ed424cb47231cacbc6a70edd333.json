{"ast":null,"code":"import { hexToNumber } from '../../utils/encoding/fromHex.js';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\n/**\n * Returns the number of [Transactions](https://viem.sh/docs/glossary/terms.html#transaction) an Account has broadcast / sent.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransactionCount.html\n * - JSON-RPC Methods: [`eth_getTransactionCount`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactioncount)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionCountParameters}\n * @returns The number of transactions an account has sent. {@link GetTransactionCountReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransactionCount } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const transactionCount = await getTransactionCount(client, {\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n */\nexport async function getTransactionCount(client, _ref) {\n  let {\n    address,\n    blockTag = 'latest',\n    blockNumber\n  } = _ref;\n  const count = await client.request({\n    method: 'eth_getTransactionCount',\n    params: [address, blockNumber ? numberToHex(blockNumber) : blockTag]\n  });\n  return hexToNumber(count);\n}","map":{"version":3,"names":["hexToNumber","numberToHex","getTransactionCount","client","_ref","address","blockTag","blockNumber","count","request","method","params"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/actions/public/getTransactionCount.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport { hexToNumber } from '../../utils/encoding/fromHex.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\n\nexport type GetTransactionCountParameters = {\n  /** The account address. */\n  address: Address\n} & (\n  | {\n      /** The block number. */\n      blockNumber?: bigint\n      blockTag?: never\n    }\n  | {\n      blockNumber?: never\n      /** The block tag. Defaults to 'latest'. */\n      blockTag?: BlockTag\n    }\n)\nexport type GetTransactionCountReturnType = number\n\n/**\n * Returns the number of [Transactions](https://viem.sh/docs/glossary/terms.html#transaction) an Account has broadcast / sent.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransactionCount.html\n * - JSON-RPC Methods: [`eth_getTransactionCount`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactioncount)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionCountParameters}\n * @returns The number of transactions an account has sent. {@link GetTransactionCountReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransactionCount } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const transactionCount = await getTransactionCount(client, {\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * })\n */\nexport async function getTransactionCount<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  { address, blockTag = 'latest', blockNumber }: GetTransactionCountParameters,\n): Promise<GetTransactionCountReturnType> {\n  const count = await client.request({\n    method: 'eth_getTransactionCount',\n    params: [address, blockNumber ? numberToHex(blockNumber) : blockTag],\n  })\n  return hexToNumber(count)\n}\n"],"mappings":"AAOA,SAASA,WAAW,QAAQ,iCAAiC;AAC7D,SAASC,WAAW,QAAQ,+BAA+B;AAmB3D;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAO,eAAeC,mBAAmBA,CAIvCC,MAA2C,EAAAC,IAAA,EACiC;EAAA,IAA5E;IAAEC,OAAO;IAAEC,QAAQ,GAAG,QAAQ;IAAEC;EAAW,CAAiC,GAAAH,IAAA;EAE5E,MAAMI,KAAK,GAAG,MAAML,MAAM,CAACM,OAAO,CAAC;IACjCC,MAAM,EAAE,yBAAyB;IACjCC,MAAM,EAAE,CAACN,OAAO,EAAEE,WAAW,GAAGN,WAAW,CAACM,WAAW,CAAC,GAAGD,QAAQ;GACpE,CAAC;EACF,OAAON,WAAW,CAACQ,KAAK,CAAC;AAC3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}