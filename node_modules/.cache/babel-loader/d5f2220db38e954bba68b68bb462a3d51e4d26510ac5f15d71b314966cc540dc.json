{"ast":null,"code":"import { parseAccount } from '../utils/accounts.js';\nimport { uid } from '../utils/uid.js';\nexport function createClient(parameters) {\n  var _parameters$pollingIn;\n  const {\n    batch,\n    cacheTime = (_parameters$pollingIn = parameters.pollingInterval) !== null && _parameters$pollingIn !== void 0 ? _parameters$pollingIn : 4000,\n    key = 'base',\n    name = 'Base Client',\n    pollingInterval = 4000,\n    type = 'base'\n  } = parameters;\n  const chain = parameters.chain;\n  const account = parameters.account ? parseAccount(parameters.account) : undefined;\n  const {\n    config,\n    request,\n    value\n  } = parameters.transport({\n    chain,\n    pollingInterval\n  });\n  const transport = {\n    ...config,\n    ...value\n  };\n  const client = {\n    account,\n    batch,\n    cacheTime,\n    chain,\n    key,\n    name,\n    pollingInterval,\n    request,\n    transport,\n    type,\n    uid: uid()\n  };\n  function extend(base) {\n    return extendFn => {\n      const extended = extendFn(base);\n      for (const key in client) delete extended[key];\n      const combined = {\n        ...base,\n        ...extended\n      };\n      return Object.assign(combined, {\n        extend: extend(combined)\n      });\n    };\n  }\n  return Object.assign(client, {\n    extend: extend(client)\n  });\n}","map":{"version":3,"names":["parseAccount","uid","createClient","parameters","_parameters$pollingIn","batch","cacheTime","pollingInterval","key","name","type","chain","account","undefined","config","request","value","transport","client","extend","base","extendFn","extended","combined","Object","assign"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/clients/createClient.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Account, JsonRpcAccount } from '../accounts/types.js'\nimport type { Chain } from '../types/chain.js'\nimport type {\n  EIP1193RequestFn,\n  EIP1474Methods,\n  RpcSchema,\n} from '../types/eip1193.js'\nimport type { Prettify } from '../types/utils.js'\nimport { parseAccount } from '../utils/accounts.js'\nimport { uid } from '../utils/uid.js'\nimport type { Transport } from './transports/createTransport.js'\n\nexport type ClientConfig<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  accountOrAddress extends Account | Address | undefined =\n    | Account\n    | Address\n    | undefined,\n> = {\n  /** The Account to use for the Client. This will be used for Actions that require an account as an argument. */\n  account?: accountOrAddress | Account | Address | undefined\n  /** Flags for batch settings. */\n  batch?:\n    | {\n        /** Toggle to enable `eth_call` multicall aggregation. */\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined\n      }\n    | undefined\n  /**\n   * Time (in ms) that cached data will remain in memory.\n   * @default 4_000\n   */\n  cacheTime?: number | undefined\n  /** Chain for the client. */\n  chain?: Chain | undefined | chain\n  /** A key for the client. */\n  key?: string | undefined\n  /** A name for the client. */\n  name?: string | undefined\n  /**\n   * Frequency (in ms) for polling enabled actions & events.\n   * @default 4_000\n   */\n  pollingInterval?: number | undefined\n  /** The RPC transport */\n  transport: transport\n  /** The type of client. */\n  type?: string | undefined\n}\n\n// TODO: Move `transport` to slot index 2 since `chain` and `account` used more frequently.\n// Otherwise, we end up with a lot of `Client<Transport, chain, account>` in actions.\nexport type Client<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n  extended extends Extended | undefined = Extended | undefined,\n> = Client_Base<transport, chain, account, rpcSchema> &\n  (extended extends Extended ? extended : unknown) & {\n    extend: <const client extends Extended>(\n      fn: (\n        client: Client<transport, chain, account, rpcSchema, extended>,\n      ) => client,\n    ) => Client<\n      transport,\n      chain,\n      account,\n      rpcSchema,\n      Prettify<client> & (extended extends Extended ? extended : unknown)\n    >\n  }\n\ntype Client_Base<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n> = {\n  /** The Account of the Client. */\n  account: account\n  /** Flags for batch settings. */\n  batch?: ClientConfig['batch']\n  /** Time (in ms) that cached data will remain in memory. */\n  cacheTime: number\n  /** Chain for the client. */\n  chain: chain\n  /** A key for the client. */\n  key: string\n  /** A name for the client. */\n  name: string\n  /** Frequency (in ms) for polling enabled actions & events. Defaults to 4_000 milliseconds. */\n  pollingInterval: number\n  /** Request function wrapped with friendly error handling */\n  request: EIP1193RequestFn<\n    rpcSchema extends undefined ? EIP1474Methods : rpcSchema\n  >\n  /** The RPC transport */\n  transport: ReturnType<transport>['config'] & ReturnType<transport>['value']\n  /** The type of client. */\n  type: string\n  /** A unique ID for the client. */\n  uid: string\n}\n\ntype Extended = Prettify<\n  // disallow redefining base properties\n  { [K in keyof Client_Base]?: undefined } & {\n    [key: string]: unknown\n  }\n>\n\nexport type MulticallBatchOptions = {\n  /** The maximum size (in bytes) for each calldata chunk. @default 1_024 */\n  batchSize?: number | undefined\n  /** The maximum number of milliseconds to wait before sending a batch. @default 0 */\n  wait?: number | undefined\n}\n\n/**\n * Creates a base client with the given transport.\n */\nexport function createClient<\n  transport extends Transport,\n  chain extends Chain | undefined = undefined,\n  accountOrAddress extends Account | Address | undefined = undefined,\n>(\n  parameters: ClientConfig<transport, chain, accountOrAddress>,\n): Prettify<\n  Client<\n    transport,\n    chain,\n    accountOrAddress extends Address\n      ? Prettify<JsonRpcAccount<accountOrAddress>>\n      : accountOrAddress\n  >\n>\n\nexport function createClient(parameters: ClientConfig): Client {\n  const {\n    batch,\n    cacheTime = parameters.pollingInterval ?? 4_000,\n    key = 'base',\n    name = 'Base Client',\n    pollingInterval = 4_000,\n    type = 'base',\n  } = parameters\n\n  const chain = parameters.chain\n  const account = parameters.account\n    ? parseAccount(parameters.account)\n    : undefined\n  const { config, request, value } = parameters.transport({\n    chain,\n    pollingInterval,\n  })\n  const transport = { ...config, ...value }\n\n  const client = {\n    account,\n    batch,\n    cacheTime,\n    chain,\n    key,\n    name,\n    pollingInterval,\n    request,\n    transport,\n    type,\n    uid: uid(),\n  }\n\n  function extend(base: typeof client) {\n    type ExtendFn = (base: typeof client) => unknown\n    return (extendFn: ExtendFn) => {\n      const extended = extendFn(base) as Extended\n      for (const key in client) delete extended[key]\n      const combined = { ...base, ...extended }\n      return Object.assign(combined, { extend: extend(combined) })\n    }\n  }\n\n  return Object.assign(client, { extend: extend(client) as any })\n}\n"],"mappings":"AAUA,SAASA,YAAY,QAAQ,sBAAsB;AACnD,SAASC,GAAG,QAAQ,iBAAiB;AAkIrC,OAAM,SAAUC,YAAYA,CAACC,UAAwB;EAAA,IAAAC,qBAAA;EACnD,MAAM;IACJC,KAAK;IACLC,SAAS,IAAAF,qBAAA,GAAGD,UAAU,CAACI,eAAe,cAAAH,qBAAA,cAAAA,qBAAA,GAAI,IAAK;IAC/CI,GAAG,GAAG,MAAM;IACZC,IAAI,GAAG,aAAa;IACpBF,eAAe,GAAG,IAAK;IACvBG,IAAI,GAAG;EAAM,CACd,GAAGP,UAAU;EAEd,MAAMQ,KAAK,GAAGR,UAAU,CAACQ,KAAK;EAC9B,MAAMC,OAAO,GAAGT,UAAU,CAACS,OAAO,GAC9BZ,YAAY,CAACG,UAAU,CAACS,OAAO,CAAC,GAChCC,SAAS;EACb,MAAM;IAAEC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAE,GAAGb,UAAU,CAACc,SAAS,CAAC;IACtDN,KAAK;IACLJ;GACD,CAAC;EACF,MAAMU,SAAS,GAAG;IAAE,GAAGH,MAAM;IAAE,GAAGE;EAAK,CAAE;EAEzC,MAAME,MAAM,GAAG;IACbN,OAAO;IACPP,KAAK;IACLC,SAAS;IACTK,KAAK;IACLH,GAAG;IACHC,IAAI;IACJF,eAAe;IACfQ,OAAO;IACPE,SAAS;IACTP,IAAI;IACJT,GAAG,EAAEA,GAAG;GACT;EAED,SAASkB,MAAMA,CAACC,IAAmB;IAEjC,OAAQC,QAAkB,IAAI;MAC5B,MAAMC,QAAQ,GAAGD,QAAQ,CAACD,IAAI,CAAa;MAC3C,KAAK,MAAMZ,GAAG,IAAIU,MAAM,EAAE,OAAOI,QAAQ,CAACd,GAAG,CAAC;MAC9C,MAAMe,QAAQ,GAAG;QAAE,GAAGH,IAAI;QAAE,GAAGE;MAAQ,CAAE;MACzC,OAAOE,MAAM,CAACC,MAAM,CAACF,QAAQ,EAAE;QAAEJ,MAAM,EAAEA,MAAM,CAACI,QAAQ;MAAC,CAAE,CAAC;IAC9D,CAAC;EACH;EAEA,OAAOC,MAAM,CAACC,MAAM,CAACP,MAAM,EAAE;IAAEC,MAAM,EAAEA,MAAM,CAACD,MAAM;EAAQ,CAAE,CAAC;AACjE"},"metadata":{},"sourceType":"module","externalDependencies":[]}