{"ast":null,"code":"import { getAbiItem } from '../../utils/abi/getAbiItem.js';\nimport { getLogs } from './getLogs.js';\n/**\n * Returns a list of event logs emitted by a contract.\n *\n * - Docs: https://viem.sh/docs/actions/public/getContractEvents.html\n * - JSON-RPC Methods: [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs)\n *\n * @param client - Client to use\n * @param parameters - {@link GetContractEventsParameters}\n * @returns A list of event logs. {@link GetContractEventsReturnType}\n *\n * @example\n * import { createClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getContractEvents } from 'viem/public'\n * import { wagmiAbi } from './abi'\n *\n * const client = createClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const logs = await getContractEvents(client, {\n *  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *  abi: wagmiAbi,\n *  eventName: 'Transfer'\n * })\n */\nexport async function getContractEvents(client, _ref) {\n  let {\n    abi,\n    address,\n    args,\n    blockHash,\n    eventName,\n    fromBlock,\n    toBlock,\n    strict\n  } = _ref;\n  const event = eventName ? getAbiItem({\n    abi,\n    name: eventName\n  }) : undefined;\n  const events = !event ? abi.filter(x => x.type === 'event') : undefined;\n  return getLogs(client, {\n    address,\n    args,\n    blockHash,\n    event,\n    events,\n    fromBlock,\n    toBlock,\n    strict\n  });\n}","map":{"version":3,"names":["getAbiItem","getLogs","getContractEvents","client","_ref","abi","address","args","blockHash","eventName","fromBlock","toBlock","strict","event","name","undefined","events","filter","x","type"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/actions/public/getContractEvents.ts"],"sourcesContent":["import type { Abi, Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { GetEventArgs, InferEventName } from '../../types/contract.js'\nimport type { Log } from '../../types/log.js'\nimport type { Hash } from '../../types/misc.js'\nimport {\n  type GetAbiItemParameters,\n  getAbiItem,\n} from '../../utils/abi/getAbiItem.js'\nimport { getLogs } from './getLogs.js'\nimport type { GetLogsParameters } from './getLogs.js'\n\nexport type GetContractEventsParameters<\n  TAbi extends Abi | readonly unknown[] = readonly unknown[],\n  TEventName extends string | undefined = string | undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n> = {\n  /** The address of the contract. */\n  address?: Address | Address[]\n  /** Contract ABI. */\n  abi: TAbi\n  args?: TEventName extends string ? GetEventArgs<TAbi, TEventName> : undefined\n  /** Contract event. */\n  eventName?: InferEventName<TAbi, TEventName>\n  /**\n   * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n   * @default false\n   */\n  strict?: TStrict\n} & (\n  | {\n      /** Block number or tag after which to include logs */\n      fromBlock?: TFromBlock | BlockNumber | BlockTag\n      /** Block number or tag before which to include logs */\n      toBlock?: TToBlock | BlockNumber | BlockTag\n      blockHash?: never\n    }\n  | {\n      fromBlock?: never\n      toBlock?: never\n      /** Hash of block to include logs from */\n      blockHash?: Hash\n    }\n)\n\nexport type GetContractEventsReturnType<\n  TAbi extends Abi | readonly unknown[] = readonly unknown[],\n  TEventName extends string | undefined = string | undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  _Pending extends boolean =\n    | (TFromBlock extends 'pending' ? true : false)\n    | (TToBlock extends 'pending' ? true : false),\n> = Log<bigint, number, _Pending, undefined, TStrict, TAbi, TEventName>[]\n\n/**\n * Returns a list of event logs emitted by a contract.\n *\n * - Docs: https://viem.sh/docs/actions/public/getContractEvents.html\n * - JSON-RPC Methods: [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs)\n *\n * @param client - Client to use\n * @param parameters - {@link GetContractEventsParameters}\n * @returns A list of event logs. {@link GetContractEventsReturnType}\n *\n * @example\n * import { createClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getContractEvents } from 'viem/public'\n * import { wagmiAbi } from './abi'\n *\n * const client = createClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const logs = await getContractEvents(client, {\n *  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *  abi: wagmiAbi,\n *  eventName: 'Transfer'\n * })\n */\nexport async function getContractEvents<\n  TChain extends Chain | undefined,\n  const TAbi extends Abi | readonly unknown[],\n  TEventName extends string | undefined = undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n>(\n  client: Client<Transport, TChain>,\n  {\n    abi,\n    address,\n    args,\n    blockHash,\n    eventName,\n    fromBlock,\n    toBlock,\n    strict,\n  }: GetContractEventsParameters<\n    TAbi,\n    TEventName,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >,\n): Promise<\n  GetContractEventsReturnType<TAbi, TEventName, TStrict, TFromBlock, TToBlock>\n> {\n  const event = eventName\n    ? getAbiItem({ abi, name: eventName } as GetAbiItemParameters)\n    : undefined\n  const events = !event\n    ? (abi as Abi).filter((x) => x.type === 'event')\n    : undefined\n  return getLogs(client, {\n    address,\n    args,\n    blockHash,\n    event,\n    events,\n    fromBlock,\n    toBlock,\n    strict,\n  } as {} as GetLogsParameters) as unknown as GetContractEventsReturnType<\n    TAbi,\n    TEventName,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >\n}\n"],"mappings":"AASA,SAEEA,UAAU,QACL,+BAA+B;AACtC,SAASC,OAAO,QAAQ,cAAc;AAiDtC;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,OAAO,eAAeC,iBAAiBA,CAQrCC,MAAiC,EAAAC,IAAA,EAgBhC;EAAA,IAfD;IACEC,GAAG;IACHC,OAAO;IACPC,IAAI;IACJC,SAAS;IACTC,SAAS;IACTC,SAAS;IACTC,OAAO;IACPC;EAAM,CAOP,GAAAR,IAAA;EAID,MAAMS,KAAK,GAAGJ,SAAS,GACnBT,UAAU,CAAC;IAAEK,GAAG;IAAES,IAAI,EAAEL;EAAS,CAA0B,CAAC,GAC5DM,SAAS;EACb,MAAMC,MAAM,GAAG,CAACH,KAAK,GAChBR,GAAW,CAACY,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,IAAI,KAAK,OAAO,CAAC,GAC9CJ,SAAS;EACb,OAAOd,OAAO,CAACE,MAAM,EAAE;IACrBG,OAAO;IACPC,IAAI;IACJC,SAAS;IACTK,KAAK;IACLG,MAAM;IACNN,SAAS;IACTC,OAAO;IACPC;GAC0B,CAM3B;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}