{"ast":null,"code":"import { InvalidAddressError } from '../../errors/address.js';\nimport { InvalidStorageKeySizeError } from '../../errors/transaction.js';\nimport { isAddress } from '../address/isAddress.js';\nimport '../encoding/toRlp.js';\n/*\n * Serialize an  EIP-2930 access list\n * @remarks\n * Use to create a transaction serializer with support for EIP-2930 access lists\n *\n * @param accessList - Array of objects of address and arrays of Storage Keys\n * @throws InvalidAddressError, InvalidStorageKeySizeError\n * @returns Array of hex strings\n */\nexport function serializeAccessList(accessList) {\n  if (!accessList || accessList.length === 0) return [];\n  const serializedAccessList = [];\n  for (let i = 0; i < accessList.length; i++) {\n    const {\n      address,\n      storageKeys\n    } = accessList[i];\n    for (let j = 0; j < storageKeys.length; j++) {\n      if (storageKeys[j].length - 2 !== 64) {\n        throw new InvalidStorageKeySizeError({\n          storageKey: storageKeys[j]\n        });\n      }\n    }\n    if (!isAddress(address)) {\n      throw new InvalidAddressError({\n        address\n      });\n    }\n    serializedAccessList.push([address, storageKeys]);\n  }\n  return serializedAccessList;\n}","map":{"version":3,"names":["InvalidAddressError","InvalidStorageKeySizeError","isAddress","serializeAccessList","accessList","length","serializedAccessList","i","address","storageKeys","j","storageKey","push"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/utils/transaction/serializeAccessList.ts"],"sourcesContent":["import { InvalidAddressError } from '../../errors/address.js'\nimport { InvalidStorageKeySizeError } from '../../errors/transaction.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { AccessList } from '../../types/transaction.js'\nimport { isAddress } from '../address/isAddress.js'\nimport { type RecursiveArray } from '../encoding/toRlp.js'\n\n/*\n * Serialize an  EIP-2930 access list\n * @remarks\n * Use to create a transaction serializer with support for EIP-2930 access lists\n *\n * @param accessList - Array of objects of address and arrays of Storage Keys\n * @throws InvalidAddressError, InvalidStorageKeySizeError\n * @returns Array of hex strings\n */\nexport function serializeAccessList(\n  accessList?: AccessList,\n): RecursiveArray<Hex> {\n  if (!accessList || accessList.length === 0) return []\n\n  const serializedAccessList: RecursiveArray<Hex> = []\n  for (let i = 0; i < accessList.length; i++) {\n    const { address, storageKeys } = accessList[i]\n\n    for (let j = 0; j < storageKeys.length; j++) {\n      if (storageKeys[j].length - 2 !== 64) {\n        throw new InvalidStorageKeySizeError({ storageKey: storageKeys[j] })\n      }\n    }\n\n    if (!isAddress(address)) {\n      throw new InvalidAddressError({ address })\n    }\n\n    serializedAccessList.push([address, storageKeys])\n  }\n  return serializedAccessList\n}\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,yBAAyB;AAC7D,SAASC,0BAA0B,QAAQ,6BAA6B;AAGxE,SAASC,SAAS,QAAQ,yBAAyB;AACnD,OAAoC,sBAAsB;AAE1D;;;;;;;;;AASA,OAAM,SAAUC,mBAAmBA,CACjCC,UAAuB;EAEvB,IAAI,CAACA,UAAU,IAAIA,UAAU,CAACC,MAAM,KAAK,CAAC,EAAE,OAAO,EAAE;EAErD,MAAMC,oBAAoB,GAAwB,EAAE;EACpD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,UAAU,CAACC,MAAM,EAAEE,CAAC,EAAE,EAAE;IAC1C,MAAM;MAAEC,OAAO;MAAEC;IAAW,CAAE,GAAGL,UAAU,CAACG,CAAC,CAAC;IAE9C,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,WAAW,CAACJ,MAAM,EAAEK,CAAC,EAAE,EAAE;MAC3C,IAAID,WAAW,CAACC,CAAC,CAAC,CAACL,MAAM,GAAG,CAAC,KAAK,EAAE,EAAE;QACpC,MAAM,IAAIJ,0BAA0B,CAAC;UAAEU,UAAU,EAAEF,WAAW,CAACC,CAAC;QAAC,CAAE,CAAC;;;IAIxE,IAAI,CAACR,SAAS,CAACM,OAAO,CAAC,EAAE;MACvB,MAAM,IAAIR,mBAAmB,CAAC;QAAEQ;MAAO,CAAE,CAAC;;IAG5CF,oBAAoB,CAACM,IAAI,CAAC,CAACJ,OAAO,EAAEC,WAAW,CAAC,CAAC;;EAEnD,OAAOH,oBAAoB;AAC7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}