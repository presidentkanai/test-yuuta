{"ast":null,"code":"import { getAddress } from '../address/getAddress.js';\nimport { isAddressEqual } from '../address/isAddressEqual.js';\nimport { recoverMessageAddress } from './recoverMessageAddress.js';\n/**\n * Verify that a message was signed by the provided address.\n *\n * Note:  Only supports Externally Owned Accounts. Does not support Contract Accounts.\n *        It is highly recommended to use `publicClient.verifyMessage` instead to ensure\n *        wallet interoperability.\n *\n * - Docs {@link https://viem.sh/docs/utilities/verifyMessage.html}\n *\n * @param parameters - {@link VerifyMessageParameters}\n * @returns Whether or not the signature is valid. {@link VerifyMessageReturnType}\n */\nexport async function verifyMessage(_ref) {\n  let {\n    address,\n    message,\n    signature\n  } = _ref;\n  return isAddressEqual(getAddress(address), await recoverMessageAddress({\n    message,\n    signature\n  }));\n}","map":{"version":3,"names":["getAddress","isAddressEqual","recoverMessageAddress","verifyMessage","_ref","address","message","signature"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/utils/signature/verifyMessage.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { ByteArray, Hex, SignableMessage } from '../../types/misc.js'\nimport { getAddress } from '../address/getAddress.js'\nimport { isAddressEqual } from '../address/isAddressEqual.js'\n\nimport { recoverMessageAddress } from './recoverMessageAddress.js'\n\nexport type VerifyMessageParameters = {\n  /** The address that signed the original message. */\n  address: Address\n  /** The message to be verified. */\n  message: SignableMessage\n  /** The signature that was generated by signing the message with the address's private key. */\n  signature: Hex | ByteArray\n}\n\nexport type VerifyMessageReturnType = boolean\n\n/**\n * Verify that a message was signed by the provided address.\n *\n * Note:  Only supports Externally Owned Accounts. Does not support Contract Accounts.\n *        It is highly recommended to use `publicClient.verifyMessage` instead to ensure\n *        wallet interoperability.\n *\n * - Docs {@link https://viem.sh/docs/utilities/verifyMessage.html}\n *\n * @param parameters - {@link VerifyMessageParameters}\n * @returns Whether or not the signature is valid. {@link VerifyMessageReturnType}\n */\nexport async function verifyMessage({\n  address,\n  message,\n  signature,\n}: VerifyMessageParameters): Promise<VerifyMessageReturnType> {\n  return isAddressEqual(\n    getAddress(address),\n    await recoverMessageAddress({ message, signature }),\n  )\n}\n"],"mappings":"AAGA,SAASA,UAAU,QAAQ,0BAA0B;AACrD,SAASC,cAAc,QAAQ,8BAA8B;AAE7D,SAASC,qBAAqB,QAAQ,4BAA4B;AAalE;;;;;;;;;;;;AAYA,OAAO,eAAeC,aAAaA,CAAAC,IAAA,EAIT;EAAA,IAJU;IAClCC,OAAO;IACPC,OAAO;IACPC;EAAS,CACe,GAAAH,IAAA;EACxB,OAAOH,cAAc,CACnBD,UAAU,CAACK,OAAO,CAAC,EACnB,MAAMH,qBAAqB,CAAC;IAAEI,OAAO;IAAEC;EAAS,CAAE,CAAC,CACpD;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}