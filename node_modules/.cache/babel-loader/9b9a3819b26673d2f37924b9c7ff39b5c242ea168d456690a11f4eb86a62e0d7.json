{"ast":null,"code":"/**\n * @typedef {import('./types.js').SelectState} SelectState\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').ElementChild} ElementChild\n * @typedef {import('./types.js').Direction} Direction\n * @typedef {import('unist-util-visit/complex-types.js').Visitor<ElementChild>} Visitor\n */\n\nimport { direction } from 'direction';\nimport { toString } from 'hast-util-to-string';\nimport { svg } from 'property-information';\nimport { visit, EXIT, SKIP } from 'unist-util-visit';\n\n/**\n * Enter a node.\n *\n * The caller is responsible for calling the return value `exit`.\n *\n * @param {SelectState} state\n *   Current state.\n *\n *   Will be mutated: `exit` undos the changes.\n * @param {Node} node\n *   Node to enter.\n * @returns {() => void}\n *   Call to exit.\n */\n// eslint-disable-next-line complexity\nexport function enterState(state, node) {\n  const schema = state.schema;\n  const language = state.language;\n  const currentDirection = state.direction;\n  const editableOrEditingHost = state.editableOrEditingHost;\n  /** @type {Direction | undefined} */\n  let dirInferred;\n  if (node.type === 'element' && node.properties) {\n    const lang = node.properties.xmlLang || node.properties.lang;\n    const type = node.properties.type || 'text';\n    const dir = dirProperty(node);\n    if (lang !== undefined && lang !== null) {\n      state.language = String(lang);\n    }\n    if (schema && schema.space === 'html') {\n      if (node.properties.contentEditable === 'true') {\n        state.editableOrEditingHost = true;\n      }\n      if (node.tagName === 'svg') {\n        state.schema = svg;\n      }\n\n      // See: <https://html.spec.whatwg.org/#the-directionality>.\n      // Explicit `[dir=rtl]`.\n      if (dir === 'rtl') {\n        dirInferred = dir;\n      } else if (\n      // Explicit `[dir=ltr]`.\n      dir === 'ltr' ||\n      // HTML with an invalid or no `[dir]`.\n      dir !== 'auto' && node.tagName === 'html' ||\n      // `input[type=tel]` with an invalid or no `[dir]`.\n      dir !== 'auto' && node.tagName === 'input' && type === 'tel') {\n        dirInferred = 'ltr';\n        // `[dir=auto]` or `bdi` with an invalid or no `[dir]`.\n      } else if (dir === 'auto' || node.tagName === 'bdi') {\n        if (node.tagName === 'textarea') {\n          // Check contents of `<textarea>`.\n          dirInferred = dirBidi(toString(node));\n        } else if (node.tagName === 'input' && (type === 'email' || type === 'search' || type === 'tel' || type === 'text')) {\n          // Check value of `<input>`.\n          dirInferred = node.properties.value ?\n          // @ts-expect-error Assume string\n          dirBidi(node.properties.value) : 'ltr';\n        } else {\n          // Check text nodes in `node`.\n          visit(node, inferDirectionality);\n        }\n      }\n      if (dirInferred) {\n        state.direction = dirInferred;\n      }\n    }\n    // Turn off editing mode in non-HTML spaces.\n    else if (state.editableOrEditingHost) {\n      state.editableOrEditingHost = false;\n    }\n  }\n  return reset;\n  function reset() {\n    state.schema = schema;\n    state.language = language;\n    state.direction = currentDirection;\n    state.editableOrEditingHost = editableOrEditingHost;\n  }\n\n  /** @type {Visitor} */\n  function inferDirectionality(child) {\n    if (child.type === 'text') {\n      dirInferred = dirBidi(child.value);\n      return dirInferred ? EXIT : undefined;\n    }\n    if (child !== node && child.type === 'element' && (child.tagName === 'bdi' || child.tagName === 'script' || child.tagName === 'style' || child.tagName === 'textare' || dirProperty(child))) {\n      return SKIP;\n    }\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Direction | undefined}\n */\nfunction dirBidi(value) {\n  const result = direction(value);\n  return result === 'neutral' ? undefined : result;\n}\n\n/**\n * @param {ElementChild} node\n * @returns {Direction | undefined}\n */\nfunction dirProperty(node) {\n  const value = node.type === 'element' && node.properties && typeof node.properties.dir === 'string' ? node.properties.dir.toLowerCase() : undefined;\n  return value === 'auto' || value === 'ltr' || value === 'rtl' ? value : undefined;\n}","map":{"version":3,"names":["direction","toString","svg","visit","EXIT","SKIP","enterState","state","node","schema","language","currentDirection","editableOrEditingHost","dirInferred","type","properties","lang","xmlLang","dir","dirProperty","undefined","String","space","contentEditable","tagName","dirBidi","value","inferDirectionality","reset","child","result","toLowerCase"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/hast-util-select/lib/enter-state.js"],"sourcesContent":["/**\n * @typedef {import('./types.js').SelectState} SelectState\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').ElementChild} ElementChild\n * @typedef {import('./types.js').Direction} Direction\n * @typedef {import('unist-util-visit/complex-types.js').Visitor<ElementChild>} Visitor\n */\n\nimport {direction} from 'direction'\nimport {toString} from 'hast-util-to-string'\nimport {svg} from 'property-information'\nimport {visit, EXIT, SKIP} from 'unist-util-visit'\n\n/**\n * Enter a node.\n *\n * The caller is responsible for calling the return value `exit`.\n *\n * @param {SelectState} state\n *   Current state.\n *\n *   Will be mutated: `exit` undos the changes.\n * @param {Node} node\n *   Node to enter.\n * @returns {() => void}\n *   Call to exit.\n */\n// eslint-disable-next-line complexity\nexport function enterState(state, node) {\n  const schema = state.schema\n  const language = state.language\n  const currentDirection = state.direction\n  const editableOrEditingHost = state.editableOrEditingHost\n  /** @type {Direction | undefined} */\n  let dirInferred\n\n  if (node.type === 'element' && node.properties) {\n    const lang = node.properties.xmlLang || node.properties.lang\n    const type = node.properties.type || 'text'\n    const dir = dirProperty(node)\n\n    if (lang !== undefined && lang !== null) {\n      state.language = String(lang)\n    }\n\n    if (schema && schema.space === 'html') {\n      if (node.properties.contentEditable === 'true') {\n        state.editableOrEditingHost = true\n      }\n\n      if (node.tagName === 'svg') {\n        state.schema = svg\n      }\n\n      // See: <https://html.spec.whatwg.org/#the-directionality>.\n      // Explicit `[dir=rtl]`.\n      if (dir === 'rtl') {\n        dirInferred = dir\n      } else if (\n        // Explicit `[dir=ltr]`.\n        dir === 'ltr' ||\n        // HTML with an invalid or no `[dir]`.\n        (dir !== 'auto' && node.tagName === 'html') ||\n        // `input[type=tel]` with an invalid or no `[dir]`.\n        (dir !== 'auto' && node.tagName === 'input' && type === 'tel')\n      ) {\n        dirInferred = 'ltr'\n        // `[dir=auto]` or `bdi` with an invalid or no `[dir]`.\n      } else if (dir === 'auto' || node.tagName === 'bdi') {\n        if (node.tagName === 'textarea') {\n          // Check contents of `<textarea>`.\n          dirInferred = dirBidi(toString(node))\n        } else if (\n          node.tagName === 'input' &&\n          (type === 'email' ||\n            type === 'search' ||\n            type === 'tel' ||\n            type === 'text')\n        ) {\n          // Check value of `<input>`.\n          dirInferred = node.properties.value\n            ? // @ts-expect-error Assume string\n              dirBidi(node.properties.value)\n            : 'ltr'\n        } else {\n          // Check text nodes in `node`.\n          visit(node, inferDirectionality)\n        }\n      }\n\n      if (dirInferred) {\n        state.direction = dirInferred\n      }\n    }\n    // Turn off editing mode in non-HTML spaces.\n    else if (state.editableOrEditingHost) {\n      state.editableOrEditingHost = false\n    }\n  }\n\n  return reset\n\n  function reset() {\n    state.schema = schema\n    state.language = language\n    state.direction = currentDirection\n    state.editableOrEditingHost = editableOrEditingHost\n  }\n\n  /** @type {Visitor} */\n  function inferDirectionality(child) {\n    if (child.type === 'text') {\n      dirInferred = dirBidi(child.value)\n      return dirInferred ? EXIT : undefined\n    }\n\n    if (\n      child !== node &&\n      child.type === 'element' &&\n      (child.tagName === 'bdi' ||\n        child.tagName === 'script' ||\n        child.tagName === 'style' ||\n        child.tagName === 'textare' ||\n        dirProperty(child))\n    ) {\n      return SKIP\n    }\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Direction | undefined}\n */\nfunction dirBidi(value) {\n  const result = direction(value)\n  return result === 'neutral' ? undefined : result\n}\n\n/**\n * @param {ElementChild} node\n * @returns {Direction | undefined}\n */\nfunction dirProperty(node) {\n  const value =\n    node.type === 'element' &&\n    node.properties &&\n    typeof node.properties.dir === 'string'\n      ? node.properties.dir.toLowerCase()\n      : undefined\n\n  return value === 'auto' || value === 'ltr' || value === 'rtl'\n    ? value\n    : undefined\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}