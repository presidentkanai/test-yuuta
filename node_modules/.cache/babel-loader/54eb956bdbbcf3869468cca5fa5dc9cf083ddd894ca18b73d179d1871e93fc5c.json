{"ast":null,"code":"import { AbiFunctionNotFoundError, AbiFunctionOutputsNotFoundError } from '../../errors/abi.js';\nimport { decodeAbiParameters } from './decodeAbiParameters.js';\nimport { getAbiItem } from './getAbiItem.js';\nconst docsPath = '/docs/contract/decodeFunctionResult';\nexport function decodeFunctionResult(_ref) {\n  let {\n    abi,\n    args,\n    functionName,\n    data\n  } = _ref;\n  let abiItem = abi[0];\n  if (functionName) {\n    abiItem = getAbiItem({\n      abi,\n      args,\n      name: functionName\n    });\n    if (!abiItem) throw new AbiFunctionNotFoundError(functionName, {\n      docsPath\n    });\n  }\n  if (abiItem.type !== 'function') throw new AbiFunctionNotFoundError(undefined, {\n    docsPath\n  });\n  if (!abiItem.outputs) throw new AbiFunctionOutputsNotFoundError(abiItem.name, {\n    docsPath\n  });\n  const values = decodeAbiParameters(abiItem.outputs, data);\n  if (values && values.length > 1) return values;\n  if (values && values.length === 1) return values[0];\n  return undefined;\n}","map":{"version":3,"names":["AbiFunctionNotFoundError","AbiFunctionOutputsNotFoundError","decodeAbiParameters","getAbiItem","docsPath","decodeFunctionResult","_ref","abi","args","functionName","data","abiItem","name","type","undefined","outputs","values","length"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/utils/abi/decodeFunctionResult.ts"],"sourcesContent":["import type { Abi, ExtractAbiFunctionNames } from 'abitype'\n\nimport {\n  AbiFunctionNotFoundError,\n  AbiFunctionOutputsNotFoundError,\n} from '../../errors/abi.js'\nimport type {\n  AbiItem,\n  ContractFunctionResult,\n  GetFunctionArgs,\n  InferFunctionName,\n} from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\n\nimport { decodeAbiParameters } from './decodeAbiParameters.js'\nimport { type GetAbiItemParameters, getAbiItem } from './getAbiItem.js'\n\nconst docsPath = '/docs/contract/decodeFunctionResult'\n\nexport type DecodeFunctionResultParameters<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TFunctionName extends string | undefined = string,\n  _FunctionName = InferFunctionName<TAbi, TFunctionName>,\n> = {\n  functionName?: _FunctionName\n  data: Hex\n} & (TFunctionName extends string\n  ? { abi: TAbi } & Partial<GetFunctionArgs<TAbi, TFunctionName>>\n  : _FunctionName extends string\n  ? { abi: [TAbi[number]] } & Partial<GetFunctionArgs<TAbi, _FunctionName>>\n  : never)\n\nexport type DecodeFunctionResultReturnType<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TFunctionName extends string | undefined = string,\n  _FunctionName extends string = TAbi extends Abi\n    ? Abi extends TAbi\n      ? string\n      : ExtractAbiFunctionNames<TAbi>[number]\n    : string,\n> = TFunctionName extends string\n  ? ContractFunctionResult<TAbi, TFunctionName>\n  : ContractFunctionResult<TAbi, _FunctionName>\n\nexport function decodeFunctionResult<\n  const TAbi extends Abi | readonly unknown[],\n  TFunctionName extends string | undefined = undefined,\n>({\n  abi,\n  args,\n  functionName,\n  data,\n}: DecodeFunctionResultParameters<\n  TAbi,\n  TFunctionName\n>): DecodeFunctionResultReturnType<TAbi, TFunctionName> {\n  let abiItem = abi[0] as AbiItem\n  if (functionName) {\n    abiItem = getAbiItem({\n      abi,\n      args,\n      name: functionName,\n    } as GetAbiItemParameters)\n    if (!abiItem) throw new AbiFunctionNotFoundError(functionName, { docsPath })\n  }\n\n  if (abiItem.type !== 'function')\n    throw new AbiFunctionNotFoundError(undefined, { docsPath })\n  if (!abiItem.outputs)\n    throw new AbiFunctionOutputsNotFoundError(abiItem.name, { docsPath })\n\n  const values = decodeAbiParameters(abiItem.outputs, data)\n  if (values && values.length > 1) return values as any\n  if (values && values.length === 1) return values[0] as any\n  return undefined as any\n}\n"],"mappings":"AAEA,SACEA,wBAAwB,EACxBC,+BAA+B,QAC1B,qBAAqB;AAS5B,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAAoCC,UAAU,QAAQ,iBAAiB;AAEvE,MAAMC,QAAQ,GAAG,qCAAqC;AA2BtD,OAAM,SAAUC,oBAAoBA,CAAAC,IAAA,EAWnC;EAAA,IARC;IACAC,GAAG;IACHC,IAAI;IACJC,YAAY;IACZC;EAAI,CAIL,GAAAJ,IAAA;EACC,IAAIK,OAAO,GAAGJ,GAAG,CAAC,CAAC,CAAY;EAC/B,IAAIE,YAAY,EAAE;IAChBE,OAAO,GAAGR,UAAU,CAAC;MACnBI,GAAG;MACHC,IAAI;MACJI,IAAI,EAAEH;KACiB,CAAC;IAC1B,IAAI,CAACE,OAAO,EAAE,MAAM,IAAIX,wBAAwB,CAACS,YAAY,EAAE;MAAEL;IAAQ,CAAE,CAAC;;EAG9E,IAAIO,OAAO,CAACE,IAAI,KAAK,UAAU,EAC7B,MAAM,IAAIb,wBAAwB,CAACc,SAAS,EAAE;IAAEV;EAAQ,CAAE,CAAC;EAC7D,IAAI,CAACO,OAAO,CAACI,OAAO,EAClB,MAAM,IAAId,+BAA+B,CAACU,OAAO,CAACC,IAAI,EAAE;IAAER;EAAQ,CAAE,CAAC;EAEvE,MAAMY,MAAM,GAAGd,mBAAmB,CAACS,OAAO,CAACI,OAAO,EAAEL,IAAI,CAAC;EACzD,IAAIM,MAAM,IAAIA,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE,OAAOD,MAAa;EACrD,IAAIA,MAAM,IAAIA,MAAM,CAACC,MAAM,KAAK,CAAC,EAAE,OAAOD,MAAM,CAAC,CAAC,CAAQ;EAC1D,OAAOF,SAAgB;AACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}