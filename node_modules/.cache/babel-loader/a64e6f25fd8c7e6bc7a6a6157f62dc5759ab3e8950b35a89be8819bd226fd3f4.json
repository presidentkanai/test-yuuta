{"ast":null,"code":"import { formatAbiParameter } from './formatAbiParameter.js';\nexport function formatAbiParameters(abiParameters) {\n  let params = '';\n  const length = abiParameters.length;\n  for (let i = 0; i < length; i++) {\n    const abiParameter = abiParameters[i];\n    params += formatAbiParameter(abiParameter);\n    if (i !== length - 1) params += ', ';\n  }\n  return params;\n}","map":{"version":3,"names":["formatAbiParameter","formatAbiParameters","abiParameters","params","length","i","abiParameter"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/node_modules/abitype/src/human-readable/formatAbiParameters.ts"],"sourcesContent":["import type { AbiEventParameter, AbiParameter } from '../abi.js'\nimport type { Join } from '../types.js'\nimport {\n  type FormatAbiParameter,\n  formatAbiParameter,\n} from './formatAbiParameter.js'\n\n/**\n * Formats {@link AbiParameter}s to human-readable ABI parameter.\n *\n * @param TAbiParameters - ABI parameters\n * @returns Human-readable ABI parameters\n *\n * @example\n * type Result = FormatAbiParameters<[\n *   // ^? type Result = 'address from, uint256 tokenId'\n *   { type: 'address'; name: 'from'; },\n *   { type: 'uint256'; name: 'tokenId'; },\n * ]>\n */\nexport type FormatAbiParameters<\n  TAbiParameters extends readonly [\n    AbiParameter | AbiEventParameter,\n    ...(readonly (AbiParameter | AbiEventParameter)[]),\n  ],\n> = Join<\n  {\n    [K in keyof TAbiParameters]: FormatAbiParameter<TAbiParameters[K]>\n  },\n  ', '\n>\n\n/**\n * Formats {@link AbiParameter}s to human-readable ABI parameters.\n *\n * @param abiParameters - ABI parameters\n * @returns Human-readable ABI parameters\n *\n * @example\n * const result = formatAbiParameters([\n *   //  ^? const result: 'address from, uint256 tokenId'\n *   { type: 'address', name: 'from' },\n *   { type: 'uint256', name: 'tokenId' },\n * ])\n */\nexport function formatAbiParameters<\n  const TAbiParameters extends readonly [\n    AbiParameter | AbiEventParameter,\n    ...(readonly (AbiParameter | AbiEventParameter)[]),\n  ],\n>(abiParameters: TAbiParameters): FormatAbiParameters<TAbiParameters> {\n  let params = ''\n  const length = abiParameters.length\n  for (let i = 0; i < length; i++) {\n    const abiParameter = abiParameters[i]!\n    params += formatAbiParameter(abiParameter)\n    if (i !== length - 1) params += ', '\n  }\n  return params as FormatAbiParameters<TAbiParameters>\n}\n"],"mappings":"AAEA,SAEEA,kBAAkB,QACb,yBAAyB;AAwChC,OAAM,SAAUC,mBAAmBA,CAKjCC,aAA6B;EAC7B,IAAIC,MAAM,GAAG,EAAE;EACf,MAAMC,MAAM,GAAGF,aAAa,CAACE,MAAM;EACnC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,EAAEC,CAAC,EAAE,EAAE;IAC/B,MAAMC,YAAY,GAAGJ,aAAa,CAACG,CAAC,CAAE;IACtCF,MAAM,IAAIH,kBAAkB,CAACM,YAAY,CAAC;IAC1C,IAAID,CAAC,KAAKD,MAAM,GAAG,CAAC,EAAED,MAAM,IAAI,IAAI;;EAEtC,OAAOA,MAA6C;AACtD"},"metadata":{},"sourceType":"module","externalDependencies":[]}