{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { encodeFunctionData } from '../../utils/abi/encodeFunctionData.js';\nimport { getContractError } from '../../utils/errors/getContractError.js';\nimport { estimateGas } from './estimateGas.js';\n/**\n * Estimates the gas required to successfully execute a contract write function call.\n *\n * - Docs: https://viem.sh/docs/contract/estimateContractGas.html\n *\n * Internally, uses a [Public Client](https://viem.sh/docs/clients/public.html) to call the [`estimateGas` action](https://viem.sh/docs/actions/public/estimateGas.html) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData.html).\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateContractGasParameters}\n * @returns The gas estimate (in wei). {@link EstimateContractGasReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateContractGas } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const gas = await estimateContractGas(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function mint() public']),\n *   functionName: 'mint',\n *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n * })\n */\nexport async function estimateContractGas(client, _ref) {\n  let {\n    abi,\n    address,\n    args,\n    functionName,\n    ...request\n  } = _ref;\n  const data = encodeFunctionData({\n    abi,\n    args,\n    functionName\n  });\n  try {\n    const gas = await estimateGas(client, {\n      data,\n      to: address,\n      ...request\n    });\n    return gas;\n  } catch (err) {\n    const account = request.account ? parseAccount(request.account) : undefined;\n    throw getContractError(err, {\n      abi: abi,\n      address,\n      args,\n      docsPath: '/docs/contract/estimateContractGas',\n      functionName,\n      sender: account === null || account === void 0 ? void 0 : account.address\n    });\n  }\n}","map":{"version":3,"names":["parseAccount","encodeFunctionData","getContractError","estimateGas","estimateContractGas","client","_ref","abi","address","args","functionName","request","data","gas","to","err","account","undefined","docsPath","sender"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/actions/public/estimateContractGas.ts"],"sourcesContent":["import type { Abi } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport { parseAccount } from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { BaseError } from '../../errors/base.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { ContractFunctionConfig, GetValue } from '../../types/contract.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport {\n  type EncodeFunctionDataParameters,\n  encodeFunctionData,\n} from '../../utils/abi/encodeFunctionData.js'\nimport { getContractError } from '../../utils/errors/getContractError.js'\nimport { type EstimateGasParameters, estimateGas } from './estimateGas.js'\n\nexport type EstimateContractGasParameters<\n  TAbi extends Abi | readonly unknown[] = Abi,\n  TFunctionName extends string = string,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = undefined,\n> = ContractFunctionConfig<TAbi, TFunctionName, 'payable' | 'nonpayable'> &\n  UnionOmit<EstimateGasParameters<TChain, TAccount>, 'data' | 'to' | 'value'> &\n  GetValue<\n    TAbi,\n    TFunctionName,\n    EstimateGasParameters<TChain> extends EstimateGasParameters\n      ? EstimateGasParameters<TChain>['value']\n      : EstimateGasParameters['value']\n  >\n\nexport type EstimateContractGasReturnType = bigint\n\n/**\n * Estimates the gas required to successfully execute a contract write function call.\n *\n * - Docs: https://viem.sh/docs/contract/estimateContractGas.html\n *\n * Internally, uses a [Public Client](https://viem.sh/docs/clients/public.html) to call the [`estimateGas` action](https://viem.sh/docs/actions/public/estimateGas.html) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData.html).\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateContractGasParameters}\n * @returns The gas estimate (in wei). {@link EstimateContractGasReturnType}\n *\n * @example\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateContractGas } from 'viem/contract'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const gas = await estimateContractGas(client, {\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi(['function mint() public']),\n *   functionName: 'mint',\n *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n * })\n */\nexport async function estimateContractGas<\n  const TAbi extends Abi | readonly unknown[],\n  TFunctionName extends string,\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined = undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  {\n    abi,\n    address,\n    args,\n    functionName,\n    ...request\n  }: EstimateContractGasParameters<TAbi, TFunctionName, TChain, TAccount>,\n): Promise<EstimateContractGasReturnType> {\n  const data = encodeFunctionData({\n    abi,\n    args,\n    functionName,\n  } as unknown as EncodeFunctionDataParameters<TAbi, TFunctionName>)\n  try {\n    const gas = await estimateGas(client, {\n      data,\n      to: address,\n      ...request,\n    } as unknown as EstimateGasParameters<TChain>)\n    return gas\n  } catch (err) {\n    const account = request.account ? parseAccount(request.account) : undefined\n    throw getContractError(err as BaseError, {\n      abi: abi as Abi,\n      address,\n      args,\n      docsPath: '/docs/contract/estimateContractGas',\n      functionName,\n      sender: account?.address,\n    })\n  }\n}\n"],"mappings":"AAGA,SAASA,YAAY,QAAQ,sCAAsC;AAOnE,SAEEC,kBAAkB,QACb,uCAAuC;AAC9C,SAASC,gBAAgB,QAAQ,wCAAwC;AACzE,SAAqCC,WAAW,QAAQ,kBAAkB;AAmB1E;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,OAAO,eAAeC,mBAAmBA,CAMvCC,MAA2C,EAAAC,IAAA,EAO4B;EAAA,IANvE;IACEC,GAAG;IACHC,OAAO;IACPC,IAAI;IACJC,YAAY;IACZ,GAAGC;EAAO,CAC2D,GAAAL,IAAA;EAEvE,MAAMM,IAAI,GAAGX,kBAAkB,CAAC;IAC9BM,GAAG;IACHE,IAAI;IACJC;GAC+D,CAAC;EAClE,IAAI;IACF,MAAMG,GAAG,GAAG,MAAMV,WAAW,CAACE,MAAM,EAAE;MACpCO,IAAI;MACJE,EAAE,EAAEN,OAAO;MACX,GAAGG;KACwC,CAAC;IAC9C,OAAOE,GAAG;GACX,CAAC,OAAOE,GAAG,EAAE;IACZ,MAAMC,OAAO,GAAGL,OAAO,CAACK,OAAO,GAAGhB,YAAY,CAACW,OAAO,CAACK,OAAO,CAAC,GAAGC,SAAS;IAC3E,MAAMf,gBAAgB,CAACa,GAAgB,EAAE;MACvCR,GAAG,EAAEA,GAAU;MACfC,OAAO;MACPC,IAAI;MACJS,QAAQ,EAAE,oCAAoC;MAC9CR,YAAY;MACZS,MAAM,EAAEH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAER;KAClB,CAAC;;AAEN"},"metadata":{},"sourceType":"module","externalDependencies":[]}