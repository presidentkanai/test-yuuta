{"ast":null,"code":"import { getAddress } from '../address/getAddress.js';\nimport { isAddressEqual } from '../address/isAddressEqual.js';\nimport { recoverTypedDataAddress } from './recoverTypedDataAddress.js';\n/**\n * Verify that typed data was signed by the provided address.\n *\n * Note:  Only supports Externally Owned Accounts. Does not support Contract Accounts.\n *        It is highly recommended to use `publicClient.verifyTypedData` instead to ensure\n *        wallet interoperability.\n *\n * - Docs {@link https://viem.sh/docs/utilities/verifyTypedData.html}\n *\n * @param parameters - {@link VerifyTypedDataParameters}\n * @returns Whether or not the signature is valid. {@link VerifyTypedDataReturnType}\n */\nexport async function verifyTypedData(_ref) {\n  let {\n    address,\n    domain,\n    message,\n    primaryType,\n    signature,\n    types\n  } = _ref;\n  return isAddressEqual(getAddress(address), await recoverTypedDataAddress({\n    domain,\n    message,\n    primaryType,\n    signature,\n    types\n  }));\n}","map":{"version":3,"names":["getAddress","isAddressEqual","recoverTypedDataAddress","verifyTypedData","_ref","address","domain","message","primaryType","signature","types"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/utils/signature/verifyTypedData.ts"],"sourcesContent":["import type { Address, TypedData } from 'abitype'\n\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport type { TypedDataDefinition } from '../../types/typedData.js'\nimport { getAddress } from '../address/getAddress.js'\nimport { isAddressEqual } from '../address/isAddressEqual.js'\n\nimport {\n  type RecoverTypedDataAddressParameters,\n  recoverTypedDataAddress,\n} from './recoverTypedDataAddress.js'\n\nexport type VerifyTypedDataParameters<\n  TTypedData extends TypedData | { [key: string]: unknown } = TypedData,\n  TPrimaryType extends string = string,\n> = TypedDataDefinition<TTypedData, TPrimaryType> & {\n  /** The address to verify the typed data for. */\n  address: Address\n  /** The signature to verify */\n  signature: Hex | ByteArray\n}\n\nexport type VerifyTypedDataReturnType = boolean\n\n/**\n * Verify that typed data was signed by the provided address.\n *\n * Note:  Only supports Externally Owned Accounts. Does not support Contract Accounts.\n *        It is highly recommended to use `publicClient.verifyTypedData` instead to ensure\n *        wallet interoperability.\n *\n * - Docs {@link https://viem.sh/docs/utilities/verifyTypedData.html}\n *\n * @param parameters - {@link VerifyTypedDataParameters}\n * @returns Whether or not the signature is valid. {@link VerifyTypedDataReturnType}\n */\nexport async function verifyTypedData<\n  const TTypedData extends TypedData | { [key: string]: unknown },\n  TPrimaryType extends string = string,\n>({\n  address,\n  domain,\n  message,\n  primaryType,\n  signature,\n  types,\n}: VerifyTypedDataParameters<\n  TTypedData,\n  TPrimaryType\n>): Promise<VerifyTypedDataReturnType> {\n  return isAddressEqual(\n    getAddress(address),\n    await recoverTypedDataAddress({\n      domain,\n      message,\n      primaryType,\n      signature,\n      types,\n    } as RecoverTypedDataAddressParameters),\n  )\n}\n"],"mappings":"AAIA,SAASA,UAAU,QAAQ,0BAA0B;AACrD,SAASC,cAAc,QAAQ,8BAA8B;AAE7D,SAEEC,uBAAuB,QAClB,8BAA8B;AAcrC;;;;;;;;;;;;AAYA,OAAO,eAAeC,eAAeA,CAAAC,IAAA,EAapC;EAAA,IAVC;IACAC,OAAO;IACPC,MAAM;IACNC,OAAO;IACPC,WAAW;IACXC,SAAS;IACTC;EAAK,CAIN,GAAAN,IAAA;EACC,OAAOH,cAAc,CACnBD,UAAU,CAACK,OAAO,CAAC,EACnB,MAAMH,uBAAuB,CAAC;IAC5BI,MAAM;IACNC,OAAO;IACPC,WAAW;IACXC,SAAS;IACTC;GACoC,CAAC,CACxC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}