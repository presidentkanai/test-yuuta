{"ast":null,"code":"import { secp256k1 } from '@noble/curves/secp256k1';\nimport { hexToBigInt } from '../../utils/encoding/fromHex.js';\nimport { toHex } from '../../utils/encoding/toHex.js';\n/**\n * @description Converts a signature into hex format.\n *\n * @param signature The signature to convert.\n * @returns The signature in hex format.\n *\n * @example\n * signatureToHex({\n *   r: '0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf',\n *   s: '0x4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db8',\n *   v: 28n\n * })\n * // \"0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c\"\n */\nexport function signatureToHex(_ref) {\n  let {\n    r,\n    s,\n    v\n  } = _ref;\n  return `0x${new secp256k1.Signature(hexToBigInt(r), hexToBigInt(s)).toCompactHex()}${toHex(v).slice(2)}`;\n}","map":{"version":3,"names":["secp256k1","hexToBigInt","toHex","signatureToHex","_ref","r","s","v","Signature","toCompactHex","slice"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/utils/signature/signatureToHex.ts"],"sourcesContent":["import { secp256k1 } from '@noble/curves/secp256k1'\n\nimport type { Hex, Signature } from '../../types/misc.js'\nimport { hexToBigInt } from '../../utils/encoding/fromHex.js'\nimport { toHex } from '../../utils/encoding/toHex.js'\n\n/**\n * @description Converts a signature into hex format.\n *\n * @param signature The signature to convert.\n * @returns The signature in hex format.\n *\n * @example\n * signatureToHex({\n *   r: '0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf',\n *   s: '0x4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db8',\n *   v: 28n\n * })\n * // \"0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c\"\n */\nexport function signatureToHex({ r, s, v }: Signature): Hex {\n  return `0x${new secp256k1.Signature(\n    hexToBigInt(r),\n    hexToBigInt(s),\n  ).toCompactHex()}${toHex(v).slice(2)}`\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,yBAAyB;AAGnD,SAASC,WAAW,QAAQ,iCAAiC;AAC7D,SAASC,KAAK,QAAQ,+BAA+B;AAErD;;;;;;;;;;;;;;AAcA,OAAM,SAAUC,cAAcA,CAAAC,IAAA,EAAuB;EAAA,IAAtB;IAAEC,CAAC;IAAEC,CAAC;IAAEC;EAAC,CAAa,GAAAH,IAAA;EACnD,OAAO,KAAK,IAAIJ,SAAS,CAACQ,SAAS,CACjCP,WAAW,CAACI,CAAC,CAAC,EACdJ,WAAW,CAACK,CAAC,CAAC,CACf,CAACG,YAAY,EAAE,GAAGP,KAAK,CAACK,CAAC,CAAC,CAACG,KAAK,CAAC,CAAC,CAAC,EAAE;AACxC"},"metadata":{},"sourceType":"module","externalDependencies":[]}