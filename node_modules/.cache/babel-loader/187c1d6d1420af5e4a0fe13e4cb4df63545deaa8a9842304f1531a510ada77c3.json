{"ast":null,"code":"import React from 'react';\nimport { selectWord } from '../utils/markdownUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var italic = {\n  name: 'italic',\n  keyCommand: 'italic',\n  shortcuts: 'ctrlcmd+i',\n  value: '*{{text}}*',\n  buttonProps: {\n    'aria-label': 'Add italic text (ctrl + i)',\n    title: 'Add italic text (ctrl + i)'\n  },\n  icon: /*#__PURE__*/_jsx(\"svg\", {\n    \"data-name\": \"italic\",\n    width: \"12\",\n    height: \"12\",\n    role: \"img\",\n    viewBox: \"0 0 320 512\",\n    children: /*#__PURE__*/_jsx(\"path\", {\n      fill: \"currentColor\",\n      d: \"M204.758 416h-33.849l62.092-320h40.725a16 16 0 0 0 15.704-12.937l6.242-32C297.599 41.184 290.034 32 279.968 32H120.235a16 16 0 0 0-15.704 12.937l-6.242 32C96.362 86.816 103.927 96 113.993 96h33.846l-62.09 320H46.278a16 16 0 0 0-15.704 12.935l-6.245 32C22.402 470.815 29.967 480 40.034 480h158.479a16 16 0 0 0 15.704-12.935l6.245-32c1.927-9.88-5.638-19.065-15.704-19.065z\"\n    })\n  }),\n  execute: (state, api) => {\n    // Adjust the selection to encompass the whole word if the caret is inside one\n    var newSelectionRange = selectWord({\n      text: state.text,\n      selection: state.selection\n    });\n    var state1 = api.setSelectionRange(newSelectionRange);\n    // Replaces the current selection with the bold mark up\n    var val = state.command.value || '';\n    api.replaceSelection(val.replace(/({{text}})/gi, state1.selectedText));\n    var start = state1.selection.start + val.indexOf('{{text}}');\n    var end = state1.selection.start + val.indexOf('{{text}}') + (state1.selection.end - state1.selection.start);\n    // Adjust the selection to not contain the **\n    api.setSelectionRange({\n      start,\n      end\n    });\n  }\n};","map":{"version":3,"names":["React","selectWord","jsx","_jsx","italic","name","keyCommand","shortcuts","value","buttonProps","title","icon","width","height","role","viewBox","children","fill","d","execute","state","api","newSelectionRange","text","selection","state1","setSelectionRange","val","command","replaceSelection","replace","selectedText","start","indexOf","end"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/@uiw/react-md-editor/esm/commands/italic.js"],"sourcesContent":["import React from 'react';\nimport { selectWord } from '../utils/markdownUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var italic = {\n  name: 'italic',\n  keyCommand: 'italic',\n  shortcuts: 'ctrlcmd+i',\n  value: '*{{text}}*',\n  buttonProps: {\n    'aria-label': 'Add italic text (ctrl + i)',\n    title: 'Add italic text (ctrl + i)'\n  },\n  icon: /*#__PURE__*/_jsx(\"svg\", {\n    \"data-name\": \"italic\",\n    width: \"12\",\n    height: \"12\",\n    role: \"img\",\n    viewBox: \"0 0 320 512\",\n    children: /*#__PURE__*/_jsx(\"path\", {\n      fill: \"currentColor\",\n      d: \"M204.758 416h-33.849l62.092-320h40.725a16 16 0 0 0 15.704-12.937l6.242-32C297.599 41.184 290.034 32 279.968 32H120.235a16 16 0 0 0-15.704 12.937l-6.242 32C96.362 86.816 103.927 96 113.993 96h33.846l-62.09 320H46.278a16 16 0 0 0-15.704 12.935l-6.245 32C22.402 470.815 29.967 480 40.034 480h158.479a16 16 0 0 0 15.704-12.935l6.245-32c1.927-9.88-5.638-19.065-15.704-19.065z\"\n    })\n  }),\n  execute: (state, api) => {\n    // Adjust the selection to encompass the whole word if the caret is inside one\n    var newSelectionRange = selectWord({\n      text: state.text,\n      selection: state.selection\n    });\n    var state1 = api.setSelectionRange(newSelectionRange);\n    // Replaces the current selection with the bold mark up\n    var val = state.command.value || '';\n    api.replaceSelection(val.replace(/({{text}})/gi, state1.selectedText));\n    var start = state1.selection.start + val.indexOf('{{text}}');\n    var end = state1.selection.start + val.indexOf('{{text}}') + (state1.selection.end - state1.selection.start);\n    // Adjust the selection to not contain the **\n    api.setSelectionRange({\n      start,\n      end\n    });\n  }\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,wBAAwB;AACnD,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,OAAO,IAAIC,MAAM,GAAG;EAClBC,IAAI,EAAE,QAAQ;EACdC,UAAU,EAAE,QAAQ;EACpBC,SAAS,EAAE,WAAW;EACtBC,KAAK,EAAE,YAAY;EACnBC,WAAW,EAAE;IACX,YAAY,EAAE,4BAA4B;IAC1CC,KAAK,EAAE;EACT,CAAC;EACDC,IAAI,EAAE,aAAaR,IAAI,CAAC,KAAK,EAAE;IAC7B,WAAW,EAAE,QAAQ;IACrBS,KAAK,EAAE,IAAI;IACXC,MAAM,EAAE,IAAI;IACZC,IAAI,EAAE,KAAK;IACXC,OAAO,EAAE,aAAa;IACtBC,QAAQ,EAAE,aAAab,IAAI,CAAC,MAAM,EAAE;MAClCc,IAAI,EAAE,cAAc;MACpBC,CAAC,EAAE;IACL,CAAC;EACH,CAAC,CAAC;EACFC,OAAO,EAAEA,CAACC,KAAK,EAAEC,GAAG,KAAK;IACvB;IACA,IAAIC,iBAAiB,GAAGrB,UAAU,CAAC;MACjCsB,IAAI,EAAEH,KAAK,CAACG,IAAI;MAChBC,SAAS,EAAEJ,KAAK,CAACI;IACnB,CAAC,CAAC;IACF,IAAIC,MAAM,GAAGJ,GAAG,CAACK,iBAAiB,CAACJ,iBAAiB,CAAC;IACrD;IACA,IAAIK,GAAG,GAAGP,KAAK,CAACQ,OAAO,CAACpB,KAAK,IAAI,EAAE;IACnCa,GAAG,CAACQ,gBAAgB,CAACF,GAAG,CAACG,OAAO,CAAC,cAAc,EAAEL,MAAM,CAACM,YAAY,CAAC,CAAC;IACtE,IAAIC,KAAK,GAAGP,MAAM,CAACD,SAAS,CAACQ,KAAK,GAAGL,GAAG,CAACM,OAAO,CAAC,UAAU,CAAC;IAC5D,IAAIC,GAAG,GAAGT,MAAM,CAACD,SAAS,CAACQ,KAAK,GAAGL,GAAG,CAACM,OAAO,CAAC,UAAU,CAAC,IAAIR,MAAM,CAACD,SAAS,CAACU,GAAG,GAAGT,MAAM,CAACD,SAAS,CAACQ,KAAK,CAAC;IAC5G;IACAX,GAAG,CAACK,iBAAiB,CAAC;MACpBM,KAAK;MACLE;IACF,CAAC,CAAC;EACJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}