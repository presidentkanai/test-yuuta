{"ast":null,"code":"import { textResolverAbi, universalResolverResolveAbi } from '../../constants/abis.js';\nimport { decodeFunctionResult } from '../../utils/abi/decodeFunctionResult.js';\nimport { encodeFunctionData } from '../../utils/abi/encodeFunctionData.js';\nimport { getChainContractAddress } from '../../utils/chain.js';\nimport { toHex } from '../../utils/encoding/toHex.js';\nimport { isNullUniversalResolverError } from '../../utils/ens/errors.js';\nimport { namehash } from '../../utils/ens/namehash.js';\nimport { packetToBytes } from '../../utils/ens/packetToBytes.js';\nimport { readContract } from '../public/readContract.js';\n/**\n * Gets a text record for specified ENS name.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsResolver.html\n * - Examples: https://stackblitz.com/github/wagmi-dev/viem/tree/main/examples/ens\n *\n * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize.html) function for this.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsTextParameters}\n * @returns Address for ENS resolver. {@link GetEnsTextReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsText, normalize } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const twitterRecord = await getEnsText(client, {\n *   name: normalize('wagmi-dev.eth'),\n *   key: 'com.twitter',\n * })\n * // 'wagmi_sh'\n */\nexport async function getEnsText(client, _ref) {\n  let {\n    blockNumber,\n    blockTag,\n    name,\n    key,\n    universalResolverAddress: universalResolverAddress_\n  } = _ref;\n  let universalResolverAddress = universalResolverAddress_;\n  if (!universalResolverAddress) {\n    if (!client.chain) throw new Error('client chain not configured. universalResolverAddress is required.');\n    universalResolverAddress = getChainContractAddress({\n      blockNumber,\n      chain: client.chain,\n      contract: 'ensUniversalResolver'\n    });\n  }\n  try {\n    const res = await readContract(client, {\n      address: universalResolverAddress,\n      abi: universalResolverResolveAbi,\n      functionName: 'resolve',\n      args: [toHex(packetToBytes(name)), encodeFunctionData({\n        abi: textResolverAbi,\n        functionName: 'text',\n        args: [namehash(name), key]\n      })],\n      blockNumber,\n      blockTag\n    });\n    if (res[0] === '0x') return null;\n    const record = decodeFunctionResult({\n      abi: textResolverAbi,\n      functionName: 'text',\n      data: res[0]\n    });\n    return record === '' ? null : record;\n  } catch (err) {\n    if (isNullUniversalResolverError(err, 'resolve')) return null;\n    throw err;\n  }\n}","map":{"version":3,"names":["textResolverAbi","universalResolverResolveAbi","decodeFunctionResult","encodeFunctionData","getChainContractAddress","toHex","isNullUniversalResolverError","namehash","packetToBytes","readContract","getEnsText","client","_ref","blockNumber","blockTag","name","key","universalResolverAddress","universalResolverAddress_","chain","Error","contract","res","address","abi","functionName","args","record","data","err"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/actions/ens/getEnsText.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  textResolverAbi,\n  universalResolverResolveAbi,\n} from '../../constants/abis.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Prettify } from '../../types/utils.js'\nimport { decodeFunctionResult } from '../../utils/abi/decodeFunctionResult.js'\nimport { encodeFunctionData } from '../../utils/abi/encodeFunctionData.js'\nimport { getChainContractAddress } from '../../utils/chain.js'\nimport { toHex } from '../../utils/encoding/toHex.js'\nimport { isNullUniversalResolverError } from '../../utils/ens/errors.js'\nimport { namehash } from '../../utils/ens/namehash.js'\nimport { packetToBytes } from '../../utils/ens/packetToBytes.js'\nimport {\n  type ReadContractParameters,\n  readContract,\n} from '../public/readContract.js'\n\nexport type GetEnsTextParameters = Prettify<\n  Pick<ReadContractParameters, 'blockNumber' | 'blockTag'> & {\n    /** ENS name to get Text for. */\n    name: string\n    /** Text record to retrieve. */\n    key: string\n    /** Address of ENS Universal Resolver Contract. */\n    universalResolverAddress?: Address\n  }\n>\n\nexport type GetEnsTextReturnType = string | null\n\n/**\n * Gets a text record for specified ENS name.\n *\n * - Docs: https://viem.sh/docs/ens/actions/getEnsResolver.html\n * - Examples: https://stackblitz.com/github/wagmi-dev/viem/tree/main/examples/ens\n *\n * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize.html) function for this.\n *\n * @param client - Client to use\n * @param parameters - {@link GetEnsTextParameters}\n * @returns Address for ENS resolver. {@link GetEnsTextReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getEnsText, normalize } from 'viem/ens'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const twitterRecord = await getEnsText(client, {\n *   name: normalize('wagmi-dev.eth'),\n *   key: 'com.twitter',\n * })\n * // 'wagmi_sh'\n */\nexport async function getEnsText<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  {\n    blockNumber,\n    blockTag,\n    name,\n    key,\n    universalResolverAddress: universalResolverAddress_,\n  }: GetEnsTextParameters,\n): Promise<GetEnsTextReturnType> {\n  let universalResolverAddress = universalResolverAddress_\n  if (!universalResolverAddress) {\n    if (!client.chain)\n      throw new Error(\n        'client chain not configured. universalResolverAddress is required.',\n      )\n\n    universalResolverAddress = getChainContractAddress({\n      blockNumber,\n      chain: client.chain,\n      contract: 'ensUniversalResolver',\n    })\n  }\n\n  try {\n    const res = await readContract(client, {\n      address: universalResolverAddress,\n      abi: universalResolverResolveAbi,\n      functionName: 'resolve',\n      args: [\n        toHex(packetToBytes(name)),\n        encodeFunctionData({\n          abi: textResolverAbi,\n          functionName: 'text',\n          args: [namehash(name), key],\n        }),\n      ],\n      blockNumber,\n      blockTag,\n    })\n\n    if (res[0] === '0x') return null\n\n    const record = decodeFunctionResult({\n      abi: textResolverAbi,\n      functionName: 'text',\n      data: res[0],\n    })\n\n    return record === '' ? null : record\n  } catch (err) {\n    if (isNullUniversalResolverError(err, 'resolve')) return null\n    throw err\n  }\n}\n"],"mappings":"AAIA,SACEA,eAAe,EACfC,2BAA2B,QACtB,yBAAyB;AAGhC,SAASC,oBAAoB,QAAQ,yCAAyC;AAC9E,SAASC,kBAAkB,QAAQ,uCAAuC;AAC1E,SAASC,uBAAuB,QAAQ,sBAAsB;AAC9D,SAASC,KAAK,QAAQ,+BAA+B;AACrD,SAASC,4BAA4B,QAAQ,2BAA2B;AACxE,SAASC,QAAQ,QAAQ,6BAA6B;AACtD,SAASC,aAAa,QAAQ,kCAAkC;AAChE,SAEEC,YAAY,QACP,2BAA2B;AAelC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,OAAO,eAAeC,UAAUA,CAC9BC,MAAiC,EAAAC,IAAA,EAOV;EAAA,IANvB;IACEC,WAAW;IACXC,QAAQ;IACRC,IAAI;IACJC,GAAG;IACHC,wBAAwB,EAAEC;EAAyB,CAC9B,GAAAN,IAAA;EAEvB,IAAIK,wBAAwB,GAAGC,yBAAyB;EACxD,IAAI,CAACD,wBAAwB,EAAE;IAC7B,IAAI,CAACN,MAAM,CAACQ,KAAK,EACf,MAAM,IAAIC,KAAK,CACb,oEAAoE,CACrE;IAEHH,wBAAwB,GAAGb,uBAAuB,CAAC;MACjDS,WAAW;MACXM,KAAK,EAAER,MAAM,CAACQ,KAAK;MACnBE,QAAQ,EAAE;KACX,CAAC;;EAGJ,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMb,YAAY,CAACE,MAAM,EAAE;MACrCY,OAAO,EAAEN,wBAAwB;MACjCO,GAAG,EAAEvB,2BAA2B;MAChCwB,YAAY,EAAE,SAAS;MACvBC,IAAI,EAAE,CACJrB,KAAK,CAACG,aAAa,CAACO,IAAI,CAAC,CAAC,EAC1BZ,kBAAkB,CAAC;QACjBqB,GAAG,EAAExB,eAAe;QACpByB,YAAY,EAAE,MAAM;QACpBC,IAAI,EAAE,CAACnB,QAAQ,CAACQ,IAAI,CAAC,EAAEC,GAAG;OAC3B,CAAC,CACH;MACDH,WAAW;MACXC;KACD,CAAC;IAEF,IAAIQ,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,OAAO,IAAI;IAEhC,MAAMK,MAAM,GAAGzB,oBAAoB,CAAC;MAClCsB,GAAG,EAAExB,eAAe;MACpByB,YAAY,EAAE,MAAM;MACpBG,IAAI,EAAEN,GAAG,CAAC,CAAC;KACZ,CAAC;IAEF,OAAOK,MAAM,KAAK,EAAE,GAAG,IAAI,GAAGA,MAAM;GACrC,CAAC,OAAOE,GAAG,EAAE;IACZ,IAAIvB,4BAA4B,CAACuB,GAAG,EAAE,SAAS,CAAC,EAAE,OAAO,IAAI;IAC7D,MAAMA,GAAG;;AAEb"},"metadata":{},"sourceType":"module","externalDependencies":[]}