{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { internal_estimateFeesPerGas } from '../../actions/public/estimateFeesPerGas.js';\nimport { estimateGas } from '../../actions/public/estimateGas.js';\nimport { getBlock } from '../../actions/public/getBlock.js';\nimport { getTransactionCount } from '../../actions/public/getTransactionCount.js';\nimport { AccountNotFoundError } from '../../errors/account.js';\nimport { Eip1559FeesNotSupportedError, MaxFeePerGasTooLowError } from '../../errors/fee.js';\nimport { assertRequest } from '../../utils/transaction/assertRequest.js';\nimport { getTransactionType } from '../../utils/transaction/getTransactionType.js';\n/**\n * Prepares a transaction request for signing.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/prepareTransactionRequest.html\n *\n * @param args - {@link PrepareTransactionRequestParameters}\n * @returns The transaction request. {@link PrepareTransactionRequestReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { prepareTransactionRequest } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const request = await prepareTransactionRequest(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { prepareTransactionRequest } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const request = await prepareTransactionRequest(client, {\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n */\nexport async function prepareTransactionRequest(client, args) {\n  const {\n    account: account_ = client.account,\n    chain,\n    gas,\n    nonce,\n    type\n  } = args;\n  if (!account_) throw new AccountNotFoundError();\n  const account = parseAccount(account_);\n  const block = await getBlock(client, {\n    blockTag: 'latest'\n  });\n  const request = {\n    ...args,\n    from: account.address\n  };\n  if (typeof nonce === 'undefined') request.nonce = await getTransactionCount(client, {\n    address: account.address,\n    blockTag: 'pending'\n  });\n  if (typeof type === 'undefined') {\n    try {\n      request.type = getTransactionType(request);\n    } catch {\n      // infer type from block\n      request.type = typeof block.baseFeePerGas === 'bigint' ? 'eip1559' : 'legacy';\n    }\n  }\n  if (request.type === 'eip1559') {\n    // EIP-1559 fees\n    const {\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    } = await internal_estimateFeesPerGas(client, {\n      block,\n      chain,\n      request: request\n    });\n    if (typeof args.maxPriorityFeePerGas === 'undefined' && args.maxFeePerGas && args.maxFeePerGas < maxPriorityFeePerGas) throw new MaxFeePerGasTooLowError({\n      maxPriorityFeePerGas\n    });\n    request.maxPriorityFeePerGas = maxPriorityFeePerGas;\n    request.maxFeePerGas = maxFeePerGas;\n  } else {\n    // Legacy fees\n    if (typeof args.maxFeePerGas !== 'undefined' || typeof args.maxPriorityFeePerGas !== 'undefined') throw new Eip1559FeesNotSupportedError();\n    const {\n      gasPrice: gasPrice_\n    } = await internal_estimateFeesPerGas(client, {\n      block,\n      chain,\n      request: request,\n      type: 'legacy'\n    });\n    request.gasPrice = gasPrice_;\n  }\n  if (typeof gas === 'undefined') request.gas = await estimateGas(client, {\n    ...request,\n    account: {\n      address: account.address,\n      type: 'json-rpc'\n    }\n  });\n  assertRequest(request);\n  return request;\n}","map":{"version":3,"names":["parseAccount","internal_estimateFeesPerGas","estimateGas","getBlock","getTransactionCount","AccountNotFoundError","Eip1559FeesNotSupportedError","MaxFeePerGasTooLowError","assertRequest","getTransactionType","prepareTransactionRequest","client","args","account","account_","chain","gas","nonce","type","block","blockTag","request","from","address","baseFeePerGas","maxFeePerGas","maxPriorityFeePerGas","gasPrice","gasPrice_"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/actions/wallet/prepareTransactionRequest.ts"],"sourcesContent":["import type { Account } from '../../accounts/types.js'\nimport { parseAccount } from '../../accounts/utils/parseAccount.js'\nimport { internal_estimateFeesPerGas } from '../../actions/public/estimateFeesPerGas.js'\nimport {\n  type EstimateGasParameters,\n  estimateGas,\n} from '../../actions/public/estimateGas.js'\nimport { getBlock } from '../../actions/public/getBlock.js'\nimport { getTransactionCount } from '../../actions/public/getTransactionCount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { AccountNotFoundError } from '../../errors/account.js'\nimport {\n  Eip1559FeesNotSupportedError,\n  MaxFeePerGasTooLowError,\n} from '../../errors/fee.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { GetChain } from '../../types/chain.js'\nimport type { TransactionSerializable } from '../../types/transaction.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport type { FormattedTransactionRequest } from '../../utils/formatters/transactionRequest.js'\nimport type { AssertRequestParameters } from '../../utils/transaction/assertRequest.js'\nimport { assertRequest } from '../../utils/transaction/assertRequest.js'\nimport { getTransactionType } from '../../utils/transaction/getTransactionType.js'\n\nexport type PrepareTransactionRequestParameters<\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = Account | undefined,\n  TChainOverride extends Chain | undefined = Chain | undefined,\n> = UnionOmit<\n  FormattedTransactionRequest<\n    TChainOverride extends Chain ? TChainOverride : TChain\n  >,\n  'from'\n> &\n  GetAccountParameter<TAccount> &\n  GetChain<TChain, TChainOverride>\n\nexport type PrepareTransactionRequestReturnType<\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = Account | undefined,\n  TChainOverride extends Chain | undefined = Chain | undefined,\n> = FormattedTransactionRequest<\n  TChainOverride extends Chain ? TChainOverride : TChain\n> &\n  GetAccountParameter<TAccount> &\n  GetChain<TChain, TChainOverride>\n\n/**\n * Prepares a transaction request for signing.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/prepareTransactionRequest.html\n *\n * @param args - {@link PrepareTransactionRequestParameters}\n * @returns The transaction request. {@link PrepareTransactionRequestReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { prepareTransactionRequest } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const request = await prepareTransactionRequest(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { prepareTransactionRequest } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const request = await prepareTransactionRequest(client, {\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n */\nexport async function prepareTransactionRequest<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n  TChainOverride extends Chain | undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  args: PrepareTransactionRequestParameters<TChain, TAccount, TChainOverride>,\n): Promise<\n  PrepareTransactionRequestReturnType<TChain, TAccount, TChainOverride>\n> {\n  const { account: account_ = client.account, chain, gas, nonce, type } = args\n  if (!account_) throw new AccountNotFoundError()\n  const account = parseAccount(account_)\n\n  const block = await getBlock(client, { blockTag: 'latest' })\n\n  const request = { ...args, from: account.address }\n\n  if (typeof nonce === 'undefined')\n    request.nonce = await getTransactionCount(client, {\n      address: account.address,\n      blockTag: 'pending',\n    })\n\n  if (typeof type === 'undefined') {\n    try {\n      request.type = getTransactionType(\n        request as TransactionSerializable,\n      ) as any\n    } catch {\n      // infer type from block\n      request.type =\n        typeof block.baseFeePerGas === 'bigint' ? 'eip1559' : 'legacy'\n    }\n  }\n\n  if (request.type === 'eip1559') {\n    // EIP-1559 fees\n    const { maxFeePerGas, maxPriorityFeePerGas } =\n      await internal_estimateFeesPerGas(client, {\n        block,\n        chain,\n        request: request as PrepareTransactionRequestParameters,\n      })\n\n    if (\n      typeof args.maxPriorityFeePerGas === 'undefined' &&\n      args.maxFeePerGas &&\n      args.maxFeePerGas < maxPriorityFeePerGas\n    )\n      throw new MaxFeePerGasTooLowError({\n        maxPriorityFeePerGas,\n      })\n\n    request.maxPriorityFeePerGas = maxPriorityFeePerGas\n    request.maxFeePerGas = maxFeePerGas\n  } else {\n    // Legacy fees\n    if (\n      typeof args.maxFeePerGas !== 'undefined' ||\n      typeof args.maxPriorityFeePerGas !== 'undefined'\n    )\n      throw new Eip1559FeesNotSupportedError()\n\n    const { gasPrice: gasPrice_ } = await internal_estimateFeesPerGas(client, {\n      block,\n      chain,\n      request: request as PrepareTransactionRequestParameters,\n      type: 'legacy',\n    })\n    request.gasPrice = gasPrice_\n  }\n\n  if (typeof gas === 'undefined')\n    request.gas = await estimateGas(client, {\n      ...request,\n      account: { address: account.address, type: 'json-rpc' },\n    } as EstimateGasParameters)\n\n  assertRequest(request as AssertRequestParameters)\n\n  return request as unknown as PrepareTransactionRequestReturnType<\n    TChain,\n    TAccount,\n    TChainOverride\n  >\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}