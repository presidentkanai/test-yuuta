{"ast":null,"code":"import { numberToHex } from '../../utils/encoding/toHex.js';\n/**\n * Modifies (overrides) the nonce of an account.\n *\n * - Docs: https://viem.sh/docs/actions/test/setNonce.html\n *\n * @param client - Client to use\n * @param parameters – {@link SetNonceParameters}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { setNonce } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await setNonce(client, {\n *   address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n *   nonce: 420,\n * })\n */\nexport async function setNonce(client, _ref) {\n  let {\n    address,\n    nonce\n  } = _ref;\n  await client.request({\n    method: `${client.mode}_setNonce`,\n    params: [address, numberToHex(nonce)]\n  });\n}","map":{"version":3,"names":["numberToHex","setNonce","client","_ref","address","nonce","request","method","mode","params"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/actions/test/setNonce.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\n\nexport type SetNonceParameters = {\n  /** The account address. */\n  address: Address\n  /** The nonce to set. */\n  nonce: number\n}\n\n/**\n * Modifies (overrides) the nonce of an account.\n *\n * - Docs: https://viem.sh/docs/actions/test/setNonce.html\n *\n * @param client - Client to use\n * @param parameters – {@link SetNonceParameters}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { setNonce } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await setNonce(client, {\n *   address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n *   nonce: 420,\n * })\n */\nexport async function setNonce<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  { address, nonce }: SetNonceParameters,\n) {\n  await client.request({\n    method: `${client.mode}_setNonce`,\n    params: [address, numberToHex(nonce)],\n  })\n}\n"],"mappings":"AASA,SAASA,WAAW,QAAQ,+BAA+B;AAS3D;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAO,eAAeC,QAAQA,CAI5BC,MAAsE,EAAAC,IAAA,EAChC;EAAA,IAAtC;IAAEC,OAAO;IAAEC;EAAK,CAAsB,GAAAF,IAAA;EAEtC,MAAMD,MAAM,CAACI,OAAO,CAAC;IACnBC,MAAM,EAAE,GAAGL,MAAM,CAACM,IAAI,WAAW;IACjCC,MAAM,EAAE,CAACL,OAAO,EAAEJ,WAAW,CAACK,KAAK,CAAC;GACrC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}