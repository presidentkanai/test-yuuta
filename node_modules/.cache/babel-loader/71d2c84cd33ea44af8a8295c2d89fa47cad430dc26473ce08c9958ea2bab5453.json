{"ast":null,"code":"import { isStructSignature } from './runtime/signatures.js';\nimport { parseStructs } from './runtime/structs.js';\nimport { parseSignature } from './runtime/utils.js';\nexport function parseAbi(signatures) {\n  const structs = parseStructs(signatures);\n  const abi = [];\n  const length = signatures.length;\n  for (let i = 0; i < length; i++) {\n    const signature = signatures[i];\n    if (isStructSignature(signature)) continue;\n    abi.push(parseSignature(signature, structs));\n  }\n  return abi;\n}","map":{"version":3,"names":["isStructSignature","parseStructs","parseSignature","parseAbi","signatures","structs","abi","length","i","signature","push"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/node_modules/abitype/src/human-readable/parseAbi.ts"],"sourcesContent":["import type { Abi } from '../abi.js'\nimport type { Error, Filter } from '../types.js'\nimport { isStructSignature } from './runtime/signatures.js'\nimport { parseStructs } from './runtime/structs.js'\nimport { parseSignature } from './runtime/utils.js'\nimport type { Signatures } from './types/signatures.js'\nimport type { ParseStructs } from './types/structs.js'\nimport type { ParseSignature } from './types/utils.js'\n\n/**\n * Parses human-readable ABI into JSON {@link Abi}\n *\n * @param TSignatures - Human-readable ABI\n * @returns Parsed {@link Abi}\n *\n * @example\n * type Result = ParseAbi<\n *   // ^? type Result = readonly [{ name: \"balanceOf\"; type: \"function\"; stateMutability:...\n *   [\n *     'function balanceOf(address owner) view returns (uint256)',\n *     'event Transfer(address indexed from, address indexed to, uint256 amount)',\n *   ]\n * >\n */\nexport type ParseAbi<TSignatures extends readonly string[]> =\n  string[] extends TSignatures\n    ? Abi // If `T` was not able to be inferred (e.g. just `string[]`), return `Abi`\n    : TSignatures extends readonly string[]\n    ? TSignatures extends Signatures<TSignatures> // Validate signatures\n      ? ParseStructs<TSignatures> extends infer Structs\n        ? {\n            [K in keyof TSignatures]: TSignatures[K] extends string\n              ? ParseSignature<TSignatures[K], Structs>\n              : never\n          } extends infer Mapped extends readonly unknown[]\n          ? Filter<Mapped, never> extends infer Result\n            ? Result extends readonly []\n              ? never\n              : Result\n            : never\n          : never\n        : never\n      : never\n    : never\n\n/**\n * Parses human-readable ABI into JSON {@link Abi}\n *\n * @param signatures - Human-Readable ABI\n * @returns Parsed {@link Abi}\n *\n * @example\n * const abi = parseAbi([\n *   //  ^? const abi: readonly [{ name: \"balanceOf\"; type: \"function\"; stateMutability:...\n *   'function balanceOf(address owner) view returns (uint256)',\n *   'event Transfer(address indexed from, address indexed to, uint256 amount)',\n * ])\n */\nexport function parseAbi<const TSignatures extends readonly string[]>(\n  signatures: TSignatures['length'] extends 0\n    ? Error<'At least one signature required'>\n    : Signatures<TSignatures> extends TSignatures\n    ? TSignatures\n    : Signatures<TSignatures>,\n): ParseAbi<TSignatures> {\n  const structs = parseStructs(signatures as readonly string[])\n  const abi = []\n  const length = signatures.length as number\n  for (let i = 0; i < length; i++) {\n    const signature = (signatures as readonly string[])[i]!\n    if (isStructSignature(signature)) continue\n    abi.push(parseSignature(signature, structs))\n  }\n  return abi as unknown as ParseAbi<TSignatures>\n}\n"],"mappings":"AAEA,SAASA,iBAAiB,QAAQ,yBAAyB;AAC3D,SAASC,YAAY,QAAQ,sBAAsB;AACnD,SAASC,cAAc,QAAQ,oBAAoB;AAsDnD,OAAM,SAAUC,QAAQA,CACtBC,UAI2B;EAE3B,MAAMC,OAAO,GAAGJ,YAAY,CAACG,UAA+B,CAAC;EAC7D,MAAME,GAAG,GAAG,EAAE;EACd,MAAMC,MAAM,GAAGH,UAAU,CAACG,MAAgB;EAC1C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,EAAEC,CAAC,EAAE,EAAE;IAC/B,MAAMC,SAAS,GAAIL,UAAgC,CAACI,CAAC,CAAE;IACvD,IAAIR,iBAAiB,CAACS,SAAS,CAAC,EAAE;IAClCH,GAAG,CAACI,IAAI,CAACR,cAAc,CAACO,SAAS,EAAEJ,OAAO,CAAC,CAAC;;EAE9C,OAAOC,GAAuC;AAChD"},"metadata":{},"sourceType":"module","externalDependencies":[]}