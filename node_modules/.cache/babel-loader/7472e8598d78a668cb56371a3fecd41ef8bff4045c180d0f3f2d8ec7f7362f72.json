{"ast":null,"code":"export function defineFormatter(type, format) {\n  return _ref => {\n    let {\n      exclude,\n      format: overrides\n    } = _ref;\n    return {\n      exclude,\n      format: args => {\n        const formatted = format(args);\n        if (exclude) {\n          for (const key of exclude) {\n            delete formatted[key];\n          }\n        }\n        return {\n          ...formatted,\n          ...overrides(args)\n        };\n      },\n      type\n    };\n  };\n}","map":{"version":3,"names":["defineFormatter","type","format","_ref","exclude","overrides","args","formatted","key"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/utils/formatters/formatter.ts"],"sourcesContent":["import type { Assign, Prettify } from '../../types/utils.js'\n\nexport function defineFormatter<TType extends string, TParameters, TReturnType>(\n  type: TType,\n  format: (_: TParameters) => TReturnType,\n) {\n  return <\n    TOverrideParameters,\n    TOverrideReturnType,\n    TExclude extends (keyof TParameters)[] = [],\n  >({\n    exclude,\n    format: overrides,\n  }: {\n    exclude?: TExclude\n    format: (_: TOverrideParameters) => TOverrideReturnType\n  }) => {\n    return {\n      exclude,\n      format: (args: Assign<TParameters, TOverrideParameters>) => {\n        const formatted = format(args as any)\n        if (exclude) {\n          for (const key of exclude) {\n            delete (formatted as any)[key]\n          }\n        }\n        return {\n          ...formatted,\n          ...overrides(args),\n        } as Prettify<Assign<TReturnType, TOverrideReturnType>> & {\n          [K in TExclude[number]]: never\n        }\n      },\n      type,\n    }\n  }\n}\n"],"mappings":"AAEA,OAAM,SAAUA,eAAeA,CAC7BC,IAAW,EACXC,MAAuC;EAEvC,OAAOC,IAAA,IAUF;IAAA,IANH;MACAC,OAAO;MACPF,MAAM,EAAEG;IAAS,CAIlB,GAAAF,IAAA;IACC,OAAO;MACLC,OAAO;MACPF,MAAM,EAAGI,IAA8C,IAAI;QACzD,MAAMC,SAAS,GAAGL,MAAM,CAACI,IAAW,CAAC;QACrC,IAAIF,OAAO,EAAE;UACX,KAAK,MAAMI,GAAG,IAAIJ,OAAO,EAAE;YACzB,OAAQG,SAAiB,CAACC,GAAG,CAAC;;;QAGlC,OAAO;UACL,GAAGD,SAAS;UACZ,GAAGF,SAAS,CAACC,IAAI;SAGlB;MACH,CAAC;MACDL;KACD;EACH,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}