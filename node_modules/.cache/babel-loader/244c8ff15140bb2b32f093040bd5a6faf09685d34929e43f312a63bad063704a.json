{"ast":null,"code":"import { CallExecutionError } from '../../errors/contract.js';\nimport { UnknownNodeError } from '../../errors/node.js';\nimport { getNodeError } from './getNodeError.js';\nexport function getCallError(err, _ref) {\n  let {\n    docsPath,\n    ...args\n  } = _ref;\n  let cause = getNodeError(err, args);\n  if (cause instanceof UnknownNodeError) cause = err;\n  return new CallExecutionError(cause, {\n    docsPath,\n    ...args\n  });\n}","map":{"version":3,"names":["CallExecutionError","UnknownNodeError","getNodeError","getCallError","err","_ref","docsPath","args","cause"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/utils/errors/getCallError.ts"],"sourcesContent":["import type { CallParameters } from '../../actions/public/call.js'\nimport type { BaseError } from '../../errors/base.js'\nimport { CallExecutionError } from '../../errors/contract.js'\nimport { UnknownNodeError } from '../../errors/node.js'\nimport type { Chain } from '../../types/chain.js'\n\nimport { type GetNodeErrorParameters, getNodeError } from './getNodeError.js'\n\nexport function getCallError(\n  err: BaseError,\n  {\n    docsPath,\n    ...args\n  }: CallParameters & {\n    chain?: Chain\n    docsPath?: string\n  },\n) {\n  let cause = getNodeError(err, args as GetNodeErrorParameters)\n  if (cause instanceof UnknownNodeError) cause = err\n  return new CallExecutionError(cause, {\n    docsPath,\n    ...args,\n  })\n}\n"],"mappings":"AAEA,SAASA,kBAAkB,QAAQ,0BAA0B;AAC7D,SAASC,gBAAgB,QAAQ,sBAAsB;AAGvD,SAAsCC,YAAY,QAAQ,mBAAmB;AAE7E,OAAM,SAAUC,YAAYA,CAC1BC,GAAc,EAAAC,IAAA,EAOb;EAAA,IAND;IACEC,QAAQ;IACR,GAAGC;EAAI,CAIR,GAAAF,IAAA;EAED,IAAIG,KAAK,GAAGN,YAAY,CAACE,GAAG,EAAEG,IAA8B,CAAC;EAC7D,IAAIC,KAAK,YAAYP,gBAAgB,EAAEO,KAAK,GAAGJ,GAAG;EAClD,OAAO,IAAIJ,kBAAkB,CAACQ,KAAK,EAAE;IACnCF,QAAQ;IACR,GAAGC;GACJ,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}