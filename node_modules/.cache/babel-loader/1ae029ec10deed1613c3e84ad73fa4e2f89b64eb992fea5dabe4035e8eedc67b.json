{"ast":null,"code":"const paramsRegex = /((function|event)\\s)?(.*)(\\((.*)\\))/;\nexport function extractFunctionParts(def) {\n  const parts = def.match(paramsRegex);\n  const type = (parts === null || parts === void 0 ? void 0 : parts[2]) || undefined;\n  const name = parts === null || parts === void 0 ? void 0 : parts[3];\n  const params = (parts === null || parts === void 0 ? void 0 : parts[5]) || undefined;\n  return {\n    type,\n    name,\n    params\n  };\n}\nexport function extractFunctionName(def) {\n  return extractFunctionParts(def).name;\n}\nexport function extractFunctionParams(def) {\n  const params = extractFunctionParts(def).params;\n  const splitParams = params === null || params === void 0 ? void 0 : params.split(',').map(x => x.trim().split(' '));\n  return splitParams === null || splitParams === void 0 ? void 0 : splitParams.map(param => ({\n    type: param[0],\n    name: param[1] === 'indexed' ? param[2] : param[1],\n    ...(param[1] === 'indexed' ? {\n      indexed: true\n    } : {})\n  }));\n}\nexport function extractFunctionType(def) {\n  return extractFunctionParts(def).type;\n}","map":{"version":3,"names":["paramsRegex","extractFunctionParts","def","parts","match","type","undefined","name","params","extractFunctionName","extractFunctionParams","splitParams","split","map","x","trim","param","indexed","extractFunctionType"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/utils/contract/extractFunctionParts.ts"],"sourcesContent":["const paramsRegex = /((function|event)\\s)?(.*)(\\((.*)\\))/\n\nexport function extractFunctionParts(def: string) {\n  const parts = def.match(paramsRegex)\n  const type = parts?.[2] || undefined\n  const name = parts?.[3]\n  const params = parts?.[5] || undefined\n  return { type, name, params }\n}\n\nexport function extractFunctionName(def: string) {\n  return extractFunctionParts(def).name\n}\n\nexport function extractFunctionParams(def: string) {\n  const params = extractFunctionParts(def).params\n  const splitParams = params?.split(',').map((x) => x.trim().split(' '))\n  return splitParams?.map((param) => ({\n    type: param[0],\n    name: param[1] === 'indexed' ? param[2] : param[1],\n    ...(param[1] === 'indexed' ? { indexed: true } : {}),\n  }))\n}\n\nexport function extractFunctionType(def: string) {\n  return extractFunctionParts(def).type\n}\n"],"mappings":"AAAA,MAAMA,WAAW,GAAG,qCAAqC;AAEzD,OAAM,SAAUC,oBAAoBA,CAACC,GAAW;EAC9C,MAAMC,KAAK,GAAGD,GAAG,CAACE,KAAK,CAACJ,WAAW,CAAC;EACpC,MAAMK,IAAI,GAAG,CAAAF,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAG,CAAC,CAAC,KAAIG,SAAS;EACpC,MAAMC,IAAI,GAAGJ,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAG,CAAC,CAAC;EACvB,MAAMK,MAAM,GAAG,CAAAL,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAG,CAAC,CAAC,KAAIG,SAAS;EACtC,OAAO;IAAED,IAAI;IAAEE,IAAI;IAAEC;EAAM,CAAE;AAC/B;AAEA,OAAM,SAAUC,mBAAmBA,CAACP,GAAW;EAC7C,OAAOD,oBAAoB,CAACC,GAAG,CAAC,CAACK,IAAI;AACvC;AAEA,OAAM,SAAUG,qBAAqBA,CAACR,GAAW;EAC/C,MAAMM,MAAM,GAAGP,oBAAoB,CAACC,GAAG,CAAC,CAACM,MAAM;EAC/C,MAAMG,WAAW,GAAGH,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEI,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,IAAI,EAAE,CAACH,KAAK,CAAC,GAAG,CAAC,CAAC;EACtE,OAAOD,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEE,GAAG,CAAEG,KAAK,KAAM;IAClCX,IAAI,EAAEW,KAAK,CAAC,CAAC,CAAC;IACdT,IAAI,EAAES,KAAK,CAAC,CAAC,CAAC,KAAK,SAAS,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC;IAClD,IAAIA,KAAK,CAAC,CAAC,CAAC,KAAK,SAAS,GAAG;MAAEC,OAAO,EAAE;IAAI,CAAE,GAAG,EAAE;GACpD,CAAC,CAAC;AACL;AAEA,OAAM,SAAUC,mBAAmBA,CAAChB,GAAW;EAC7C,OAAOD,oBAAoB,CAACC,GAAG,CAAC,CAACG,IAAI;AACvC"},"metadata":{},"sourceType":"module","externalDependencies":[]}