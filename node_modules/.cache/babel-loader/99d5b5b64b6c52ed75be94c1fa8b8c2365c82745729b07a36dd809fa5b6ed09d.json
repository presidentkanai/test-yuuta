{"ast":null,"code":"import { InvalidAddressError } from '../../errors/address.js';\nimport { InvalidLegacyVError, InvalidSerializedTransactionError } from '../../errors/transaction.js';\nimport { isAddress } from '../address/isAddress.js';\nimport { isHex } from '../data/isHex.js';\nimport { padHex } from '../data/pad.js';\nimport { trim } from '../data/trim.js';\nimport { hexToBigInt, hexToNumber } from '../encoding/fromHex.js';\nimport { fromRlp } from '../encoding/fromRlp.js';\nimport { isHash } from '../hash/isHash.js';\nimport { assertTransactionEIP1559, assertTransactionEIP2930, assertTransactionLegacy } from './assertTransaction.js';\nimport { getSerializedTransactionType } from './getSerializedTransactionType.js';\nexport function parseTransaction(serializedTransaction) {\n  const type = getSerializedTransactionType(serializedTransaction);\n  if (type === 'eip1559') return parseTransactionEIP1559(serializedTransaction);\n  if (type === 'eip2930') return parseTransactionEIP2930(serializedTransaction);\n  return parseTransactionLegacy(serializedTransaction);\n}\nfunction parseTransactionEIP1559(serializedTransaction) {\n  const transactionArray = toTransactionArray(serializedTransaction);\n  const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, data, accessList, v, r, s] = transactionArray;\n  if (!(transactionArray.length === 9 || transactionArray.length === 12)) throw new InvalidSerializedTransactionError({\n    attributes: {\n      chainId,\n      nonce,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      gas,\n      to,\n      value,\n      data,\n      accessList,\n      ...(transactionArray.length > 9 ? {\n        v,\n        r,\n        s\n      } : {})\n    },\n    serializedTransaction,\n    type: 'eip1559'\n  });\n  const transaction = {\n    chainId: hexToNumber(chainId),\n    type: 'eip1559'\n  };\n  if (isHex(to) && to !== '0x') transaction.to = to;\n  if (isHex(gas) && gas !== '0x') transaction.gas = hexToBigInt(gas);\n  if (isHex(data) && data !== '0x') transaction.data = data;\n  if (isHex(nonce) && nonce !== '0x') transaction.nonce = hexToNumber(nonce);\n  if (isHex(value) && value !== '0x') transaction.value = hexToBigInt(value);\n  if (isHex(maxFeePerGas) && maxFeePerGas !== '0x') transaction.maxFeePerGas = hexToBigInt(maxFeePerGas);\n  if (isHex(maxPriorityFeePerGas) && maxPriorityFeePerGas !== '0x') transaction.maxPriorityFeePerGas = hexToBigInt(maxPriorityFeePerGas);\n  if (accessList.length !== 0 && accessList !== '0x') transaction.accessList = parseAccessList(accessList);\n  assertTransactionEIP1559(transaction);\n  const signature = transactionArray.length === 12 ? parseEIP155Signature(transactionArray) : undefined;\n  return {\n    ...signature,\n    ...transaction\n  };\n}\nfunction parseTransactionEIP2930(serializedTransaction) {\n  const transactionArray = toTransactionArray(serializedTransaction);\n  const [chainId, nonce, gasPrice, gas, to, value, data, accessList, v, r, s] = transactionArray;\n  if (!(transactionArray.length === 8 || transactionArray.length === 11)) throw new InvalidSerializedTransactionError({\n    attributes: {\n      chainId,\n      nonce,\n      gasPrice,\n      gas,\n      to,\n      value,\n      data,\n      accessList,\n      ...(transactionArray.length > 8 ? {\n        v,\n        r,\n        s\n      } : {})\n    },\n    serializedTransaction,\n    type: 'eip2930'\n  });\n  const transaction = {\n    chainId: hexToNumber(chainId),\n    type: 'eip2930'\n  };\n  if (isHex(to) && to !== '0x') transaction.to = to;\n  if (isHex(gas) && gas !== '0x') transaction.gas = hexToBigInt(gas);\n  if (isHex(data) && data !== '0x') transaction.data = data;\n  if (isHex(nonce) && nonce !== '0x') transaction.nonce = hexToNumber(nonce);\n  if (isHex(value) && value !== '0x') transaction.value = hexToBigInt(value);\n  if (isHex(gasPrice) && gasPrice !== '0x') transaction.gasPrice = hexToBigInt(gasPrice);\n  if (accessList.length !== 0 && accessList !== '0x') transaction.accessList = parseAccessList(accessList);\n  assertTransactionEIP2930(transaction);\n  const signature = transactionArray.length === 11 ? parseEIP155Signature(transactionArray) : undefined;\n  return {\n    ...signature,\n    ...transaction\n  };\n}\nfunction parseTransactionLegacy(serializedTransaction) {\n  const transactionArray = fromRlp(serializedTransaction, 'hex');\n  const [nonce, gasPrice, gas, to, value, data, chainIdOrV_, r, s] = transactionArray;\n  if (!(transactionArray.length === 6 || transactionArray.length === 9)) throw new InvalidSerializedTransactionError({\n    attributes: {\n      nonce,\n      gasPrice,\n      gas,\n      to,\n      value,\n      data,\n      ...(transactionArray.length > 6 ? {\n        v: chainIdOrV_,\n        r,\n        s\n      } : {})\n    },\n    serializedTransaction,\n    type: 'legacy'\n  });\n  const transaction = {\n    type: 'legacy'\n  };\n  if (isHex(to) && to !== '0x') transaction.to = to;\n  if (isHex(gas) && gas !== '0x') transaction.gas = hexToBigInt(gas);\n  if (isHex(data) && data !== '0x') transaction.data = data;\n  if (isHex(nonce) && nonce !== '0x') transaction.nonce = hexToNumber(nonce);\n  if (isHex(value) && value !== '0x') transaction.value = hexToBigInt(value);\n  if (isHex(gasPrice) && gasPrice !== '0x') transaction.gasPrice = hexToBigInt(gasPrice);\n  assertTransactionLegacy(transaction);\n  if (transactionArray.length === 6) return transaction;\n  const chainIdOrV = isHex(chainIdOrV_) && chainIdOrV_ !== '0x' ? hexToBigInt(chainIdOrV_) : 0n;\n  if (s === '0x' && r === '0x') {\n    if (chainIdOrV > 0) transaction.chainId = Number(chainIdOrV);\n    return transaction;\n  }\n  const v = chainIdOrV;\n  const chainId = Number((v - 35n) / 2n);\n  if (chainId > 0) transaction.chainId = chainId;else if (v !== 27n && v !== 28n) throw new InvalidLegacyVError({\n    v\n  });\n  transaction.v = v;\n  transaction.s = s;\n  transaction.r = r;\n  return transaction;\n}\nexport function toTransactionArray(serializedTransaction) {\n  return fromRlp(`0x${serializedTransaction.slice(4)}`, 'hex');\n}\nexport function parseAccessList(accessList_) {\n  const accessList = [];\n  for (let i = 0; i < accessList_.length; i++) {\n    const [address, storageKeys] = accessList_[i];\n    if (!isAddress(address)) throw new InvalidAddressError({\n      address\n    });\n    accessList.push({\n      address: address,\n      storageKeys: storageKeys.map(key => isHash(key) ? key : trim(key))\n    });\n  }\n  return accessList;\n}\nfunction parseEIP155Signature(transactionArray) {\n  const signature = transactionArray.slice(-3);\n  const v = signature[0] === '0x' || hexToBigInt(signature[0]) === 0n ? 27n : 28n;\n  return {\n    r: padHex(signature[1], {\n      size: 32\n    }),\n    s: padHex(signature[2], {\n      size: 32\n    }),\n    v,\n    yParity: v === 27n ? 0 : 1\n  };\n}","map":{"version":3,"names":["InvalidAddressError","InvalidLegacyVError","InvalidSerializedTransactionError","isAddress","isHex","padHex","trim","hexToBigInt","hexToNumber","fromRlp","isHash","assertTransactionEIP1559","assertTransactionEIP2930","assertTransactionLegacy","getSerializedTransactionType","parseTransaction","serializedTransaction","type","parseTransactionEIP1559","parseTransactionEIP2930","parseTransactionLegacy","transactionArray","toTransactionArray","chainId","nonce","maxPriorityFeePerGas","maxFeePerGas","gas","to","value","data","accessList","v","r","s","length","attributes","transaction","parseAccessList","signature","parseEIP155Signature","undefined","gasPrice","chainIdOrV_","chainIdOrV","Number","slice","accessList_","i","address","storageKeys","push","map","key","size","yParity"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/utils/transaction/parseTransaction.ts"],"sourcesContent":["import { InvalidAddressError } from '../../errors/address.js'\nimport {\n  InvalidLegacyVError,\n  InvalidSerializedTransactionError,\n} from '../../errors/transaction.js'\nimport type { Hex, Signature } from '../../types/misc.js'\nimport type {\n  AccessList,\n  TransactionRequestEIP2930,\n  TransactionRequestLegacy,\n  TransactionSerializableEIP1559,\n  TransactionSerializableEIP2930,\n  TransactionSerializableLegacy,\n  TransactionSerialized,\n  TransactionSerializedEIP1559,\n  TransactionSerializedEIP2930,\n  TransactionType,\n} from '../../types/transaction.js'\nimport { isAddress } from '../address/isAddress.js'\nimport { isHex } from '../data/isHex.js'\nimport { padHex } from '../data/pad.js'\nimport { trim } from '../data/trim.js'\nimport { hexToBigInt, hexToNumber } from '../encoding/fromHex.js'\nimport { fromRlp } from '../encoding/fromRlp.js'\nimport type { RecursiveArray } from '../encoding/toRlp.js'\nimport { isHash } from '../hash/isHash.js'\n\nimport {\n  assertTransactionEIP1559,\n  assertTransactionEIP2930,\n  assertTransactionLegacy,\n} from './assertTransaction.js'\nimport {\n  type GetSerializedTransactionType,\n  getSerializedTransactionType,\n} from './getSerializedTransactionType.js'\n\nexport type ParseTransactionReturnType<\n  TSerialized extends TransactionSerialized = TransactionSerialized,\n  TType extends TransactionType = GetSerializedTransactionType<TSerialized>,\n> =\n  | (TType extends 'eip1559' ? TransactionSerializableEIP1559 : never)\n  | (TType extends 'eip2930' ? TransactionSerializableEIP2930 : never)\n  | (TType extends 'legacy' ? TransactionSerializableLegacy : never)\n\nexport function parseTransaction<TSerialized extends TransactionSerialized>(\n  serializedTransaction: TSerialized,\n): ParseTransactionReturnType<TSerialized> {\n  const type = getSerializedTransactionType(serializedTransaction)\n\n  if (type === 'eip1559')\n    return parseTransactionEIP1559(\n      serializedTransaction as TransactionSerializedEIP1559,\n    ) as ParseTransactionReturnType<TSerialized>\n\n  if (type === 'eip2930')\n    return parseTransactionEIP2930(\n      serializedTransaction as TransactionSerializedEIP2930,\n    ) as ParseTransactionReturnType<TSerialized>\n\n  return parseTransactionLegacy(\n    serializedTransaction,\n  ) as ParseTransactionReturnType<TSerialized>\n}\n\nfunction parseTransactionEIP1559(\n  serializedTransaction: TransactionSerializedEIP1559,\n): TransactionSerializableEIP1559 {\n  const transactionArray = toTransactionArray(serializedTransaction)\n\n  const [\n    chainId,\n    nonce,\n    maxPriorityFeePerGas,\n    maxFeePerGas,\n    gas,\n    to,\n    value,\n    data,\n    accessList,\n    v,\n    r,\n    s,\n  ] = transactionArray\n\n  if (!(transactionArray.length === 9 || transactionArray.length === 12))\n    throw new InvalidSerializedTransactionError({\n      attributes: {\n        chainId,\n        nonce,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n        gas,\n        to,\n        value,\n        data,\n        accessList,\n        ...(transactionArray.length > 9\n          ? {\n              v,\n              r,\n              s,\n            }\n          : {}),\n      },\n      serializedTransaction,\n      type: 'eip1559',\n    })\n\n  const transaction: TransactionSerializableEIP1559 = {\n    chainId: hexToNumber(chainId as Hex),\n    type: 'eip1559',\n  }\n  if (isHex(to) && to !== '0x') transaction.to = to\n  if (isHex(gas) && gas !== '0x') transaction.gas = hexToBigInt(gas)\n  if (isHex(data) && data !== '0x') transaction.data = data\n  if (isHex(nonce) && nonce !== '0x') transaction.nonce = hexToNumber(nonce)\n  if (isHex(value) && value !== '0x') transaction.value = hexToBigInt(value)\n  if (isHex(maxFeePerGas) && maxFeePerGas !== '0x')\n    transaction.maxFeePerGas = hexToBigInt(maxFeePerGas)\n  if (isHex(maxPriorityFeePerGas) && maxPriorityFeePerGas !== '0x')\n    transaction.maxPriorityFeePerGas = hexToBigInt(maxPriorityFeePerGas)\n  if (accessList.length !== 0 && accessList !== '0x')\n    transaction.accessList = parseAccessList(accessList as RecursiveArray<Hex>)\n\n  assertTransactionEIP1559(transaction)\n\n  const signature =\n    transactionArray.length === 12\n      ? parseEIP155Signature(transactionArray)\n      : undefined\n\n  return { ...signature, ...transaction }\n}\n\nfunction parseTransactionEIP2930(\n  serializedTransaction: TransactionSerializedEIP2930,\n): Omit<TransactionRequestEIP2930, 'from'> &\n  ({ chainId: number } | ({ chainId: number } & Signature)) {\n  const transactionArray = toTransactionArray(serializedTransaction)\n\n  const [chainId, nonce, gasPrice, gas, to, value, data, accessList, v, r, s] =\n    transactionArray\n\n  if (!(transactionArray.length === 8 || transactionArray.length === 11))\n    throw new InvalidSerializedTransactionError({\n      attributes: {\n        chainId,\n        nonce,\n        gasPrice,\n        gas,\n        to,\n        value,\n        data,\n        accessList,\n        ...(transactionArray.length > 8\n          ? {\n              v,\n              r,\n              s,\n            }\n          : {}),\n      },\n      serializedTransaction,\n      type: 'eip2930',\n    })\n\n  const transaction: TransactionSerializableEIP2930 = {\n    chainId: hexToNumber(chainId as Hex),\n    type: 'eip2930',\n  }\n  if (isHex(to) && to !== '0x') transaction.to = to\n  if (isHex(gas) && gas !== '0x') transaction.gas = hexToBigInt(gas)\n  if (isHex(data) && data !== '0x') transaction.data = data\n  if (isHex(nonce) && nonce !== '0x') transaction.nonce = hexToNumber(nonce)\n  if (isHex(value) && value !== '0x') transaction.value = hexToBigInt(value)\n  if (isHex(gasPrice) && gasPrice !== '0x')\n    transaction.gasPrice = hexToBigInt(gasPrice)\n  if (accessList.length !== 0 && accessList !== '0x')\n    transaction.accessList = parseAccessList(accessList as RecursiveArray<Hex>)\n\n  assertTransactionEIP2930(transaction)\n\n  const signature =\n    transactionArray.length === 11\n      ? parseEIP155Signature(transactionArray)\n      : undefined\n\n  return { ...signature, ...transaction }\n}\n\nfunction parseTransactionLegacy(\n  serializedTransaction: Hex,\n): Omit<TransactionRequestLegacy, 'from'> &\n  ({ chainId?: number } | ({ chainId: number } & Signature)) {\n  const transactionArray = fromRlp(serializedTransaction, 'hex')\n\n  const [nonce, gasPrice, gas, to, value, data, chainIdOrV_, r, s] =\n    transactionArray\n\n  if (!(transactionArray.length === 6 || transactionArray.length === 9))\n    throw new InvalidSerializedTransactionError({\n      attributes: {\n        nonce,\n        gasPrice,\n        gas,\n        to,\n        value,\n        data,\n        ...(transactionArray.length > 6\n          ? {\n              v: chainIdOrV_,\n              r,\n              s,\n            }\n          : {}),\n      },\n      serializedTransaction,\n      type: 'legacy',\n    })\n\n  const transaction: TransactionSerializableLegacy = {\n    type: 'legacy',\n  }\n  if (isHex(to) && to !== '0x') transaction.to = to\n  if (isHex(gas) && gas !== '0x') transaction.gas = hexToBigInt(gas)\n  if (isHex(data) && data !== '0x') transaction.data = data\n  if (isHex(nonce) && nonce !== '0x') transaction.nonce = hexToNumber(nonce)\n  if (isHex(value) && value !== '0x') transaction.value = hexToBigInt(value)\n  if (isHex(gasPrice) && gasPrice !== '0x')\n    transaction.gasPrice = hexToBigInt(gasPrice)\n\n  assertTransactionLegacy(transaction)\n\n  if (transactionArray.length === 6) return transaction\n\n  const chainIdOrV =\n    isHex(chainIdOrV_) && chainIdOrV_ !== '0x'\n      ? hexToBigInt(chainIdOrV_ as Hex)\n      : 0n\n\n  if (s === '0x' && r === '0x') {\n    if (chainIdOrV > 0) transaction.chainId = Number(chainIdOrV)\n    return transaction\n  }\n\n  const v = chainIdOrV\n\n  const chainId: number | undefined = Number((v - 35n) / 2n)\n  if (chainId > 0) transaction.chainId = chainId\n  else if (v !== 27n && v !== 28n) throw new InvalidLegacyVError({ v })\n\n  transaction.v = v\n  transaction.s = s as Hex\n  transaction.r = r as Hex\n\n  return transaction\n}\n\nexport function toTransactionArray(serializedTransaction: string) {\n  return fromRlp(`0x${serializedTransaction.slice(4)}` as Hex, 'hex')\n}\n\nexport function parseAccessList(accessList_: RecursiveArray<Hex>): AccessList {\n  const accessList: AccessList = []\n  for (let i = 0; i < accessList_.length; i++) {\n    const [address, storageKeys] = accessList_[i] as [Hex, Hex[]]\n\n    if (!isAddress(address)) throw new InvalidAddressError({ address })\n\n    accessList.push({\n      address: address,\n      storageKeys: storageKeys.map((key) => (isHash(key) ? key : trim(key))),\n    })\n  }\n  return accessList\n}\n\nfunction parseEIP155Signature(\n  transactionArray: RecursiveArray<Hex>,\n): Signature & { yParity: number } {\n  const signature = transactionArray.slice(-3)\n  const v =\n    signature[0] === '0x' || hexToBigInt(signature[0] as Hex) === 0n ? 27n : 28n\n  return {\n    r: padHex(signature[1] as Hex, { size: 32 }),\n    s: padHex(signature[2] as Hex, { size: 32 }),\n    v,\n    yParity: v === 27n ? 0 : 1,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}