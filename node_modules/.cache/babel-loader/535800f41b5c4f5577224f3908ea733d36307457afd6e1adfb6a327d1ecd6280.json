{"ast":null,"code":"import { RpcRequestError } from '../../errors/request.js';\nimport { UrlRequiredError } from '../../errors/transport.js';\nimport { getSocket, rpc } from '../../utils/rpc.js';\nimport { createTransport } from './createTransport.js';\n/**\n * @description Creates a WebSocket transport that connects to a JSON-RPC API.\n */\nexport function webSocket( /** URL of the JSON-RPC API. Defaults to the chain's public RPC URL. */\nurl) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    key = 'webSocket',\n    name = 'WebSocket JSON-RPC',\n    retryDelay\n  } = config;\n  return _ref => {\n    var _config$retryCount, _ref2, _chain$rpcUrls$defaul;\n    let {\n      chain,\n      retryCount: retryCount_,\n      timeout: timeout_\n    } = _ref;\n    const retryCount = (_config$retryCount = config.retryCount) !== null && _config$retryCount !== void 0 ? _config$retryCount : retryCount_;\n    const timeout = (_ref2 = timeout_ !== null && timeout_ !== void 0 ? timeout_ : config.timeout) !== null && _ref2 !== void 0 ? _ref2 : 10000;\n    const url_ = url || (chain === null || chain === void 0 || (_chain$rpcUrls$defaul = chain.rpcUrls.default.webSocket) === null || _chain$rpcUrls$defaul === void 0 ? void 0 : _chain$rpcUrls$defaul[0]);\n    if (!url_) throw new UrlRequiredError();\n    return createTransport({\n      key,\n      name,\n      async request(_ref3) {\n        let {\n          method,\n          params\n        } = _ref3;\n        const body = {\n          method,\n          params\n        };\n        const socket = await getSocket(url_);\n        const {\n          error,\n          result\n        } = await rpc.webSocketAsync(socket, {\n          body,\n          timeout\n        });\n        if (error) throw new RpcRequestError({\n          body,\n          error,\n          url: url_\n        });\n        return result;\n      },\n      retryCount,\n      retryDelay,\n      timeout,\n      type: 'webSocket'\n    }, {\n      getSocket() {\n        return getSocket(url_);\n      },\n      async subscribe(_ref4) {\n        let {\n          params,\n          onData,\n          onError\n        } = _ref4;\n        const socket = await getSocket(url_);\n        const {\n          result: subscriptionId\n        } = await new Promise((resolve, reject) => rpc.webSocket(socket, {\n          body: {\n            method: 'eth_subscribe',\n            params\n          },\n          onResponse(response) {\n            if (response.error) {\n              reject(response.error);\n              onError === null || onError === void 0 || onError(response.error);\n              return;\n            }\n            if (typeof response.id === 'number') {\n              resolve(response);\n              return;\n            }\n            if (response.method !== 'eth_subscription') return;\n            onData(response.params);\n          }\n        }));\n        return {\n          subscriptionId,\n          async unsubscribe() {\n            return new Promise(resolve => rpc.webSocket(socket, {\n              body: {\n                method: 'eth_unsubscribe',\n                params: [subscriptionId]\n              },\n              onResponse: resolve\n            }));\n          }\n        };\n      }\n    });\n  };\n}","map":{"version":3,"names":["RpcRequestError","UrlRequiredError","getSocket","rpc","createTransport","webSocket","url","config","arguments","length","undefined","key","name","retryDelay","_ref","_config$retryCount","_ref2","_chain$rpcUrls$defaul","chain","retryCount","retryCount_","timeout","timeout_","url_","rpcUrls","default","request","_ref3","method","params","body","socket","error","result","webSocketAsync","type","subscribe","_ref4","onData","onError","subscriptionId","Promise","resolve","reject","onResponse","response","id","unsubscribe"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/clients/transports/webSocket.ts"],"sourcesContent":["import type { WebSocket } from 'isomorphic-ws'\n\nimport { RpcRequestError } from '../../errors/request.js'\nimport { UrlRequiredError } from '../../errors/transport.js'\nimport type { Hash } from '../../types/misc.js'\nimport { type RpcResponse, getSocket, rpc } from '../../utils/rpc.js'\nimport {\n  type Transport,\n  type TransportConfig,\n  createTransport,\n} from './createTransport.js'\n\ntype WebSocketTransportSubscribeParameters = {\n  onData: (data: RpcResponse) => void\n  onError?: (error: any) => void\n}\n\ntype WebSocketTransportSubscribeReturnType = {\n  subscriptionId: Hash\n  unsubscribe: () => Promise<RpcResponse<boolean>>\n}\n\ntype WebSocketTransportSubscribe = {\n  subscribe(\n    args: WebSocketTransportSubscribeParameters & {\n      /**\n       * @description Add information about compiled contracts\n       * @link https://hardhat.org/hardhat-network/docs/reference#hardhat_addcompilationresult\n       */\n      params: ['newHeads']\n    },\n  ): Promise<WebSocketTransportSubscribeReturnType>\n}\n\nexport type WebSocketTransportConfig = {\n  /** The key of the WebSocket transport. */\n  key?: TransportConfig['key']\n  /** The name of the WebSocket transport. */\n  name?: TransportConfig['name']\n  /** The max number of times to retry. */\n  retryCount?: TransportConfig['retryCount']\n  /** The base delay (in ms) between retries. */\n  retryDelay?: TransportConfig['retryDelay']\n  /** The timeout (in ms) for async WebSocket requests. Default: 10_000 */\n  timeout?: TransportConfig['timeout']\n}\n\nexport type WebSocketTransport = Transport<\n  'webSocket',\n  {\n    getSocket(): Promise<WebSocket>\n    subscribe: WebSocketTransportSubscribe['subscribe']\n  }\n>\n\n/**\n * @description Creates a WebSocket transport that connects to a JSON-RPC API.\n */\nexport function webSocket(\n  /** URL of the JSON-RPC API. Defaults to the chain's public RPC URL. */\n  url?: string,\n  config: WebSocketTransportConfig = {},\n): WebSocketTransport {\n  const { key = 'webSocket', name = 'WebSocket JSON-RPC', retryDelay } = config\n  return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {\n    const retryCount = config.retryCount ?? retryCount_\n    const timeout = timeout_ ?? config.timeout ?? 10_000\n    const url_ = url || chain?.rpcUrls.default.webSocket?.[0]\n    if (!url_) throw new UrlRequiredError()\n    return createTransport(\n      {\n        key,\n        name,\n        async request({ method, params }) {\n          const body = { method, params }\n          const socket = await getSocket(url_)\n          const { error, result } = await rpc.webSocketAsync(socket, {\n            body,\n            timeout,\n          })\n          if (error)\n            throw new RpcRequestError({\n              body,\n              error,\n              url: url_,\n            })\n          return result\n        },\n        retryCount,\n        retryDelay,\n        timeout,\n        type: 'webSocket',\n      },\n      {\n        getSocket() {\n          return getSocket(url_)\n        },\n        async subscribe({ params, onData, onError }: any) {\n          const socket = await getSocket(url_)\n          const { result: subscriptionId } = await new Promise<any>(\n            (resolve, reject) =>\n              rpc.webSocket(socket, {\n                body: {\n                  method: 'eth_subscribe',\n                  params,\n                },\n                onResponse(response) {\n                  if (response.error) {\n                    reject(response.error)\n                    onError?.(response.error)\n                    return\n                  }\n\n                  if (typeof response.id === 'number') {\n                    resolve(response)\n                    return\n                  }\n                  if (response.method !== 'eth_subscription') return\n                  onData(response.params)\n                },\n              }),\n          )\n          return {\n            subscriptionId,\n            async unsubscribe() {\n              return new Promise<any>((resolve) =>\n                rpc.webSocket(socket, {\n                  body: {\n                    method: 'eth_unsubscribe',\n                    params: [subscriptionId],\n                  },\n                  onResponse: resolve,\n                }),\n              )\n            },\n          }\n        },\n      },\n    )\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}