{"ast":null,"code":"/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [cascade=true]\n *   Whether to drop parent nodes if they had children, but all their children\n *   were filtered out.\n */\n\nimport { convert } from 'unist-util-is';\nconst own = {}.hasOwnProperty;\n\n/**\n * Create a new `tree` of copies of all nodes that pass `test`.\n *\n * The tree is walked in *preorder* (NLR), visiting the node itself, then its\n * head, etc.\n *\n * @param tree\n *   Tree to filter.\n * @param options\n *   Configuration (optional).\n * @param test\n *   `unist-util-is` compatible test.\n * @returns\n *   New filtered tree.\n *\n *   `null` is returned if `tree` itself didn’t pass the test, or is cascaded\n *   away.\n */\nexport const filter =\n/**\n * @type {(\n *  (<Tree extends Node, Check extends Test>(node: Tree, options: Options | null | undefined, test: Check | null | undefined) => import('./complex-types.js').Matches<Tree, Check>) &\n *  (<Tree extends Node, Check extends Test>(node: Tree, test: Check) => import('./complex-types.js').Matches<Tree, Check>) &\n *  (<Tree extends Node>(node: Tree, options?: Options | null | undefined) => Tree)\n * )}\n */\n\n/**\n * @param {Node} tree\n * @param {Options | Test | null | undefined} [options]\n * @param {Test | null | undefined} [test]\n * @returns {Node | null}\n */\nfunction (tree, options, test) {\n  const is = convert(test || options);\n  /** @type {boolean | null | undefined} */\n  const cascadeRaw = options && typeof options === 'object' && 'cascade' in options ? /** @type {boolean | null | undefined} */options.cascade : undefined;\n  const cascade = cascadeRaw === undefined || cascadeRaw === null ? true : cascadeRaw;\n  return preorder(tree);\n\n  /**\n   * @param {Node} node\n   *   Current node.\n   * @param {number | undefined} [index]\n   *   Index of `node` in `parent`.\n   * @param {Parent | undefined} [parent]\n   *   Parent node.\n   * @returns {Node | null}\n   *   Shallow copy of `node`.\n   */\n  function preorder(node, index, parent) {\n    /** @type {Array<Node>} */\n    const children = [];\n    if (!is(node, index, parent)) return null;\n\n    // @ts-expect-error: Looks like a parent.\n    if (node.children) {\n      let childIndex = -1;\n\n      // @ts-expect-error Looks like a parent.\n      while (++childIndex < node.children.length) {\n        // @ts-expect-error Looks like a parent.\n        const result = preorder(node.children[childIndex], childIndex, node);\n        if (result) {\n          children.push(result);\n        }\n      }\n\n      // @ts-expect-error Looks like a parent.\n      if (cascade && node.children.length > 0 && children.length === 0) return null;\n    }\n\n    // Create a shallow clone, using the new children.\n    /** @type {typeof node} */\n    // @ts-expect-error all the fields will be copied over.\n    const next = {};\n    /** @type {string} */\n    let key;\n    for (key in node) {\n      if (own.call(node, key)) {\n        // @ts-expect-error: Looks like a record.\n        next[key] = key === 'children' ? children : node[key];\n      }\n    }\n    return next;\n  }\n};","map":{"version":3,"names":["convert","own","hasOwnProperty","filter","tree","options","test","is","cascadeRaw","cascade","undefined","preorder","node","index","parent","children","childIndex","length","result","push","next","key","call"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/unist-util-filter/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [cascade=true]\n *   Whether to drop parent nodes if they had children, but all their children\n *   were filtered out.\n */\n\nimport {convert} from 'unist-util-is'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create a new `tree` of copies of all nodes that pass `test`.\n *\n * The tree is walked in *preorder* (NLR), visiting the node itself, then its\n * head, etc.\n *\n * @param tree\n *   Tree to filter.\n * @param options\n *   Configuration (optional).\n * @param test\n *   `unist-util-is` compatible test.\n * @returns\n *   New filtered tree.\n *\n *   `null` is returned if `tree` itself didn’t pass the test, or is cascaded\n *   away.\n */\nexport const filter =\n  /**\n   * @type {(\n   *  (<Tree extends Node, Check extends Test>(node: Tree, options: Options | null | undefined, test: Check | null | undefined) => import('./complex-types.js').Matches<Tree, Check>) &\n   *  (<Tree extends Node, Check extends Test>(node: Tree, test: Check) => import('./complex-types.js').Matches<Tree, Check>) &\n   *  (<Tree extends Node>(node: Tree, options?: Options | null | undefined) => Tree)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Options | Test | null | undefined} [options]\n     * @param {Test | null | undefined} [test]\n     * @returns {Node | null}\n     */\n    function (tree, options, test) {\n      const is = convert(test || options)\n      /** @type {boolean | null | undefined} */\n      const cascadeRaw =\n        options && typeof options === 'object' && 'cascade' in options\n          ? /** @type {boolean | null | undefined} */ (options.cascade)\n          : undefined\n      const cascade =\n        cascadeRaw === undefined || cascadeRaw === null ? true : cascadeRaw\n\n      return preorder(tree)\n\n      /**\n       * @param {Node} node\n       *   Current node.\n       * @param {number | undefined} [index]\n       *   Index of `node` in `parent`.\n       * @param {Parent | undefined} [parent]\n       *   Parent node.\n       * @returns {Node | null}\n       *   Shallow copy of `node`.\n       */\n      function preorder(node, index, parent) {\n        /** @type {Array<Node>} */\n        const children = []\n\n        if (!is(node, index, parent)) return null\n\n        // @ts-expect-error: Looks like a parent.\n        if (node.children) {\n          let childIndex = -1\n\n          // @ts-expect-error Looks like a parent.\n          while (++childIndex < node.children.length) {\n            // @ts-expect-error Looks like a parent.\n            const result = preorder(node.children[childIndex], childIndex, node)\n\n            if (result) {\n              children.push(result)\n            }\n          }\n\n          // @ts-expect-error Looks like a parent.\n          if (cascade && node.children.length > 0 && children.length === 0)\n            return null\n        }\n\n        // Create a shallow clone, using the new children.\n        /** @type {typeof node} */\n        // @ts-expect-error all the fields will be copied over.\n        const next = {}\n        /** @type {string} */\n        let key\n\n        for (key in node) {\n          if (own.call(node, key)) {\n            // @ts-expect-error: Looks like a record.\n            next[key] = key === 'children' ? children : node[key]\n          }\n        }\n\n        return next\n      }\n    }\n  )\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,OAAO,QAAO,eAAe;AAErC,MAAMC,GAAG,GAAG,CAAC,CAAC,CAACC,cAAc;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,MAAM;AACjB;AACF;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACI,SAAAA,CAAUC,IAAI,EAAEC,OAAO,EAAEC,IAAI,EAAE;EAC7B,MAAMC,EAAE,GAAGP,OAAO,CAACM,IAAI,IAAID,OAAO,CAAC;EACnC;EACA,MAAMG,UAAU,GACdH,OAAO,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAI,SAAS,IAAIA,OAAO,GAC1D,yCAA2CA,OAAO,CAACI,OAAO,GAC1DC,SAAS;EACf,MAAMD,OAAO,GACXD,UAAU,KAAKE,SAAS,IAAIF,UAAU,KAAK,IAAI,GAAG,IAAI,GAAGA,UAAU;EAErE,OAAOG,QAAQ,CAACP,IAAI,CAAC;;EAErB;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACM,SAASO,QAAQA,CAACC,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAE;IACrC;IACA,MAAMC,QAAQ,GAAG,EAAE;IAEnB,IAAI,CAACR,EAAE,CAACK,IAAI,EAAEC,KAAK,EAAEC,MAAM,CAAC,EAAE,OAAO,IAAI;;IAEzC;IACA,IAAIF,IAAI,CAACG,QAAQ,EAAE;MACjB,IAAIC,UAAU,GAAG,CAAC,CAAC;;MAEnB;MACA,OAAO,EAAEA,UAAU,GAAGJ,IAAI,CAACG,QAAQ,CAACE,MAAM,EAAE;QAC1C;QACA,MAAMC,MAAM,GAAGP,QAAQ,CAACC,IAAI,CAACG,QAAQ,CAACC,UAAU,CAAC,EAAEA,UAAU,EAAEJ,IAAI,CAAC;QAEpE,IAAIM,MAAM,EAAE;UACVH,QAAQ,CAACI,IAAI,CAACD,MAAM,CAAC;QACvB;MACF;;MAEA;MACA,IAAIT,OAAO,IAAIG,IAAI,CAACG,QAAQ,CAACE,MAAM,GAAG,CAAC,IAAIF,QAAQ,CAACE,MAAM,KAAK,CAAC,EAC9D,OAAO,IAAI;IACf;;IAEA;IACA;IACA;IACA,MAAMG,IAAI,GAAG,CAAC,CAAC;IACf;IACA,IAAIC,GAAG;IAEP,KAAKA,GAAG,IAAIT,IAAI,EAAE;MAChB,IAAIX,GAAG,CAACqB,IAAI,CAACV,IAAI,EAAES,GAAG,CAAC,EAAE;QACvB;QACAD,IAAI,CAACC,GAAG,CAAC,GAAGA,GAAG,KAAK,UAAU,GAAGN,QAAQ,GAAGH,IAAI,CAACS,GAAG,CAAC;MACvD;IACF;IAEA,OAAOD,IAAI;EACb;AACF,CACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}