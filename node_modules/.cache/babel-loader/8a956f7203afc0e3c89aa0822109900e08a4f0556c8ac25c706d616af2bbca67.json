{"ast":null,"code":"import { numberToHex } from '../../utils/encoding/toHex.js';\n/**\n * Writes to a slot of an account's storage.\n *\n * - Docs: https://viem.sh/docs/actions/test/setStorageAt.html\n *\n * @param client - Client to use\n * @param parameters – {@link SetStorageAtParameters}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { setStorageAt } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await setStorageAt(client, {\n *   address: '0xe846c6fcf817734ca4527b28ccb4aea2b6663c79',\n *   index: 2,\n *   value: '0x0000000000000000000000000000000000000000000000000000000000000069',\n * })\n */\nexport async function setStorageAt(client, _ref) {\n  let {\n    address,\n    index,\n    value\n  } = _ref;\n  await client.request({\n    method: `${client.mode}_setStorageAt`,\n    params: [address, typeof index === 'number' ? numberToHex(index) : index, value]\n  });\n}","map":{"version":3,"names":["numberToHex","setStorageAt","client","_ref","address","index","value","request","method","mode","params"],"sources":["/Users/kanaiyuuta/Downloads/test-yuuta-main/node_modules/viem/actions/test/setStorageAt.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash, Hex } from '../../types/misc.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\n\nexport type SetStorageAtParameters = {\n  /** The account address. */\n  address: Address\n  /** The storage slot (index). Can either be a number or hash value. */\n  index: number | Hash\n  /** The value to store as a 32 byte hex string. */\n  value: Hex\n}\n\n/**\n * Writes to a slot of an account's storage.\n *\n * - Docs: https://viem.sh/docs/actions/test/setStorageAt.html\n *\n * @param client - Client to use\n * @param parameters – {@link SetStorageAtParameters}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { setStorageAt } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await setStorageAt(client, {\n *   address: '0xe846c6fcf817734ca4527b28ccb4aea2b6663c79',\n *   index: 2,\n *   value: '0x0000000000000000000000000000000000000000000000000000000000000069',\n * })\n */\nexport async function setStorageAt<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  { address, index, value }: SetStorageAtParameters,\n) {\n  await client.request({\n    method: `${client.mode}_setStorageAt`,\n    params: [\n      address,\n      typeof index === 'number' ? numberToHex(index) : index,\n      value,\n    ],\n  })\n}\n"],"mappings":"AAUA,SAASA,WAAW,QAAQ,+BAA+B;AAW3D;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,OAAO,eAAeC,YAAYA,CAIhCC,MAAsE,EAAAC,IAAA,EACrB;EAAA,IAAjD;IAAEC,OAAO;IAAEC,KAAK;IAAEC;EAAK,CAA0B,GAAAH,IAAA;EAEjD,MAAMD,MAAM,CAACK,OAAO,CAAC;IACnBC,MAAM,EAAE,GAAGN,MAAM,CAACO,IAAI,eAAe;IACrCC,MAAM,EAAE,CACNN,OAAO,EACP,OAAOC,KAAK,KAAK,QAAQ,GAAGL,WAAW,CAACK,KAAK,CAAC,GAAGA,KAAK,EACtDC,KAAK;GAER,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}